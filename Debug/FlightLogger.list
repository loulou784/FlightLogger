
FlightLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080064c4  080064c4  000164c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f0  080065f0  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  080065f0  080065f0  000165f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065f8  080065f8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065f8  080065f8  000165f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08006600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  20000024  08006624  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000854  08006624  00020854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b2a  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003422  00000000  00000000  00039b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0003cfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001060  00000000  00000000  0003e168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000228f1  00000000  00000000  0003f1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c7f  00000000  00000000  00061ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4e7b  00000000  00000000  00079738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013e5b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000481c  00000000  00000000  0013e608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000024 	.word	0x20000024
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080064ac 	.word	0x080064ac

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000028 	.word	0x20000028
 80001c8:	080064ac 	.word	0x080064ac

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b96e 	b.w	80004c0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468c      	mov	ip, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	f040 8083 	bne.w	8000312 <__udivmoddi4+0x116>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d947      	bls.n	80002a2 <__udivmoddi4+0xa6>
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	b142      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000218:	f1c2 0020 	rsb	r0, r2, #32
 800021c:	fa24 f000 	lsr.w	r0, r4, r0
 8000220:	4091      	lsls	r1, r2
 8000222:	4097      	lsls	r7, r2
 8000224:	ea40 0c01 	orr.w	ip, r0, r1
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbbc f6f8 	udiv	r6, ip, r8
 8000234:	fa1f fe87 	uxth.w	lr, r7
 8000238:	fb08 c116 	mls	r1, r8, r6, ip
 800023c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000240:	fb06 f10e 	mul.w	r1, r6, lr
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18fb      	adds	r3, r7, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024e:	f080 8119 	bcs.w	8000484 <__udivmoddi4+0x288>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8116 	bls.w	8000484 <__udivmoddi4+0x288>
 8000258:	3e02      	subs	r6, #2
 800025a:	443b      	add	r3, r7
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000270:	45a6      	cmp	lr, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	193c      	adds	r4, r7, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8105 	bcs.w	8000488 <__udivmoddi4+0x28c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8102 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000284:	3802      	subs	r0, #2
 8000286:	443c      	add	r4, r7
 8000288:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028c:	eba4 040e 	sub.w	r4, r4, lr
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	b902      	cbnz	r2, 80002a6 <__udivmoddi4+0xaa>
 80002a4:	deff      	udf	#255	; 0xff
 80002a6:	fab2 f282 	clz	r2, r2
 80002aa:	2a00      	cmp	r2, #0
 80002ac:	d150      	bne.n	8000350 <__udivmoddi4+0x154>
 80002ae:	1bcb      	subs	r3, r1, r7
 80002b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b4:	fa1f f887 	uxth.w	r8, r7
 80002b8:	2601      	movs	r6, #1
 80002ba:	fbb3 fcfe 	udiv	ip, r3, lr
 80002be:	0c21      	lsrs	r1, r4, #16
 80002c0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c8:	fb08 f30c 	mul.w	r3, r8, ip
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d907      	bls.n	80002e0 <__udivmoddi4+0xe4>
 80002d0:	1879      	adds	r1, r7, r1
 80002d2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d6:	d202      	bcs.n	80002de <__udivmoddi4+0xe2>
 80002d8:	428b      	cmp	r3, r1
 80002da:	f200 80e9 	bhi.w	80004b0 <__udivmoddi4+0x2b4>
 80002de:	4684      	mov	ip, r0
 80002e0:	1ac9      	subs	r1, r1, r3
 80002e2:	b2a3      	uxth	r3, r4
 80002e4:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e8:	fb0e 1110 	mls	r1, lr, r0, r1
 80002ec:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f0:	fb08 f800 	mul.w	r8, r8, r0
 80002f4:	45a0      	cmp	r8, r4
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0x10c>
 80002f8:	193c      	adds	r4, r7, r4
 80002fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x10a>
 8000300:	45a0      	cmp	r8, r4
 8000302:	f200 80d9 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 8000306:	4618      	mov	r0, r3
 8000308:	eba4 0408 	sub.w	r4, r4, r8
 800030c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000310:	e7bf      	b.n	8000292 <__udivmoddi4+0x96>
 8000312:	428b      	cmp	r3, r1
 8000314:	d909      	bls.n	800032a <__udivmoddi4+0x12e>
 8000316:	2d00      	cmp	r5, #0
 8000318:	f000 80b1 	beq.w	800047e <__udivmoddi4+0x282>
 800031c:	2600      	movs	r6, #0
 800031e:	e9c5 0100 	strd	r0, r1, [r5]
 8000322:	4630      	mov	r0, r6
 8000324:	4631      	mov	r1, r6
 8000326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032a:	fab3 f683 	clz	r6, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d14a      	bne.n	80003c8 <__udivmoddi4+0x1cc>
 8000332:	428b      	cmp	r3, r1
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0x140>
 8000336:	4282      	cmp	r2, r0
 8000338:	f200 80b8 	bhi.w	80004ac <__udivmoddi4+0x2b0>
 800033c:	1a84      	subs	r4, r0, r2
 800033e:	eb61 0103 	sbc.w	r1, r1, r3
 8000342:	2001      	movs	r0, #1
 8000344:	468c      	mov	ip, r1
 8000346:	2d00      	cmp	r5, #0
 8000348:	d0a8      	beq.n	800029c <__udivmoddi4+0xa0>
 800034a:	e9c5 4c00 	strd	r4, ip, [r5]
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0xa0>
 8000350:	f1c2 0320 	rsb	r3, r2, #32
 8000354:	fa20 f603 	lsr.w	r6, r0, r3
 8000358:	4097      	lsls	r7, r2
 800035a:	fa01 f002 	lsl.w	r0, r1, r2
 800035e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000362:	40d9      	lsrs	r1, r3
 8000364:	4330      	orrs	r0, r6
 8000366:	0c03      	lsrs	r3, r0, #16
 8000368:	fbb1 f6fe 	udiv	r6, r1, lr
 800036c:	fa1f f887 	uxth.w	r8, r7
 8000370:	fb0e 1116 	mls	r1, lr, r6, r1
 8000374:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000378:	fb06 f108 	mul.w	r1, r6, r8
 800037c:	4299      	cmp	r1, r3
 800037e:	fa04 f402 	lsl.w	r4, r4, r2
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x19c>
 8000384:	18fb      	adds	r3, r7, r3
 8000386:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800038a:	f080 808d 	bcs.w	80004a8 <__udivmoddi4+0x2ac>
 800038e:	4299      	cmp	r1, r3
 8000390:	f240 808a 	bls.w	80004a8 <__udivmoddi4+0x2ac>
 8000394:	3e02      	subs	r6, #2
 8000396:	443b      	add	r3, r7
 8000398:	1a5b      	subs	r3, r3, r1
 800039a:	b281      	uxth	r1, r0
 800039c:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a8:	fb00 f308 	mul.w	r3, r0, r8
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d907      	bls.n	80003c0 <__udivmoddi4+0x1c4>
 80003b0:	1879      	adds	r1, r7, r1
 80003b2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b6:	d273      	bcs.n	80004a0 <__udivmoddi4+0x2a4>
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d971      	bls.n	80004a0 <__udivmoddi4+0x2a4>
 80003bc:	3802      	subs	r0, #2
 80003be:	4439      	add	r1, r7
 80003c0:	1acb      	subs	r3, r1, r3
 80003c2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c6:	e778      	b.n	80002ba <__udivmoddi4+0xbe>
 80003c8:	f1c6 0c20 	rsb	ip, r6, #32
 80003cc:	fa03 f406 	lsl.w	r4, r3, r6
 80003d0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d4:	431c      	orrs	r4, r3
 80003d6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003da:	fa01 f306 	lsl.w	r3, r1, r6
 80003de:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e6:	431f      	orrs	r7, r3
 80003e8:	0c3b      	lsrs	r3, r7, #16
 80003ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ee:	fa1f f884 	uxth.w	r8, r4
 80003f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fa:	fb09 fa08 	mul.w	sl, r9, r8
 80003fe:	458a      	cmp	sl, r1
 8000400:	fa02 f206 	lsl.w	r2, r2, r6
 8000404:	fa00 f306 	lsl.w	r3, r0, r6
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x220>
 800040a:	1861      	adds	r1, r4, r1
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000410:	d248      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000412:	458a      	cmp	sl, r1
 8000414:	d946      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 8000416:	f1a9 0902 	sub.w	r9, r9, #2
 800041a:	4421      	add	r1, r4
 800041c:	eba1 010a 	sub.w	r1, r1, sl
 8000420:	b2bf      	uxth	r7, r7
 8000422:	fbb1 f0fe 	udiv	r0, r1, lr
 8000426:	fb0e 1110 	mls	r1, lr, r0, r1
 800042a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042e:	fb00 f808 	mul.w	r8, r0, r8
 8000432:	45b8      	cmp	r8, r7
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x24a>
 8000436:	19e7      	adds	r7, r4, r7
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800043c:	d22e      	bcs.n	800049c <__udivmoddi4+0x2a0>
 800043e:	45b8      	cmp	r8, r7
 8000440:	d92c      	bls.n	800049c <__udivmoddi4+0x2a0>
 8000442:	3802      	subs	r0, #2
 8000444:	4427      	add	r7, r4
 8000446:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044a:	eba7 0708 	sub.w	r7, r7, r8
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	454f      	cmp	r7, r9
 8000454:	46c6      	mov	lr, r8
 8000456:	4649      	mov	r1, r9
 8000458:	d31a      	bcc.n	8000490 <__udivmoddi4+0x294>
 800045a:	d017      	beq.n	800048c <__udivmoddi4+0x290>
 800045c:	b15d      	cbz	r5, 8000476 <__udivmoddi4+0x27a>
 800045e:	ebb3 020e 	subs.w	r2, r3, lr
 8000462:	eb67 0701 	sbc.w	r7, r7, r1
 8000466:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046a:	40f2      	lsrs	r2, r6
 800046c:	ea4c 0202 	orr.w	r2, ip, r2
 8000470:	40f7      	lsrs	r7, r6
 8000472:	e9c5 2700 	strd	r2, r7, [r5]
 8000476:	2600      	movs	r6, #0
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	462e      	mov	r6, r5
 8000480:	4628      	mov	r0, r5
 8000482:	e70b      	b.n	800029c <__udivmoddi4+0xa0>
 8000484:	4606      	mov	r6, r0
 8000486:	e6e9      	b.n	800025c <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fd      	b.n	8000288 <__udivmoddi4+0x8c>
 800048c:	4543      	cmp	r3, r8
 800048e:	d2e5      	bcs.n	800045c <__udivmoddi4+0x260>
 8000490:	ebb8 0e02 	subs.w	lr, r8, r2
 8000494:	eb69 0104 	sbc.w	r1, r9, r4
 8000498:	3801      	subs	r0, #1
 800049a:	e7df      	b.n	800045c <__udivmoddi4+0x260>
 800049c:	4608      	mov	r0, r1
 800049e:	e7d2      	b.n	8000446 <__udivmoddi4+0x24a>
 80004a0:	4660      	mov	r0, ip
 80004a2:	e78d      	b.n	80003c0 <__udivmoddi4+0x1c4>
 80004a4:	4681      	mov	r9, r0
 80004a6:	e7b9      	b.n	800041c <__udivmoddi4+0x220>
 80004a8:	4666      	mov	r6, ip
 80004aa:	e775      	b.n	8000398 <__udivmoddi4+0x19c>
 80004ac:	4630      	mov	r0, r6
 80004ae:	e74a      	b.n	8000346 <__udivmoddi4+0x14a>
 80004b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b4:	4439      	add	r1, r7
 80004b6:	e713      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004b8:	3802      	subs	r0, #2
 80004ba:	443c      	add	r4, r7
 80004bc:	e724      	b.n	8000308 <__udivmoddi4+0x10c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b088      	sub	sp, #32
 80004c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_GPIO_Init+0x8c>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a1c      	ldr	r2, [pc, #112]	; (8000550 <MX_GPIO_Init+0x8c>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_GPIO_Init+0x8c>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_GPIO_Init+0x8c>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a16      	ldr	r2, [pc, #88]	; (8000550 <MX_GPIO_Init+0x8c>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_GPIO_Init+0x8c>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	607b      	str	r3, [r7, #4]
 8000508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_GPIO_Init+0x8c>)
 800050c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050e:	4a10      	ldr	r2, [pc, #64]	; (8000550 <MX_GPIO_Init+0x8c>)
 8000510:	f043 0302 	orr.w	r3, r3, #2
 8000514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <MX_GPIO_Init+0x8c>)
 8000518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800051a:	f003 0302 	and.w	r3, r3, #2
 800051e:	603b      	str	r3, [r7, #0]
 8000520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	210a      	movs	r1, #10
 8000526:	480b      	ldr	r0, [pc, #44]	; (8000554 <MX_GPIO_Init+0x90>)
 8000528:	f000 fdf8 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LD3_Pin;
 800052c:	230a      	movs	r3, #10
 800052e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2300      	movs	r3, #0
 800053a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	4619      	mov	r1, r3
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <MX_GPIO_Init+0x90>)
 8000544:	f000 fc80 	bl	8000e48 <HAL_GPIO_Init>

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	48000400 	.word	0x48000400

08000558 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800055c:	4b1b      	ldr	r3, [pc, #108]	; (80005cc <MX_I2C1_Init+0x74>)
 800055e:	4a1c      	ldr	r2, [pc, #112]	; (80005d0 <MX_I2C1_Init+0x78>)
 8000560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000562:	4b1a      	ldr	r3, [pc, #104]	; (80005cc <MX_I2C1_Init+0x74>)
 8000564:	4a1b      	ldr	r2, [pc, #108]	; (80005d4 <MX_I2C1_Init+0x7c>)
 8000566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000568:	4b18      	ldr	r3, [pc, #96]	; (80005cc <MX_I2C1_Init+0x74>)
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056e:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_I2C1_Init+0x74>)
 8000570:	2201      	movs	r2, #1
 8000572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000574:	4b15      	ldr	r3, [pc, #84]	; (80005cc <MX_I2C1_Init+0x74>)
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800057a:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_I2C1_Init+0x74>)
 800057c:	2200      	movs	r2, #0
 800057e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_I2C1_Init+0x74>)
 8000582:	2200      	movs	r2, #0
 8000584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000586:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_I2C1_Init+0x74>)
 8000588:	2200      	movs	r2, #0
 800058a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_I2C1_Init+0x74>)
 800058e:	2200      	movs	r2, #0
 8000590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000592:	480e      	ldr	r0, [pc, #56]	; (80005cc <MX_I2C1_Init+0x74>)
 8000594:	f000 fdda 	bl	800114c <HAL_I2C_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800059e:	f000 f945 	bl	800082c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4809      	ldr	r0, [pc, #36]	; (80005cc <MX_I2C1_Init+0x74>)
 80005a6:	f000 fe60 	bl	800126a <HAL_I2CEx_ConfigAnalogFilter>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005b0:	f000 f93c 	bl	800082c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b4:	2100      	movs	r1, #0
 80005b6:	4805      	ldr	r0, [pc, #20]	; (80005cc <MX_I2C1_Init+0x74>)
 80005b8:	f000 fea2 	bl	8001300 <HAL_I2CEx_ConfigDigitalFilter>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005c2:	f000 f933 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000078 	.word	0x20000078
 80005d0:	40005400 	.word	0x40005400
 80005d4:	10909cec 	.word	0x10909cec

080005d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	; 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a18      	ldr	r2, [pc, #96]	; (8000658 <HAL_I2C_MspInit+0x80>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d129      	bne.n	800064e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b18      	ldr	r3, [pc, #96]	; (800065c <HAL_I2C_MspInit+0x84>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b15      	ldr	r3, [pc, #84]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000612:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000618:	2312      	movs	r3, #18
 800061a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	2301      	movs	r3, #1
 800061e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000620:	2303      	movs	r3, #3
 8000622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000624:	2304      	movs	r3, #4
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	4619      	mov	r1, r3
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 fc09 	bl	8000e48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800063a:	4a08      	ldr	r2, [pc, #32]	; (800065c <HAL_I2C_MspInit+0x84>)
 800063c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000640:	6593      	str	r3, [r2, #88]	; 0x58
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <HAL_I2C_MspInit+0x84>)
 8000644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000646:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	; 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40005400 	.word	0x40005400
 800065c:	40021000 	.word	0x40021000

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000668:	f000 fa93 	bl	8000b92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800066c:	f000 f85a 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000670:	f7ff ff28 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000674:	f000 f9e0 	bl	8000a38 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000678:	f7ff ff6e 	bl	8000558 <MX_I2C1_Init>
  MX_SPI1_Init();
 800067c:	f000 f8dc 	bl	8000838 <MX_SPI1_Init>
  MX_FATFS_Init();
 8000680:	f002 fff2 	bl	8003668 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // Mount SD Card
  if(FR_OK == f_mount(&FatFs, "", 1)) {
 8000684:	2201      	movs	r2, #1
 8000686:	4921      	ldr	r1, [pc, #132]	; (800070c <main+0xac>)
 8000688:	4821      	ldr	r0, [pc, #132]	; (8000710 <main+0xb0>)
 800068a:	f005 fa65 	bl	8005b58 <f_mount>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d102      	bne.n	800069a <main+0x3a>
	bSDPresent = true;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <main+0xb4>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
  }

  if(bSDPresent == true) {
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <main+0xb4>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d02a      	beq.n	80006f8 <main+0x98>
    FIL fp;
    // Open the file for writting
    fResult = f_open(&fp, "testFile.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80006a2:	463b      	mov	r3, r7
 80006a4:	2213      	movs	r2, #19
 80006a6:	491c      	ldr	r1, [pc, #112]	; (8000718 <main+0xb8>)
 80006a8:	4618      	mov	r0, r3
 80006aa:	f005 fa9b 	bl	8005be4 <f_open>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b1a      	ldr	r3, [pc, #104]	; (800071c <main+0xbc>)
 80006b4:	701a      	strb	r2, [r3, #0]

    // Writing data to file
    if(fResult == FR_OK) {
 80006b6:	4b19      	ldr	r3, [pc, #100]	; (800071c <main+0xbc>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d114      	bne.n	80006e8 <main+0x88>
      uint8_t u8BytesWritten = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
      uint8_t u8ToWrite[] = "Hello file\n";
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <main+0xc0>)
 80006c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80006ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80006cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   	  fResult = f_write(&fp, u8ToWrite, sizeof(u8ToWrite), &u8BytesWritten);
 80006d0:	f207 233f 	addw	r3, r7, #575	; 0x23f
 80006d4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80006d8:	4638      	mov	r0, r7
 80006da:	220c      	movs	r2, #12
 80006dc:	f005 fc40 	bl	8005f60 <f_write>
 80006e0:	4603      	mov	r3, r0
 80006e2:	461a      	mov	r2, r3
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <main+0xbc>)
 80006e6:	701a      	strb	r2, [r3, #0]
    }

    // Closing our written file
    fResult = f_close(&fp);
 80006e8:	463b      	mov	r3, r7
 80006ea:	4618      	mov	r0, r3
 80006ec:	f005 fe2b 	bl	8006346 <f_close>
 80006f0:	4603      	mov	r3, r0
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <main+0xbc>)
 80006f6:	701a      	strb	r2, [r3, #0]
  }

  // Unmount SD Card
  if(bSDPresent == true) {
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <main+0xb4>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d004      	beq.n	800070a <main+0xaa>
	f_mount(NULL, "", 0);
 8000700:	2200      	movs	r2, #0
 8000702:	4902      	ldr	r1, [pc, #8]	; (800070c <main+0xac>)
 8000704:	2000      	movs	r0, #0
 8000706:	f005 fa27 	bl	8005b58 <f_mount>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070a:	e7fe      	b.n	800070a <main+0xaa>
 800070c:	080064c4 	.word	0x080064c4
 8000710:	200000c8 	.word	0x200000c8
 8000714:	20000040 	.word	0x20000040
 8000718:	080064c8 	.word	0x080064c8
 800071c:	200000c4 	.word	0x200000c4
 8000720:	080064d8 	.word	0x080064d8

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b0ac      	sub	sp, #176	; 0xb0
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800072e:	2244      	movs	r2, #68	; 0x44
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f005 feb2 	bl	800649c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2254      	movs	r2, #84	; 0x54
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f005 fea4 	bl	800649c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000754:	f000 fe20 	bl	8001398 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000758:	4b33      	ldr	r3, [pc, #204]	; (8000828 <SystemClock_Config+0x104>)
 800075a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800075e:	4a32      	ldr	r2, [pc, #200]	; (8000828 <SystemClock_Config+0x104>)
 8000760:	f023 0318 	bic.w	r3, r3, #24
 8000764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000768:	2314      	movs	r3, #20
 800076a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800076c:	2301      	movs	r3, #1
 800076e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000776:	2300      	movs	r3, #0
 8000778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800077c:	2360      	movs	r3, #96	; 0x60
 800077e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000782:	2302      	movs	r3, #2
 8000784:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000788:	2301      	movs	r3, #1
 800078a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000794:	2328      	movs	r3, #40	; 0x28
 8000796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800079a:	2307      	movs	r3, #7
 800079c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 fe65 	bl	8001480 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007bc:	f000 f836 	bl	800082c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c0:	230f      	movs	r3, #15
 80007c2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c4:	2303      	movs	r3, #3
 80007c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007d8:	2104      	movs	r1, #4
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fa70 	bl	8001cc0 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007e6:	f000 f821 	bl	800082c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80007ea:	2342      	movs	r3, #66	; 0x42
 80007ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	4618      	mov	r0, r3
 80007fa:	f001 fc67 	bl	80020cc <HAL_RCCEx_PeriphCLKConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000804:	f000 f812 	bl	800082c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000808:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080c:	f000 fde2 	bl	80013d4 <HAL_PWREx_ControlVoltageScaling>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000816:	f000 f809 	bl	800082c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800081a:	f001 fe4b 	bl	80024b4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800081e:	bf00      	nop
 8000820:	37b0      	adds	r7, #176	; 0xb0
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_SPI1_Init+0x74>)
 800083e:	4a1c      	ldr	r2, [pc, #112]	; (80008b0 <MX_SPI1_Init+0x78>)
 8000840:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <MX_SPI1_Init+0x74>)
 8000844:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000848:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_SPI1_Init+0x74>)
 8000852:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000856:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_SPI1_Init+0x74>)
 8000866:	f44f 7200 	mov.w	r2, #512	; 0x200
 800086a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_SPI1_Init+0x74>)
 800086e:	2208      	movs	r2, #8
 8000870:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_SPI1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_SPI1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_SPI1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_SPI1_Init+0x74>)
 8000886:	2207      	movs	r2, #7
 8000888:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_SPI1_Init+0x74>)
 8000892:	2208      	movs	r2, #8
 8000894:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_SPI1_Init+0x74>)
 8000898:	f001 ff0e 	bl	80026b8 <HAL_SPI_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008a2:	f7ff ffc3 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200002f8 	.word	0x200002f8
 80008b0:	40013000 	.word	0x40013000

080008b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	; (8000930 <HAL_SPI_MspInit+0x7c>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d128      	bne.n	8000928 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008d6:	4b17      	ldr	r3, [pc, #92]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80008e0:	6613      	str	r3, [r2, #96]	; 0x60
 80008e2:	4b14      	ldr	r3, [pc, #80]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008ea:	613b      	str	r3, [r7, #16]
 80008ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b11      	ldr	r3, [pc, #68]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a10      	ldr	r2, [pc, #64]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_SPI_MspInit+0x80>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000906:	23e0      	movs	r3, #224	; 0xe0
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000916:	2305      	movs	r3, #5
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000924:	f000 fa90 	bl	8000e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000928:	bf00      	nop
 800092a:	3728      	adds	r7, #40	; 0x28
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	40013000 	.word	0x40013000
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_MspInit+0x44>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6613      	str	r3, [r2, #96]	; 0x60
 800094a:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_MspInit+0x44>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	4a08      	ldr	r2, [pc, #32]	; (800097c <HAL_MspInit+0x44>)
 800095c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000960:	6593      	str	r3, [r2, #88]	; 0x58
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_MspInit+0x44>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f936 	bl	8000c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <SystemInit+0x5c>)
 80009da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <SystemInit+0x5c>)
 80009e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <SystemInit+0x60>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a11      	ldr	r2, [pc, #68]	; (8000a34 <SystemInit+0x60>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <SystemInit+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <SystemInit+0x60>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0d      	ldr	r2, [pc, #52]	; (8000a34 <SystemInit+0x60>)
 8000a00:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a04:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a08:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a0a:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <SystemInit+0x60>)
 8000a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a10:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <SystemInit+0x60>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <SystemInit+0x60>)
 8000a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <SystemInit+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	40021000 	.word	0x40021000

08000a38 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a3e:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <MX_USART2_UART_Init+0x5c>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_USART2_UART_Init+0x58>)
 8000a7c:	f002 fa32 	bl	8002ee4 <HAL_UART_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a86:	f7ff fed1 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2000035c 	.word	0x2000035c
 8000a94:	40004400 	.word	0x40004400

08000a98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <HAL_UART_MspInit+0xa0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d13a      	bne.n	8000b30 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aba:	4b20      	ldr	r3, [pc, #128]	; (8000b3c <HAL_UART_MspInit+0xa4>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <HAL_UART_MspInit+0xa4>)
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <HAL_UART_MspInit+0xa4>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <HAL_UART_MspInit+0xa4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <HAL_UART_MspInit+0xa4>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <HAL_UART_MspInit+0xa4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000aea:	2304      	movs	r3, #4
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000afa:	2307      	movs	r3, #7
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f000 f99e 	bl	8000e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b12:	2302      	movs	r3, #2
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b2c:	f000 f98c 	bl	8000e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b30:	bf00      	nop
 8000b32:	3728      	adds	r7, #40	; 0x28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b44:	f7ff ff46 	bl	80009d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b4a:	e003      	b.n	8000b54 <LoopCopyDataInit>

08000b4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b52:	3104      	adds	r1, #4

08000b54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b54:	480a      	ldr	r0, [pc, #40]	; (8000b80 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b5c:	d3f6      	bcc.n	8000b4c <CopyDataInit>
	ldr	r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b60:	e002      	b.n	8000b68 <LoopFillZerobss>

08000b62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b64:	f842 3b04 	str.w	r3, [r2], #4

08000b68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <LoopForever+0x16>)
	cmp	r2, r3
 8000b6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b6c:	d3f9      	bcc.n	8000b62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f005 fc71 	bl	8006454 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fd75 	bl	8000660 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8000b7c:	08006600 	.word	0x08006600
	ldr	r0, =_sdata
 8000b80:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b84:	20000024 	.word	0x20000024
	ldr	r2, =_sbss
 8000b88:	20000024 	.word	0x20000024
	ldr	r3, = _ebss
 8000b8c:	20000854 	.word	0x20000854

08000b90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_IRQHandler>

08000b92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	f000 f91f 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f000 f80e 	bl	8000bc4 <HAL_InitTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d002      	beq.n	8000bb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	71fb      	strb	r3, [r7, #7]
 8000bb2:	e001      	b.n	8000bb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bb4:	f7ff fec0 	bl	8000938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d023      	beq.n	8000c20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_InitTick+0x70>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f91d 	bl	8000e2e <HAL_SYSTICK_Config>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10f      	bne.n	8000c1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d809      	bhi.n	8000c14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c08:	f000 f8f5 	bl	8000df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c0c:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <HAL_InitTick+0x74>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e007      	b.n	8000c24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
 8000c18:	e004      	b.n	8000c24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e001      	b.n	8000c24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000004 	.word	0x20000004

08000c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_IncTick+0x20>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	461a      	mov	r2, r3
 8000c46:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_IncTick+0x24>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	4a04      	ldr	r2, [pc, #16]	; (8000c60 <HAL_IncTick+0x24>)
 8000c4e:	6013      	str	r3, [r2, #0]
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	200003e0 	.word	0x200003e0

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	200003e0 	.word	0x200003e0

08000c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	; (8000cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <__NVIC_GetPriorityGrouping+0x18>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	f003 0307 	and.w	r3, r3, #7
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff47 	bl	8000c7c <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff5c 	bl	8000cc4 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff8e 	bl	8000d34 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffb0 	bl	8000d9c <SysTick_Config>
 8000e3c:	4603      	mov	r3, r0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	e148      	b.n	80010ea <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 813a 	beq.w	80010e4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d00b      	beq.n	8000e90 <HAL_GPIO_Init+0x48>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d007      	beq.n	8000e90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e84:	2b11      	cmp	r3, #17
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b12      	cmp	r3, #18
 8000e8e:	d130      	bne.n	8000ef2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	68da      	ldr	r2, [r3, #12]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	091b      	lsrs	r3, r3, #4
 8000edc:	f003 0201 	and.w	r2, r3, #1
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	2203      	movs	r2, #3
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	689a      	ldr	r2, [r3, #8]
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0xea>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b12      	cmp	r3, #18
 8000f30:	d123      	bne.n	8000f7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	220f      	movs	r2, #15
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691a      	ldr	r2, [r3, #16]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	08da      	lsrs	r2, r3, #3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3208      	adds	r2, #8
 8000f74:	6939      	ldr	r1, [r7, #16]
 8000f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	2203      	movs	r2, #3
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f003 0203 	and.w	r2, r3, #3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 8094 	beq.w	80010e4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbc:	4b52      	ldr	r3, [pc, #328]	; (8001108 <HAL_GPIO_Init+0x2c0>)
 8000fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc0:	4a51      	ldr	r2, [pc, #324]	; (8001108 <HAL_GPIO_Init+0x2c0>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <HAL_GPIO_Init+0x2c0>)
 8000fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd4:	4a4d      	ldr	r2, [pc, #308]	; (800110c <HAL_GPIO_Init+0x2c4>)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	089b      	lsrs	r3, r3, #2
 8000fda:	3302      	adds	r3, #2
 8000fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	220f      	movs	r2, #15
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ffe:	d00d      	beq.n	800101c <HAL_GPIO_Init+0x1d4>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4a43      	ldr	r2, [pc, #268]	; (8001110 <HAL_GPIO_Init+0x2c8>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d007      	beq.n	8001018 <HAL_GPIO_Init+0x1d0>
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4a42      	ldr	r2, [pc, #264]	; (8001114 <HAL_GPIO_Init+0x2cc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_Init+0x1cc>
 8001010:	2302      	movs	r3, #2
 8001012:	e004      	b.n	800101e <HAL_GPIO_Init+0x1d6>
 8001014:	2307      	movs	r3, #7
 8001016:	e002      	b.n	800101e <HAL_GPIO_Init+0x1d6>
 8001018:	2301      	movs	r3, #1
 800101a:	e000      	b.n	800101e <HAL_GPIO_Init+0x1d6>
 800101c:	2300      	movs	r3, #0
 800101e:	697a      	ldr	r2, [r7, #20]
 8001020:	f002 0203 	and.w	r2, r2, #3
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	4093      	lsls	r3, r2
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800102e:	4937      	ldr	r1, [pc, #220]	; (800110c <HAL_GPIO_Init+0x2c4>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	3302      	adds	r3, #2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001060:	4a2d      	ldr	r2, [pc, #180]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001066:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	4313      	orrs	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800108a:	4a23      	ldr	r2, [pc, #140]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	43db      	mvns	r3, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4013      	ands	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d003      	beq.n	80010b4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010b4:	4a18      	ldr	r2, [pc, #96]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	43db      	mvns	r3, r3
 80010c4:	693a      	ldr	r2, [r7, #16]
 80010c6:	4013      	ands	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4313      	orrs	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_GPIO_Init+0x2d0>)
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	fa22 f303 	lsr.w	r3, r2, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	f47f aeaf 	bne.w	8000e58 <HAL_GPIO_Init+0x10>
  }
}
 80010fa:	bf00      	nop
 80010fc:	bf00      	nop
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	40010400 	.word	0x40010400

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001138:	e002      	b.n	8001140 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e081      	b.n	8001262 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d106      	bne.n	8001178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fa30 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f022 0201 	bic.w	r2, r2, #1
 800118e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800119c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d107      	bne.n	80011c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	e006      	b.n	80011d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689a      	ldr	r2, [r3, #8]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d104      	bne.n	80011e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001208:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	ea42 0103 	orr.w	r1, r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	021a      	lsls	r2, r3, #8
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69d9      	ldr	r1, [r3, #28]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1a      	ldr	r2, [r3, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0201 	orr.w	r2, r2, #1
 8001242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2220      	movs	r2, #32
 800124e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2200      	movs	r2, #0
 8001256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800127a:	b2db      	uxtb	r3, r3
 800127c:	2b20      	cmp	r3, #32
 800127e:	d138      	bne.n	80012f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001286:	2b01      	cmp	r3, #1
 8001288:	d101      	bne.n	800128e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800128a:	2302      	movs	r3, #2
 800128c:	e032      	b.n	80012f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2201      	movs	r2, #1
 8001292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2224      	movs	r2, #36	; 0x24
 800129a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80012bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f042 0201 	orr.w	r2, r2, #1
 80012dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2220      	movs	r2, #32
 80012e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e000      	b.n	80012f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012f2:	2302      	movs	r3, #2
  }
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b20      	cmp	r3, #32
 8001314:	d139      	bne.n	800138a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001320:	2302      	movs	r3, #2
 8001322:	e033      	b.n	800138c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2224      	movs	r2, #36	; 0x24
 8001330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001352:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 0201 	orr.w	r2, r2, #1
 8001374:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2220      	movs	r2, #32
 800137a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001386:	2300      	movs	r3, #0
 8001388:	e000      	b.n	800138c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800138a:	2302      	movs	r3, #2
  }
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80013a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	40007000 	.word	0x40007000

080013b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	40007000 	.word	0x40007000

080013d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013e2:	d130      	bne.n	8001446 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f0:	d038      	beq.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f2:	4b20      	ldr	r3, [pc, #128]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013fa:	4a1e      	ldr	r2, [pc, #120]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001400:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2232      	movs	r2, #50	; 0x32
 8001408:	fb02 f303 	mul.w	r3, r2, r3
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	0c9b      	lsrs	r3, r3, #18
 8001414:	3301      	adds	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001418:	e002      	b.n	8001420 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	3b01      	subs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001422:	695b      	ldr	r3, [r3, #20]
 8001424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142c:	d102      	bne.n	8001434 <HAL_PWREx_ControlVoltageScaling+0x60>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f2      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001434:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800143c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001440:	d110      	bne.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e00f      	b.n	8001466 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800144e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001452:	d007      	beq.n	8001464 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800145c:	4a05      	ldr	r2, [pc, #20]	; (8001474 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800145e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001462:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40007000 	.word	0x40007000
 8001478:	20000000 	.word	0x20000000
 800147c:	431bde83 	.word	0x431bde83

08001480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	f000 bc11 	b.w	8001cb6 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001494:	4ba0      	ldr	r3, [pc, #640]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 030c 	and.w	r3, r3, #12
 800149c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800149e:	4b9e      	ldr	r3, [pc, #632]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0310 	and.w	r3, r3, #16
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	f000 80e4 	beq.w	800167e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d007      	beq.n	80014cc <HAL_RCC_OscConfig+0x4c>
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b0c      	cmp	r3, #12
 80014c0:	f040 808b 	bne.w	80015da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	f040 8087 	bne.w	80015da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014cc:	4b92      	ldr	r3, [pc, #584]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_OscConfig+0x64>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e3e8      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1a      	ldr	r2, [r3, #32]
 80014e8:	4b8b      	ldr	r3, [pc, #556]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0308 	and.w	r3, r3, #8
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <HAL_RCC_OscConfig+0x7e>
 80014f4:	4b88      	ldr	r3, [pc, #544]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014fc:	e005      	b.n	800150a <HAL_RCC_OscConfig+0x8a>
 80014fe:	4b86      	ldr	r3, [pc, #536]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001504:	091b      	lsrs	r3, r3, #4
 8001506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800150a:	4293      	cmp	r3, r2
 800150c:	d223      	bcs.n	8001556 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	4618      	mov	r0, r3
 8001514:	f000 fd7a 	bl	800200c <RCC_SetFlashLatencyFromMSIRange>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e3c9      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001522:	4b7d      	ldr	r3, [pc, #500]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a7c      	ldr	r2, [pc, #496]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001528:	f043 0308 	orr.w	r3, r3, #8
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	4977      	ldr	r1, [pc, #476]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001540:	4b75      	ldr	r3, [pc, #468]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	4972      	ldr	r1, [pc, #456]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]
 8001554:	e025      	b.n	80015a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001556:	4b70      	ldr	r3, [pc, #448]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a6f      	ldr	r2, [pc, #444]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	4b6d      	ldr	r3, [pc, #436]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	496a      	ldr	r1, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001570:	4313      	orrs	r3, r2
 8001572:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	4965      	ldr	r1, [pc, #404]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001584:	4313      	orrs	r3, r2
 8001586:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d109      	bne.n	80015a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 fd3a 	bl	800200c <RCC_SetFlashLatencyFromMSIRange>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e389      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015a2:	f000 fc6f 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b5b      	ldr	r3, [pc, #364]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	495a      	ldr	r1, [pc, #360]	; (800171c <HAL_RCC_OscConfig+0x29c>)
 80015b4:	5ccb      	ldrb	r3, [r1, r3]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	fa22 f303 	lsr.w	r3, r2, r3
 80015be:	4a58      	ldr	r2, [pc, #352]	; (8001720 <HAL_RCC_OscConfig+0x2a0>)
 80015c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015c2:	4b58      	ldr	r3, [pc, #352]	; (8001724 <HAL_RCC_OscConfig+0x2a4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fafc 	bl	8000bc4 <HAL_InitTick>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d052      	beq.n	800167c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	e36d      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d032      	beq.n	8001648 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015e2:	4b4d      	ldr	r3, [pc, #308]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a4c      	ldr	r2, [pc, #304]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb39 	bl	8000c64 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb35 	bl	8000c64 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e356      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 800161a:	f043 0308 	orr.w	r3, r3, #8
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	493a      	ldr	r1, [pc, #232]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 800162e:	4313      	orrs	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	4935      	ldr	r1, [pc, #212]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001642:	4313      	orrs	r3, r2
 8001644:	604b      	str	r3, [r1, #4]
 8001646:	e01a      	b.n	800167e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001648:	4b33      	ldr	r3, [pc, #204]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a32      	ldr	r2, [pc, #200]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001654:	f7ff fb06 	bl	8000c64 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800165c:	f7ff fb02 	bl	8000c64 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e323      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800166e:	4b2a      	ldr	r3, [pc, #168]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x1dc>
 800167a:	e000      	b.n	800167e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800167c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d073      	beq.n	8001772 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	2b08      	cmp	r3, #8
 800168e:	d005      	beq.n	800169c <HAL_RCC_OscConfig+0x21c>
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2b0c      	cmp	r3, #12
 8001694:	d10e      	bne.n	80016b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d10b      	bne.n	80016b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169c:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d063      	beq.n	8001770 <HAL_RCC_OscConfig+0x2f0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d15f      	bne.n	8001770 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e300      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016bc:	d106      	bne.n	80016cc <HAL_RCC_OscConfig+0x24c>
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a15      	ldr	r2, [pc, #84]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e01d      	b.n	8001708 <HAL_RCC_OscConfig+0x288>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x270>
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e00b      	b.n	8001708 <HAL_RCC_OscConfig+0x288>
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a08      	ldr	r2, [pc, #32]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a05      	ldr	r2, [pc, #20]	; (8001718 <HAL_RCC_OscConfig+0x298>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff faa8 	bl	8000c64 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001716:	e010      	b.n	800173a <HAL_RCC_OscConfig+0x2ba>
 8001718:	40021000 	.word	0x40021000
 800171c:	08006528 	.word	0x08006528
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff fa9c 	bl	8000c64 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e2bd      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800173a:	4baf      	ldr	r3, [pc, #700]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x2a8>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff fa8c 	bl	8000c64 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fa88 	bl	8000c64 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e2a9      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001762:	4ba5      	ldr	r3, [pc, #660]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x2d0>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d060      	beq.n	8001840 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b04      	cmp	r3, #4
 8001782:	d005      	beq.n	8001790 <HAL_RCC_OscConfig+0x310>
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b0c      	cmp	r3, #12
 8001788:	d119      	bne.n	80017be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d116      	bne.n	80017be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001790:	4b99      	ldr	r3, [pc, #612]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_OscConfig+0x328>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e286      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a8:	4b93      	ldr	r3, [pc, #588]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	4990      	ldr	r1, [pc, #576]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017bc:	e040      	b.n	8001840 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d023      	beq.n	800180e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c6:	4b8c      	ldr	r3, [pc, #560]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a8b      	ldr	r2, [pc, #556]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d2:	f7ff fa47 	bl	8000c64 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017da:	f7ff fa43 	bl	8000c64 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e264      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ec:	4b82      	ldr	r3, [pc, #520]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b7f      	ldr	r3, [pc, #508]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	497c      	ldr	r1, [pc, #496]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
 800180c:	e018      	b.n	8001840 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800180e:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a79      	ldr	r2, [pc, #484]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001818:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7ff fa23 	bl	8000c64 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff fa1f 	bl	8000c64 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e240      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001834:	4b70      	ldr	r3, [pc, #448]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800183c:	2b00      	cmp	r3, #0
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d03c      	beq.n	80018c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01c      	beq.n	800188e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001854:	4b68      	ldr	r3, [pc, #416]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800185a:	4a67      	ldr	r2, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff f9fe 	bl	8000c64 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff f9fa 	bl	8000c64 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e21b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0ef      	beq.n	800186c <HAL_RCC_OscConfig+0x3ec>
 800188c:	e01b      	b.n	80018c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800188e:	4b5a      	ldr	r3, [pc, #360]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001894:	4a58      	ldr	r2, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff f9e1 	bl	8000c64 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff f9dd 	bl	8000c64 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e1fe      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018b8:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80018ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1ef      	bne.n	80018a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80a6 	beq.w	8001a20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80018d8:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10d      	bne.n	8001900 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e4:	4b44      	ldr	r3, [pc, #272]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	4a43      	ldr	r2, [pc, #268]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ee:	6593      	str	r3, [r2, #88]	; 0x58
 80018f0:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80018f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fc:	2301      	movs	r3, #1
 80018fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001900:	4b3e      	ldr	r3, [pc, #248]	; (80019fc <HAL_RCC_OscConfig+0x57c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001908:	2b00      	cmp	r3, #0
 800190a:	d118      	bne.n	800193e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800190c:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_RCC_OscConfig+0x57c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3a      	ldr	r2, [pc, #232]	; (80019fc <HAL_RCC_OscConfig+0x57c>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001918:	f7ff f9a4 	bl	8000c64 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001920:	f7ff f9a0 	bl	8000c64 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e1c1      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001932:	4b32      	ldr	r3, [pc, #200]	; (80019fc <HAL_RCC_OscConfig+0x57c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d108      	bne.n	8001958 <HAL_RCC_OscConfig+0x4d8>
 8001946:	4b2c      	ldr	r3, [pc, #176]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194c:	4a2a      	ldr	r2, [pc, #168]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001956:	e024      	b.n	80019a2 <HAL_RCC_OscConfig+0x522>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d110      	bne.n	8001982 <HAL_RCC_OscConfig+0x502>
 8001960:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001966:	4a24      	ldr	r2, [pc, #144]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001970:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001976:	4a20      	ldr	r2, [pc, #128]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001980:	e00f      	b.n	80019a2 <HAL_RCC_OscConfig+0x522>
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 8001994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001998:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 800199a:	f023 0304 	bic.w	r3, r3, #4
 800199e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d016      	beq.n	80019d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff f95b 	bl	8000c64 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f957 	bl	8000c64 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e176      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x578>)
 80019ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ed      	beq.n	80019b2 <HAL_RCC_OscConfig+0x532>
 80019d6:	e01a      	b.n	8001a0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff f944 	bl	8000c64 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019de:	e00f      	b.n	8001a00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff f940 	bl	8000c64 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d906      	bls.n	8001a00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e15f      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
 80019f6:	bf00      	nop
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a00:	4baa      	ldr	r3, [pc, #680]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1e8      	bne.n	80019e0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a0e:	7ffb      	ldrb	r3, [r7, #31]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d105      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a14:	4ba5      	ldr	r3, [pc, #660]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a18:	4aa4      	ldr	r2, [pc, #656]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0320 	and.w	r3, r3, #32
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d03c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01c      	beq.n	8001a6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a34:	4b9d      	ldr	r3, [pc, #628]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a3a:	4a9c      	ldr	r2, [pc, #624]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a44:	f7ff f90e 	bl	8000c64 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a4c:	f7ff f90a 	bl	8000c64 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e12b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a5e:	4b93      	ldr	r3, [pc, #588]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ef      	beq.n	8001a4c <HAL_RCC_OscConfig+0x5cc>
 8001a6c:	e01b      	b.n	8001aa6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a6e:	4b8f      	ldr	r3, [pc, #572]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a74:	4a8d      	ldr	r2, [pc, #564]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f8f1 	bl	8000c64 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a86:	f7ff f8ed 	bl	8000c64 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e10e      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a98:	4b84      	ldr	r3, [pc, #528]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1ef      	bne.n	8001a86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8102 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	f040 80c5 	bne.w	8001c44 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aba:	4b7c      	ldr	r3, [pc, #496]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f003 0203 	and.w	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d12c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d123      	bne.n	8001b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d11b      	bne.n	8001b28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001afa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d113      	bne.n	8001b28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0a:	085b      	lsrs	r3, r3, #1
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d109      	bne.n	8001b28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1e:	085b      	lsrs	r3, r3, #1
 8001b20:	3b01      	subs	r3, #1
 8001b22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d067      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b0c      	cmp	r3, #12
 8001b2c:	d062      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e0bb      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b3e:	4b5b      	ldr	r3, [pc, #364]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a5a      	ldr	r2, [pc, #360]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b4a:	f7ff f88b 	bl	8000c64 <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b52:	f7ff f887 	bl	8000c64 <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e0a8      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b64:	4b51      	ldr	r3, [pc, #324]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f0      	bne.n	8001b52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b70:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001b72:	68da      	ldr	r2, [r3, #12]
 8001b74:	4b4e      	ldr	r3, [pc, #312]	; (8001cb0 <HAL_RCC_OscConfig+0x830>)
 8001b76:	4013      	ands	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b80:	3a01      	subs	r2, #1
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	4311      	orrs	r1, r2
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b8a:	0212      	lsls	r2, r2, #8
 8001b8c:	4311      	orrs	r1, r2
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b92:	0852      	lsrs	r2, r2, #1
 8001b94:	3a01      	subs	r2, #1
 8001b96:	0552      	lsls	r2, r2, #21
 8001b98:	4311      	orrs	r1, r2
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b9e:	0852      	lsrs	r2, r2, #1
 8001ba0:	3a01      	subs	r2, #1
 8001ba2:	0652      	lsls	r2, r2, #25
 8001ba4:	4311      	orrs	r1, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001baa:	06d2      	lsls	r2, r2, #27
 8001bac:	430a      	orrs	r2, r1
 8001bae:	493f      	ldr	r1, [pc, #252]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b3d      	ldr	r3, [pc, #244]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a3c      	ldr	r2, [pc, #240]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc0:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a39      	ldr	r2, [pc, #228]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bcc:	f7ff f84a 	bl	8000c64 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff f846 	bl	8000c64 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e067      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf2:	e05f      	b.n	8001cb4 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e05e      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf8:	4b2c      	ldr	r3, [pc, #176]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d157      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c04:	4b29      	ldr	r3, [pc, #164]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a28      	ldr	r2, [pc, #160]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4a25      	ldr	r2, [pc, #148]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c1c:	f7ff f822 	bl	8000c64 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f81e 	bl	8000c64 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e03f      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x7a4>
 8001c42:	e037      	b.n	8001cb4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d02d      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c54:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4a11      	ldr	r2, [pc, #68]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c68:	f023 0303 	bic.w	r3, r3, #3
 8001c6c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7fe fff1 	bl	8000c64 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7fe ffed 	bl	8000c64 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e00e      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_RCC_OscConfig+0x82c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x806>
 8001ca4:	e006      	b.n	8001cb4 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e005      	b.n	8001cb6 <HAL_RCC_OscConfig+0x836>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop

08001cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0c8      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d910      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b63      	ldr	r3, [pc, #396]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	4961      	ldr	r1, [pc, #388]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b0      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d04c      	beq.n	8001daa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b56      	ldr	r3, [pc, #344]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d121      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e09e      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d30:	4b50      	ldr	r3, [pc, #320]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d115      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e092      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d107      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d48:	4b4a      	ldr	r3, [pc, #296]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0302 	and.w	r3, r3, #2
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e086      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e07e      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d68:	4b42      	ldr	r3, [pc, #264]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 0203 	bic.w	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	493f      	ldr	r1, [pc, #252]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d7a:	f7fe ff73 	bl	8000c64 <HAL_GetTick>
 8001d7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d82:	f7fe ff6f 	bl	8000c64 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e066      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d98:	4b36      	ldr	r3, [pc, #216]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 020c 	and.w	r2, r3, #12
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d1eb      	bne.n	8001d82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d008      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db6:	4b2f      	ldr	r3, [pc, #188]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	492c      	ldr	r1, [pc, #176]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d210      	bcs.n	8001df8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f023 0207 	bic.w	r2, r3, #7
 8001dde:	4924      	ldr	r1, [pc, #144]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b22      	ldr	r3, [pc, #136]	; (8001e70 <HAL_RCC_ClockConfig+0x1b0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e036      	b.n	8001e66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0304 	and.w	r3, r3, #4
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d008      	beq.n	8001e16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e04:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	4918      	ldr	r1, [pc, #96]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0308 	and.w	r3, r3, #8
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d009      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e22:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4910      	ldr	r1, [pc, #64]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e36:	f000 f825 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	490c      	ldr	r1, [pc, #48]	; (8001e78 <HAL_RCC_ClockConfig+0x1b8>)
 8001e48:	5ccb      	ldrb	r3, [r1, r3]
 8001e4a:	f003 031f 	and.w	r3, r3, #31
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e52:	4a0a      	ldr	r2, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <HAL_RCC_ClockConfig+0x1c0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe feb2 	bl	8000bc4 <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e64:	7afb      	ldrb	r3, [r7, #11]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40022000 	.word	0x40022000
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08006528 	.word	0x08006528
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	; 0x24
 8001e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e9c:	4b3b      	ldr	r3, [pc, #236]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d121      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d11e      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb8:	4b34      	ldr	r3, [pc, #208]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d107      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ec4:	4b31      	ldr	r3, [pc, #196]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eca:	0a1b      	lsrs	r3, r3, #8
 8001ecc:	f003 030f 	and.w	r3, r3, #15
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10d      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b04      	cmp	r3, #4
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001efc:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001efe:	61bb      	str	r3, [r7, #24]
 8001f00:	e004      	b.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f08:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	d134      	bne.n	8001f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f12:	4b1e      	ldr	r3, [pc, #120]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d003      	beq.n	8001f30 <HAL_RCC_GetSysClockFreq+0xac>
 8001f28:	e005      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	e005      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f30:	4b19      	ldr	r3, [pc, #100]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f32:	617b      	str	r3, [r7, #20]
      break;
 8001f34:	e002      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	617b      	str	r3, [r7, #20]
      break;
 8001f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f3c:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	091b      	lsrs	r3, r3, #4
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	3301      	adds	r3, #1
 8001f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	0a1b      	lsrs	r3, r3, #8
 8001f50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	fb02 f203 	mul.w	r2, r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	0e5b      	lsrs	r3, r3, #25
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3724      	adds	r7, #36	; 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	08006540 	.word	0x08006540
 8001f94:	00f42400 	.word	0x00f42400
 8001f98:	007a1200 	.word	0x007a1200

08001f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	20000000 	.word	0x20000000

08001fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb8:	f7ff fff0 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	4904      	ldr	r1, [pc, #16]	; (8001fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fca:	5ccb      	ldrb	r3, [r1, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	08006538 	.word	0x08006538

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fe4:	f7ff ffda 	bl	8001f9c <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0adb      	lsrs	r3, r3, #11
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4904      	ldr	r1, [pc, #16]	; (8002008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40021000 	.word	0x40021000
 8002008:	08006538 	.word	0x08006538

0800200c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002014:	2300      	movs	r3, #0
 8002016:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002024:	f7ff f9c8 	bl	80013b8 <HAL_PWREx_GetVoltageRange>
 8002028:	6178      	str	r0, [r7, #20]
 800202a:	e014      	b.n	8002056 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a24      	ldr	r2, [pc, #144]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002044:	f7ff f9b8 	bl	80013b8 <HAL_PWREx_GetVoltageRange>
 8002048:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800204c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204e:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002054:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800205c:	d10b      	bne.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b80      	cmp	r3, #128	; 0x80
 8002062:	d919      	bls.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2ba0      	cmp	r3, #160	; 0xa0
 8002068:	d902      	bls.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800206a:	2302      	movs	r3, #2
 800206c:	613b      	str	r3, [r7, #16]
 800206e:	e013      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002070:	2301      	movs	r3, #1
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e010      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	d902      	bls.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800207c:	2303      	movs	r3, #3
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e00a      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b80      	cmp	r3, #128	; 0x80
 8002086:	d102      	bne.n	800208e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002088:	2302      	movs	r3, #2
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	e004      	b.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2b70      	cmp	r3, #112	; 0x70
 8002092:	d101      	bne.n	8002098 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002094:	2301      	movs	r3, #1
 8002096:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f023 0207 	bic.w	r2, r3, #7
 80020a0:	4909      	ldr	r1, [pc, #36]	; (80020c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020a8:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d001      	beq.n	80020ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020d4:	2300      	movs	r3, #0
 80020d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020d8:	2300      	movs	r3, #0
 80020da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d031      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020f0:	d01a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80020f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020f6:	d814      	bhi.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d009      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002100:	d10f      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002102:	4bac      	ldr	r3, [pc, #688]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4aab      	ldr	r2, [pc, #684]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800210e:	e00c      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3304      	adds	r3, #4
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f000 f9dc 	bl	80024d4 <RCCEx_PLLSAI1_Config>
 800211c:	4603      	mov	r3, r0
 800211e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002120:	e003      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	74fb      	strb	r3, [r7, #19]
      break;
 8002126:	e000      	b.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800212a:	7cfb      	ldrb	r3, [r7, #19]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10b      	bne.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002130:	4ba0      	ldr	r3, [pc, #640]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002136:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800213e:	499d      	ldr	r1, [pc, #628]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002146:	e001      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 8099 	beq.w	800228c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800215a:	2300      	movs	r3, #0
 800215c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800215e:	4b95      	ldr	r3, [pc, #596]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00d      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002178:	4a8e      	ldr	r2, [pc, #568]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800217a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217e:	6593      	str	r3, [r2, #88]	; 0x58
 8002180:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800218c:	2301      	movs	r3, #1
 800218e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002190:	4b89      	ldr	r3, [pc, #548]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a88      	ldr	r2, [pc, #544]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800219a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800219c:	f7fe fd62 	bl	8000c64 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021a2:	e009      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a4:	f7fe fd5e 	bl	8000c64 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d902      	bls.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	74fb      	strb	r3, [r7, #19]
        break;
 80021b6:	e005      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b8:	4b7f      	ldr	r3, [pc, #508]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ef      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80021c4:	7cfb      	ldrb	r3, [r7, #19]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d155      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ca:	4b7a      	ldr	r3, [pc, #488]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d01e      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d019      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021e6:	4b73      	ldr	r3, [pc, #460]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021f0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021f2:	4b70      	ldr	r3, [pc, #448]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f8:	4a6e      	ldr	r2, [pc, #440]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80021fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002202:	4b6c      	ldr	r3, [pc, #432]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002208:	4a6a      	ldr	r2, [pc, #424]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800220a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002212:	4a68      	ldr	r2, [pc, #416]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d016      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fd1e 	bl	8000c64 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222a:	e00b      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7fe fd1a 	bl	8000c64 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d902      	bls.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	74fb      	strb	r3, [r7, #19]
            break;
 8002242:	e006      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002244:	4b5b      	ldr	r3, [pc, #364]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ec      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002252:	7cfb      	ldrb	r3, [r7, #19]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10b      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002258:	4b56      	ldr	r3, [pc, #344]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002266:	4953      	ldr	r1, [pc, #332]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800226e:	e004      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	74bb      	strb	r3, [r7, #18]
 8002274:	e001      	b.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800227a:	7c7b      	ldrb	r3, [r7, #17]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d105      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	4b4c      	ldr	r3, [pc, #304]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002284:	4a4b      	ldr	r2, [pc, #300]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002298:	4b46      	ldr	r3, [pc, #280]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f023 0203 	bic.w	r2, r3, #3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4943      	ldr	r1, [pc, #268]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ba:	4b3e      	ldr	r3, [pc, #248]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c0:	f023 020c 	bic.w	r2, r3, #12
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	493a      	ldr	r1, [pc, #232]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0320 	and.w	r3, r3, #32
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022dc:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	4932      	ldr	r1, [pc, #200]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00a      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022fe:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002304:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230c:	4929      	ldr	r1, [pc, #164]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d00a      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002326:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4921      	ldr	r1, [pc, #132]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00a      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002348:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	4918      	ldr	r1, [pc, #96]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002352:	4313      	orrs	r3, r2
 8002354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00a      	beq.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4910      	ldr	r1, [pc, #64]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d02c      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	4907      	ldr	r1, [pc, #28]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a4:	d10a      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a6:	4b03      	ldr	r3, [pc, #12]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	4a02      	ldr	r2, [pc, #8]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80023ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b0:	60d3      	str	r3, [r2, #12]
 80023b2:	e015      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f881 	bl	80024d4 <RCCEx_PLLSAI1_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d028      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023ec:	4b30      	ldr	r3, [pc, #192]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	492d      	ldr	r1, [pc, #180]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800240a:	d106      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800240c:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002416:	60d3      	str	r3, [r2, #12]
 8002418:	e011      	b.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002422:	d10c      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3304      	adds	r3, #4
 8002428:	2101      	movs	r1, #1
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f852 	bl	80024d4 <RCCEx_PLLSAI1_Config>
 8002430:	4603      	mov	r3, r0
 8002432:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 800243a:	7cfb      	ldrb	r3, [r7, #19]
 800243c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01c      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002458:	4915      	ldr	r1, [pc, #84]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002468:	d10c      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3304      	adds	r3, #4
 800246e:	2102      	movs	r1, #2
 8002470:	4618      	mov	r0, r3
 8002472:	f000 f82f 	bl	80024d4 <RCCEx_PLLSAI1_Config>
 8002476:	4603      	mov	r3, r0
 8002478:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800247a:	7cfb      	ldrb	r3, [r7, #19]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002480:	7cfb      	ldrb	r3, [r7, #19]
 8002482:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00a      	beq.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002490:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800249e:	4904      	ldr	r1, [pc, #16]	; (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80024be:	f043 0304 	orr.w	r3, r3, #4
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40021000 	.word	0x40021000

080024d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024e2:	4b74      	ldr	r3, [pc, #464]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d018      	beq.n	8002520 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ee:	4b71      	ldr	r3, [pc, #452]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f003 0203 	and.w	r2, r3, #3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d10d      	bne.n	800251a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
       ||
 8002502:	2b00      	cmp	r3, #0
 8002504:	d009      	beq.n	800251a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002506:	4b6b      	ldr	r3, [pc, #428]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	1c5a      	adds	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
       ||
 8002516:	429a      	cmp	r2, r3
 8002518:	d047      	beq.n	80025aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e044      	b.n	80025aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d018      	beq.n	800255a <RCCEx_PLLSAI1_Config+0x86>
 8002528:	2b03      	cmp	r3, #3
 800252a:	d825      	bhi.n	8002578 <RCCEx_PLLSAI1_Config+0xa4>
 800252c:	2b01      	cmp	r3, #1
 800252e:	d002      	beq.n	8002536 <RCCEx_PLLSAI1_Config+0x62>
 8002530:	2b02      	cmp	r3, #2
 8002532:	d009      	beq.n	8002548 <RCCEx_PLLSAI1_Config+0x74>
 8002534:	e020      	b.n	8002578 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d11d      	bne.n	800257e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002546:	e01a      	b.n	800257e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002548:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	2b00      	cmp	r3, #0
 8002552:	d116      	bne.n	8002582 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e013      	b.n	8002582 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10f      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002566:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002576:	e006      	b.n	8002586 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	73fb      	strb	r3, [r7, #15]
      break;
 800257c:	e004      	b.n	8002588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800257e:	bf00      	nop
 8002580:	e002      	b.n	8002588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002582:	bf00      	nop
 8002584:	e000      	b.n	8002588 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002586:	bf00      	nop
    }

    if(status == HAL_OK)
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10d      	bne.n	80025aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800258e:	4b49      	ldr	r3, [pc, #292]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6819      	ldr	r1, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	3b01      	subs	r3, #1
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	430b      	orrs	r3, r1
 80025a4:	4943      	ldr	r1, [pc, #268]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d17c      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80025b0:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a3f      	ldr	r2, [pc, #252]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025bc:	f7fe fb52 	bl	8000c64 <HAL_GetTick>
 80025c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025c2:	e009      	b.n	80025d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025c4:	f7fe fb4e 	bl	8000c64 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d902      	bls.n	80025d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	73fb      	strb	r3, [r7, #15]
        break;
 80025d6:	e005      	b.n	80025e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025d8:	4b36      	ldr	r3, [pc, #216]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1ef      	bne.n	80025c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d15f      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d110      	bne.n	8002612 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025f0:	4b30      	ldr	r3, [pc, #192]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80025f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	6892      	ldr	r2, [r2, #8]
 8002600:	0211      	lsls	r1, r2, #8
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68d2      	ldr	r2, [r2, #12]
 8002606:	06d2      	lsls	r2, r2, #27
 8002608:	430a      	orrs	r2, r1
 800260a:	492a      	ldr	r1, [pc, #168]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260c:	4313      	orrs	r3, r2
 800260e:	610b      	str	r3, [r1, #16]
 8002610:	e027      	b.n	8002662 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d112      	bne.n	800263e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002618:	4b26      	ldr	r3, [pc, #152]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002620:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6892      	ldr	r2, [r2, #8]
 8002628:	0211      	lsls	r1, r2, #8
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	6912      	ldr	r2, [r2, #16]
 800262e:	0852      	lsrs	r2, r2, #1
 8002630:	3a01      	subs	r2, #1
 8002632:	0552      	lsls	r2, r2, #21
 8002634:	430a      	orrs	r2, r1
 8002636:	491f      	ldr	r1, [pc, #124]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002638:	4313      	orrs	r3, r2
 800263a:	610b      	str	r3, [r1, #16]
 800263c:	e011      	b.n	8002662 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800263e:	4b1d      	ldr	r3, [pc, #116]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002646:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	6892      	ldr	r2, [r2, #8]
 800264e:	0211      	lsls	r1, r2, #8
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6952      	ldr	r2, [r2, #20]
 8002654:	0852      	lsrs	r2, r2, #1
 8002656:	3a01      	subs	r2, #1
 8002658:	0652      	lsls	r2, r2, #25
 800265a:	430a      	orrs	r2, r1
 800265c:	4915      	ldr	r1, [pc, #84]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265e:	4313      	orrs	r3, r2
 8002660:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a13      	ldr	r2, [pc, #76]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002668:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800266c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266e:	f7fe faf9 	bl	8000c64 <HAL_GetTick>
 8002672:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002674:	e009      	b.n	800268a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002676:	f7fe faf5 	bl	8000c64 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d902      	bls.n	800268a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	73fb      	strb	r3, [r7, #15]
          break;
 8002688:	e005      	b.n	8002696 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0ef      	beq.n	8002676 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	4903      	ldr	r1, [pc, #12]	; (80026b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80026aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3710      	adds	r7, #16
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e095      	b.n	80027f6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d108      	bne.n	80026e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80026da:	d009      	beq.n	80026f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	61da      	str	r2, [r3, #28]
 80026e2:	e005      	b.n	80026f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe f8d2 	bl	80008b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2202      	movs	r2, #2
 8002714:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002730:	d902      	bls.n	8002738 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e002      	b.n	800273e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002746:	d007      	beq.n	8002758 <HAL_SPI_Init+0xa0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002750:	d002      	beq.n	8002758 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	ea42 0103 	orr.w	r1, r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	0c1b      	lsrs	r3, r3, #16
 80027b4:	f003 0204 	and.w	r2, r3, #4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	f003 0310 	and.w	r3, r3, #16
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80027d4:	ea42 0103 	orr.w	r1, r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b08a      	sub	sp, #40	; 0x28
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800280c:	2301      	movs	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800281c:	2b01      	cmp	r3, #1
 800281e:	d101      	bne.n	8002824 <HAL_SPI_TransmitReceive+0x26>
 8002820:	2302      	movs	r3, #2
 8002822:	e1fb      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x41e>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800282c:	f7fe fa1a 	bl	8000c64 <HAL_GetTick>
 8002830:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002838:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002840:	887b      	ldrh	r3, [r7, #2]
 8002842:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002844:	887b      	ldrh	r3, [r7, #2]
 8002846:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002848:	7efb      	ldrb	r3, [r7, #27]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d00e      	beq.n	800286c <HAL_SPI_TransmitReceive+0x6e>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002854:	d106      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x66>
 800285e:	7efb      	ldrb	r3, [r7, #27]
 8002860:	2b04      	cmp	r3, #4
 8002862:	d003      	beq.n	800286c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002864:	2302      	movs	r3, #2
 8002866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800286a:	e1cd      	b.n	8002c08 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d005      	beq.n	800287e <HAL_SPI_TransmitReceive+0x80>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_SPI_TransmitReceive+0x80>
 8002878:	887b      	ldrh	r3, [r7, #2]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002884:	e1c0      	b.n	8002c08 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b04      	cmp	r3, #4
 8002890:	d003      	beq.n	800289a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2205      	movs	r2, #5
 8002896:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	887a      	ldrh	r2, [r7, #2]
 80028aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	887a      	ldrh	r2, [r7, #2]
 80028b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	887a      	ldrh	r2, [r7, #2]
 80028c6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028dc:	d802      	bhi.n	80028e4 <HAL_SPI_TransmitReceive+0xe6>
 80028de:	8a3b      	ldrh	r3, [r7, #16]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d908      	bls.n	80028f6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	e007      	b.n	8002906 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002904:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002910:	2b40      	cmp	r3, #64	; 0x40
 8002912:	d007      	beq.n	8002924 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800292c:	d97c      	bls.n	8002a28 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d002      	beq.n	800293c <HAL_SPI_TransmitReceive+0x13e>
 8002936:	8a7b      	ldrh	r3, [r7, #18]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d169      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002940:	881a      	ldrh	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	1c9a      	adds	r2, r3, #2
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002960:	e056      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b02      	cmp	r3, #2
 800296e:	d11b      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x1aa>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_SPI_TransmitReceive+0x1aa>
 800297a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297c:	2b01      	cmp	r3, #1
 800297e:	d113      	bne.n	80029a8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002984:	881a      	ldrh	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002990:	1c9a      	adds	r2, r3, #2
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d11c      	bne.n	80029f0 <HAL_SPI_TransmitReceive+0x1f2>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	b292      	uxth	r2, r2
 80029ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	1c9a      	adds	r2, r3, #2
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	3b01      	subs	r3, #1
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029ec:	2301      	movs	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029f0:	f7fe f938 	bl	8000c64 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d807      	bhi.n	8002a10 <HAL_SPI_TransmitReceive+0x212>
 8002a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a06:	d003      	beq.n	8002a10 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002a0e:	e0fb      	b.n	8002c08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1a3      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x164>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d19d      	bne.n	8002962 <HAL_SPI_TransmitReceive+0x164>
 8002a26:	e0df      	b.n	8002be8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_SPI_TransmitReceive+0x23a>
 8002a30:	8a7b      	ldrh	r3, [r7, #18]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	f040 80cb 	bne.w	8002bce <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d912      	bls.n	8002a68 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b02      	subs	r3, #2
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a66:	e0b2      	b.n	8002bce <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a8e:	e09e      	b.n	8002bce <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d134      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0x30a>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02f      	beq.n	8002b08 <HAL_SPI_TransmitReceive+0x30a>
 8002aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d12c      	bne.n	8002b08 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d912      	bls.n	8002ade <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	881a      	ldrh	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	1c9a      	adds	r2, r3, #2
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b02      	subs	r3, #2
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002adc:	e012      	b.n	8002b04 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
 8002ae8:	7812      	ldrb	r2, [r2, #0]
 8002aea:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d148      	bne.n	8002ba8 <HAL_SPI_TransmitReceive+0x3aa>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d042      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d923      	bls.n	8002b76 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68da      	ldr	r2, [r3, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b38:	b292      	uxth	r2, r2
 8002b3a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	1c9a      	adds	r2, r3, #2
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	3b02      	subs	r3, #2
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d81f      	bhi.n	8002ba4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b72:	605a      	str	r2, [r3, #4]
 8002b74:	e016      	b.n	8002ba4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f103 020c 	add.w	r2, r3, #12
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	7812      	ldrb	r2, [r2, #0]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ba8:	f7fe f85c 	bl	8000c64 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d803      	bhi.n	8002bc0 <HAL_SPI_TransmitReceive+0x3c2>
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bbe:	d102      	bne.n	8002bc6 <HAL_SPI_TransmitReceive+0x3c8>
 8002bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002bcc:	e01c      	b.n	8002c08 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f47f af5b 	bne.w	8002a90 <HAL_SPI_TransmitReceive+0x292>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f47f af54 	bne.w	8002a90 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f933 	bl	8002e58 <SPI_EndRxTxTransaction>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d006      	beq.n	8002c06 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2220      	movs	r2, #32
 8002c02:	661a      	str	r2, [r3, #96]	; 0x60
 8002c04:	e000      	b.n	8002c08 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002c06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3728      	adds	r7, #40	; 0x28
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	603b      	str	r3, [r7, #0]
 8002c30:	4613      	mov	r3, r2
 8002c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c34:	f7fe f816 	bl	8000c64 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c44:	f7fe f80e 	bl	8000c64 <HAL_GetTick>
 8002c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c4a:	4b39      	ldr	r3, [pc, #228]	; (8002d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	015b      	lsls	r3, r3, #5
 8002c50:	0d1b      	lsrs	r3, r3, #20
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5a:	e054      	b.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c62:	d050      	beq.n	8002d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c64:	f7fd fffe 	bl	8000c64 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	69fa      	ldr	r2, [r7, #28]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d902      	bls.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d13d      	bne.n	8002cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c92:	d111      	bne.n	8002cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9c:	d004      	beq.n	8002ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d107      	bne.n	8002cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc0:	d10f      	bne.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e017      	b.n	8002d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d101      	bne.n	8002d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	3b01      	subs	r3, #1
 8002d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	bf0c      	ite	eq
 8002d16:	2301      	moveq	r3, #1
 8002d18:	2300      	movne	r3, #0
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d19b      	bne.n	8002c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000000 	.word	0x20000000

08002d34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d42:	f7fd ff8f 	bl	8000c64 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	4413      	add	r3, r2
 8002d50:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d52:	f7fd ff87 	bl	8000c64 <HAL_GetTick>
 8002d56:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d58:	4b3e      	ldr	r3, [pc, #248]	; (8002e54 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00da      	lsls	r2, r3, #3
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	0d1b      	lsrs	r3, r3, #20
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d70:	e062      	b.n	8002e38 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d78:	d109      	bne.n	8002d8e <SPI_WaitFifoStateUntilTimeout+0x5a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d106      	bne.n	8002d8e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	330c      	adds	r3, #12
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8002d8c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d94:	d050      	beq.n	8002e38 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d96:	f7fd ff65 	bl	8000c64 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d902      	bls.n	8002dac <SPI_WaitFifoStateUntilTimeout+0x78>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d13d      	bne.n	8002e28 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dc4:	d111      	bne.n	8002dea <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dce:	d004      	beq.n	8002dda <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd8:	d107      	bne.n	8002dea <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002de8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df2:	d10f      	bne.n	8002e14 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e12:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e010      	b.n	8002e4a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4013      	ands	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d194      	bne.n	8002d72 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000000 	.word	0x20000000

08002e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b086      	sub	sp, #24
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f7ff ff5f 	bl	8002d34 <SPI_WaitFifoStateUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e80:	f043 0220 	orr.w	r2, r3, #32
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e027      	b.n	8002edc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2200      	movs	r2, #0
 8002e94:	2180      	movs	r1, #128	; 0x80
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f7ff fec4 	bl	8002c24 <SPI_WaitFlagStateUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d007      	beq.n	8002eb2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e014      	b.n	8002edc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	9300      	str	r3, [sp, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f7ff ff38 	bl	8002d34 <SPI_WaitFifoStateUntilTimeout>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d007      	beq.n	8002eda <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ece:	f043 0220 	orr.w	r2, r3, #32
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e000      	b.n	8002edc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e040      	b.n	8002f78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fd fdc6 	bl	8000a98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2224      	movs	r2, #36	; 0x24
 8002f10:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f82c 	bl	8002f80 <UART_SetConfig>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e022      	b.n	8002f78 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 fa2c 	bl	8003398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 fab3 	bl	80034dc <UART_CheckIdleState>
 8002f76:	4603      	mov	r3, r0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	b5b0      	push	{r4, r5, r7, lr}
 8002f82:	b088      	sub	sp, #32
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	4baf      	ldr	r3, [pc, #700]	; (8003268 <UART_SetConfig+0x2e8>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	69f9      	ldr	r1, [r7, #28]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4aa4      	ldr	r2, [pc, #656]	; (800326c <UART_SetConfig+0x2ec>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d004      	beq.n	8002fe8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a1b      	ldr	r3, [r3, #32]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	69fa      	ldr	r2, [r7, #28]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a9b      	ldr	r2, [pc, #620]	; (8003270 <UART_SetConfig+0x2f0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d121      	bne.n	800304a <UART_SetConfig+0xca>
 8003006:	4b9b      	ldr	r3, [pc, #620]	; (8003274 <UART_SetConfig+0x2f4>)
 8003008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300c:	f003 0303 	and.w	r3, r3, #3
 8003010:	2b03      	cmp	r3, #3
 8003012:	d817      	bhi.n	8003044 <UART_SetConfig+0xc4>
 8003014:	a201      	add	r2, pc, #4	; (adr r2, 800301c <UART_SetConfig+0x9c>)
 8003016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301a:	bf00      	nop
 800301c:	0800302d 	.word	0x0800302d
 8003020:	08003039 	.word	0x08003039
 8003024:	08003033 	.word	0x08003033
 8003028:	0800303f 	.word	0x0800303f
 800302c:	2301      	movs	r3, #1
 800302e:	76fb      	strb	r3, [r7, #27]
 8003030:	e070      	b.n	8003114 <UART_SetConfig+0x194>
 8003032:	2302      	movs	r3, #2
 8003034:	76fb      	strb	r3, [r7, #27]
 8003036:	e06d      	b.n	8003114 <UART_SetConfig+0x194>
 8003038:	2304      	movs	r3, #4
 800303a:	76fb      	strb	r3, [r7, #27]
 800303c:	e06a      	b.n	8003114 <UART_SetConfig+0x194>
 800303e:	2308      	movs	r3, #8
 8003040:	76fb      	strb	r3, [r7, #27]
 8003042:	e067      	b.n	8003114 <UART_SetConfig+0x194>
 8003044:	2310      	movs	r3, #16
 8003046:	76fb      	strb	r3, [r7, #27]
 8003048:	e064      	b.n	8003114 <UART_SetConfig+0x194>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a8a      	ldr	r2, [pc, #552]	; (8003278 <UART_SetConfig+0x2f8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d132      	bne.n	80030ba <UART_SetConfig+0x13a>
 8003054:	4b87      	ldr	r3, [pc, #540]	; (8003274 <UART_SetConfig+0x2f4>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305a:	f003 030c 	and.w	r3, r3, #12
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d828      	bhi.n	80030b4 <UART_SetConfig+0x134>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <UART_SetConfig+0xe8>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	0800309d 	.word	0x0800309d
 800306c:	080030b5 	.word	0x080030b5
 8003070:	080030b5 	.word	0x080030b5
 8003074:	080030b5 	.word	0x080030b5
 8003078:	080030a9 	.word	0x080030a9
 800307c:	080030b5 	.word	0x080030b5
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080030b5 	.word	0x080030b5
 8003088:	080030a3 	.word	0x080030a3
 800308c:	080030b5 	.word	0x080030b5
 8003090:	080030b5 	.word	0x080030b5
 8003094:	080030b5 	.word	0x080030b5
 8003098:	080030af 	.word	0x080030af
 800309c:	2300      	movs	r3, #0
 800309e:	76fb      	strb	r3, [r7, #27]
 80030a0:	e038      	b.n	8003114 <UART_SetConfig+0x194>
 80030a2:	2302      	movs	r3, #2
 80030a4:	76fb      	strb	r3, [r7, #27]
 80030a6:	e035      	b.n	8003114 <UART_SetConfig+0x194>
 80030a8:	2304      	movs	r3, #4
 80030aa:	76fb      	strb	r3, [r7, #27]
 80030ac:	e032      	b.n	8003114 <UART_SetConfig+0x194>
 80030ae:	2308      	movs	r3, #8
 80030b0:	76fb      	strb	r3, [r7, #27]
 80030b2:	e02f      	b.n	8003114 <UART_SetConfig+0x194>
 80030b4:	2310      	movs	r3, #16
 80030b6:	76fb      	strb	r3, [r7, #27]
 80030b8:	e02c      	b.n	8003114 <UART_SetConfig+0x194>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a6b      	ldr	r2, [pc, #428]	; (800326c <UART_SetConfig+0x2ec>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d125      	bne.n	8003110 <UART_SetConfig+0x190>
 80030c4:	4b6b      	ldr	r3, [pc, #428]	; (8003274 <UART_SetConfig+0x2f4>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030d2:	d017      	beq.n	8003104 <UART_SetConfig+0x184>
 80030d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030d8:	d817      	bhi.n	800310a <UART_SetConfig+0x18a>
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	d00b      	beq.n	80030f8 <UART_SetConfig+0x178>
 80030e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030e4:	d811      	bhi.n	800310a <UART_SetConfig+0x18a>
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <UART_SetConfig+0x172>
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d006      	beq.n	80030fe <UART_SetConfig+0x17e>
 80030f0:	e00b      	b.n	800310a <UART_SetConfig+0x18a>
 80030f2:	2300      	movs	r3, #0
 80030f4:	76fb      	strb	r3, [r7, #27]
 80030f6:	e00d      	b.n	8003114 <UART_SetConfig+0x194>
 80030f8:	2302      	movs	r3, #2
 80030fa:	76fb      	strb	r3, [r7, #27]
 80030fc:	e00a      	b.n	8003114 <UART_SetConfig+0x194>
 80030fe:	2304      	movs	r3, #4
 8003100:	76fb      	strb	r3, [r7, #27]
 8003102:	e007      	b.n	8003114 <UART_SetConfig+0x194>
 8003104:	2308      	movs	r3, #8
 8003106:	76fb      	strb	r3, [r7, #27]
 8003108:	e004      	b.n	8003114 <UART_SetConfig+0x194>
 800310a:	2310      	movs	r3, #16
 800310c:	76fb      	strb	r3, [r7, #27]
 800310e:	e001      	b.n	8003114 <UART_SetConfig+0x194>
 8003110:	2310      	movs	r3, #16
 8003112:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a54      	ldr	r2, [pc, #336]	; (800326c <UART_SetConfig+0x2ec>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d173      	bne.n	8003206 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800311e:	7efb      	ldrb	r3, [r7, #27]
 8003120:	2b08      	cmp	r3, #8
 8003122:	d824      	bhi.n	800316e <UART_SetConfig+0x1ee>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <UART_SetConfig+0x1ac>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003151 	.word	0x08003151
 8003130:	0800316f 	.word	0x0800316f
 8003134:	08003159 	.word	0x08003159
 8003138:	0800316f 	.word	0x0800316f
 800313c:	0800315f 	.word	0x0800315f
 8003140:	0800316f 	.word	0x0800316f
 8003144:	0800316f 	.word	0x0800316f
 8003148:	0800316f 	.word	0x0800316f
 800314c:	08003167 	.word	0x08003167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003150:	f7fe ff30 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8003154:	6178      	str	r0, [r7, #20]
        break;
 8003156:	e00f      	b.n	8003178 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003158:	4b48      	ldr	r3, [pc, #288]	; (800327c <UART_SetConfig+0x2fc>)
 800315a:	617b      	str	r3, [r7, #20]
        break;
 800315c:	e00c      	b.n	8003178 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800315e:	f7fe fe91 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8003162:	6178      	str	r0, [r7, #20]
        break;
 8003164:	e008      	b.n	8003178 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003166:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800316a:	617b      	str	r3, [r7, #20]
        break;
 800316c:	e004      	b.n	8003178 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	76bb      	strb	r3, [r7, #26]
        break;
 8003176:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	f000 80fe 	beq.w	800337c <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	4413      	add	r3, r2
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	d305      	bcc.n	800319c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d902      	bls.n	80031a2 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	76bb      	strb	r3, [r7, #26]
 80031a0:	e0ec      	b.n	800337c <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	020b      	lsls	r3, r1, #8
 80031b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031b8:	0202      	lsls	r2, r0, #8
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	6849      	ldr	r1, [r1, #4]
 80031be:	0849      	lsrs	r1, r1, #1
 80031c0:	4608      	mov	r0, r1
 80031c2:	f04f 0100 	mov.w	r1, #0
 80031c6:	1814      	adds	r4, r2, r0
 80031c8:	eb43 0501 	adc.w	r5, r3, r1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	461a      	mov	r2, r3
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	4620      	mov	r0, r4
 80031d8:	4629      	mov	r1, r5
 80031da:	f7fc fff7 	bl	80001cc <__aeabi_uldivmod>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4613      	mov	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031ec:	d308      	bcc.n	8003200 <UART_SetConfig+0x280>
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f4:	d204      	bcs.n	8003200 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	e0bd      	b.n	800337c <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	76bb      	strb	r3, [r7, #26]
 8003204:	e0ba      	b.n	800337c <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320e:	d168      	bne.n	80032e2 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8003210:	7efb      	ldrb	r3, [r7, #27]
 8003212:	2b08      	cmp	r3, #8
 8003214:	d834      	bhi.n	8003280 <UART_SetConfig+0x300>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <UART_SetConfig+0x29c>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003241 	.word	0x08003241
 8003220:	08003249 	.word	0x08003249
 8003224:	08003251 	.word	0x08003251
 8003228:	08003281 	.word	0x08003281
 800322c:	08003257 	.word	0x08003257
 8003230:	08003281 	.word	0x08003281
 8003234:	08003281 	.word	0x08003281
 8003238:	08003281 	.word	0x08003281
 800323c:	0800325f 	.word	0x0800325f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003240:	f7fe feb8 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8003244:	6178      	str	r0, [r7, #20]
        break;
 8003246:	e020      	b.n	800328a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003248:	f7fe feca 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 800324c:	6178      	str	r0, [r7, #20]
        break;
 800324e:	e01c      	b.n	800328a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <UART_SetConfig+0x2fc>)
 8003252:	617b      	str	r3, [r7, #20]
        break;
 8003254:	e019      	b.n	800328a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7fe fe15 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 800325a:	6178      	str	r0, [r7, #20]
        break;
 800325c:	e015      	b.n	800328a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003262:	617b      	str	r3, [r7, #20]
        break;
 8003264:	e011      	b.n	800328a <UART_SetConfig+0x30a>
 8003266:	bf00      	nop
 8003268:	efff69f3 	.word	0xefff69f3
 800326c:	40008000 	.word	0x40008000
 8003270:	40013800 	.word	0x40013800
 8003274:	40021000 	.word	0x40021000
 8003278:	40004400 	.word	0x40004400
 800327c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	76bb      	strb	r3, [r7, #26]
        break;
 8003288:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d075      	beq.n	800337c <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005a      	lsls	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	441a      	add	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b0f      	cmp	r3, #15
 80032ac:	d916      	bls.n	80032dc <UART_SetConfig+0x35c>
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b4:	d212      	bcs.n	80032dc <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	f023 030f 	bic.w	r3, r3, #15
 80032be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	085b      	lsrs	r3, r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	89fa      	ldrh	r2, [r7, #14]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	e04f      	b.n	800337c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	76bb      	strb	r3, [r7, #26]
 80032e0:	e04c      	b.n	800337c <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032e2:	7efb      	ldrb	r3, [r7, #27]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d828      	bhi.n	800333a <UART_SetConfig+0x3ba>
 80032e8:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <UART_SetConfig+0x370>)
 80032ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ee:	bf00      	nop
 80032f0:	08003315 	.word	0x08003315
 80032f4:	0800331d 	.word	0x0800331d
 80032f8:	08003325 	.word	0x08003325
 80032fc:	0800333b 	.word	0x0800333b
 8003300:	0800332b 	.word	0x0800332b
 8003304:	0800333b 	.word	0x0800333b
 8003308:	0800333b 	.word	0x0800333b
 800330c:	0800333b 	.word	0x0800333b
 8003310:	08003333 	.word	0x08003333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003314:	f7fe fe4e 	bl	8001fb4 <HAL_RCC_GetPCLK1Freq>
 8003318:	6178      	str	r0, [r7, #20]
        break;
 800331a:	e013      	b.n	8003344 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800331c:	f7fe fe60 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 8003320:	6178      	str	r0, [r7, #20]
        break;
 8003322:	e00f      	b.n	8003344 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <UART_SetConfig+0x414>)
 8003326:	617b      	str	r3, [r7, #20]
        break;
 8003328:	e00c      	b.n	8003344 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332a:	f7fe fdab 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 800332e:	6178      	str	r0, [r7, #20]
        break;
 8003330:	e008      	b.n	8003344 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003336:	617b      	str	r3, [r7, #20]
        break;
 8003338:	e004      	b.n	8003344 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	76bb      	strb	r3, [r7, #26]
        break;
 8003342:	bf00      	nop
    }

    if (pclk != 0U)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085a      	lsrs	r2, r3, #1
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	441a      	add	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	fbb2 f3f3 	udiv	r3, r2, r3
 800335c:	b29b      	uxth	r3, r3
 800335e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	d908      	bls.n	8003378 <UART_SetConfig+0x3f8>
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d204      	bcs.n	8003378 <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	e001      	b.n	800337c <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003388:	7ebb      	ldrb	r3, [r7, #26]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bdb0      	pop	{r4, r5, r7, pc}
 8003392:	bf00      	nop
 8003394:	00f42400 	.word	0x00f42400

08003398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00a      	beq.n	80033c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	430a      	orrs	r2, r1
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0310 	and.w	r3, r3, #16
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01a      	beq.n	80034ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003496:	d10a      	bne.n	80034ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	605a      	str	r2, [r3, #4]
  }
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034ec:	f7fd fbba 	bl	8000c64 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0308 	and.w	r3, r3, #8
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d10e      	bne.n	800351e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f82d 	bl	800356e <UART_WaitOnFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e023      	b.n	8003566 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b04      	cmp	r3, #4
 800352a:	d10e      	bne.n	800354a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800352c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f817 	bl	800356e <UART_WaitOnFlagUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e00d      	b.n	8003566 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	4613      	mov	r3, r2
 800357c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357e:	e05e      	b.n	800363e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003580:	69bb      	ldr	r3, [r7, #24]
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003586:	d05a      	beq.n	800363e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003588:	f7fd fb6c 	bl	8000c64 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	429a      	cmp	r2, r3
 8003596:	d302      	bcc.n	800359e <UART_WaitOnFlagUntilTimeout+0x30>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d11b      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035ac:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e043      	b.n	800365e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d02c      	beq.n	800363e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f2:	d124      	bne.n	800363e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035fc:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800360c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0201 	bic.w	r2, r2, #1
 800361c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2220      	movs	r2, #32
 8003622:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2220      	movs	r2, #32
 8003628:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e00f      	b.n	800365e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	69da      	ldr	r2, [r3, #28]
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	429a      	cmp	r2, r3
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	429a      	cmp	r2, r3
 800365a:	d091      	beq.n	8003580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800366c:	4904      	ldr	r1, [pc, #16]	; (8003680 <MX_FATFS_Init+0x18>)
 800366e:	4805      	ldr	r0, [pc, #20]	; (8003684 <MX_FATFS_Init+0x1c>)
 8003670:	f002 fee0 	bl	8006434 <FATFS_LinkDriver>
 8003674:	4603      	mov	r3, r0
 8003676:	461a      	mov	r2, r3
 8003678:	4b03      	ldr	r3, [pc, #12]	; (8003688 <MX_FATFS_Init+0x20>)
 800367a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800367c:	bf00      	nop
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200003e4 	.word	0x200003e4
 8003684:	2000000c 	.word	0x2000000c
 8003688:	200003e8 	.word	0x200003e8

0800368c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003690:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003692:	4618      	mov	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4603      	mov	r3, r0
 80036a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 f9d9 	bl	8003a60 <USER_SPI_initialize>
 80036ae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 faa1 	bl	8003c0c <USER_SPI_status>
 80036ca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60b9      	str	r1, [r7, #8]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4603      	mov	r3, r0
 80036e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80036e4:	7bf8      	ldrb	r0, [r7, #15]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	f000 faa4 	bl	8003c38 <USER_SPI_read>
 80036f0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	4603      	mov	r3, r0
 8003708:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800370a:	7bf8      	ldrb	r0, [r7, #15]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	f000 faf7 	bl	8003d04 <USER_SPI_write>
 8003716:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003718:	4618      	mov	r0, r3
 800371a:	3710      	adds	r7, #16
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	603a      	str	r2, [r7, #0]
 800372a:	71fb      	strb	r3, [r7, #7]
 800372c:	460b      	mov	r3, r1
 800372e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8003730:	79b9      	ldrb	r1, [r7, #6]
 8003732:	79fb      	ldrb	r3, [r7, #7]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fb60 	bl	8003dfc <USER_SPI_ioctl>
 800373c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8003750:	f7fd fa88 	bl	8000c64 <HAL_GetTick>
 8003754:	4603      	mov	r3, r0
 8003756:	4a04      	ldr	r2, [pc, #16]	; (8003768 <SPI_Timer_On+0x20>)
 8003758:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800375a:	4a04      	ldr	r2, [pc, #16]	; (800376c <SPI_Timer_On+0x24>)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6013      	str	r3, [r2, #0]
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	2000084c 	.word	0x2000084c
 800376c:	20000850 	.word	0x20000850

08003770 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003774:	f7fd fa76 	bl	8000c64 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <SPI_Timer_Status+0x24>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	1ad2      	subs	r2, r2, r3
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <SPI_Timer_Status+0x28>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	429a      	cmp	r2, r3
 8003786:	bf34      	ite	cc
 8003788:	2301      	movcc	r3, #1
 800378a:	2300      	movcs	r3, #0
 800378c:	b2db      	uxtb	r3, r3
}
 800378e:	4618      	mov	r0, r3
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	2000084c 	.word	0x2000084c
 8003798:	20000850 	.word	0x20000850

0800379c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 80037a6:	f107 020f 	add.w	r2, r7, #15
 80037aa:	1df9      	adds	r1, r7, #7
 80037ac:	2332      	movs	r3, #50	; 0x32
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2301      	movs	r3, #1
 80037b2:	4804      	ldr	r0, [pc, #16]	; (80037c4 <xchg_spi+0x28>)
 80037b4:	f7ff f823 	bl	80027fe <HAL_SPI_TransmitReceive>
    return rxDat;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200002f8 	.word	0x200002f8

080037c8 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80037c8:	b590      	push	{r4, r7, lr}
 80037ca:	b085      	sub	sp, #20
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e00a      	b.n	80037ee <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	18d4      	adds	r4, r2, r3
 80037de:	20ff      	movs	r0, #255	; 0xff
 80037e0:	f7ff ffdc 	bl	800379c <xchg_spi>
 80037e4:	4603      	mov	r3, r0
 80037e6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	3301      	adds	r3, #1
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d3f0      	bcc.n	80037d8 <rcvr_spi_multi+0x10>
	}
}
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd90      	pop	{r4, r7, pc}

08003800 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	e009      	b.n	8003824 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff ffbf 	bl	800379c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	3301      	adds	r3, #1
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d3f1      	bcc.n	8003810 <xmit_spi_multi+0x10>
	}
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800383e:	f7fd fa11 	bl	8000c64 <HAL_GetTick>
 8003842:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003848:	20ff      	movs	r0, #255	; 0xff
 800384a:	f7ff ffa7 	bl	800379c <xchg_spi>
 800384e:	4603      	mov	r3, r0
 8003850:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2bff      	cmp	r3, #255	; 0xff
 8003856:	d007      	beq.n	8003868 <wait_ready+0x32>
 8003858:	f7fd fa04 	bl	8000c64 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	429a      	cmp	r2, r3
 8003866:	d8ef      	bhi.n	8003848 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2bff      	cmp	r3, #255	; 0xff
 800386c:	bf0c      	ite	eq
 800386e:	2301      	moveq	r3, #1
 8003870:	2300      	movne	r3, #0
 8003872:	b2db      	uxtb	r3, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003880:	2201      	movs	r2, #1
 8003882:	2102      	movs	r1, #2
 8003884:	4803      	ldr	r0, [pc, #12]	; (8003894 <despiselect+0x18>)
 8003886:	f7fd fc49 	bl	800111c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800388a:	20ff      	movs	r0, #255	; 0xff
 800388c:	f7ff ff86 	bl	800379c <xchg_spi>

}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}
 8003894:	48000400 	.word	0x48000400

08003898 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800389c:	2200      	movs	r2, #0
 800389e:	2102      	movs	r1, #2
 80038a0:	4809      	ldr	r0, [pc, #36]	; (80038c8 <spiselect+0x30>)
 80038a2:	f7fd fc3b 	bl	800111c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80038a6:	20ff      	movs	r0, #255	; 0xff
 80038a8:	f7ff ff78 	bl	800379c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80038ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80038b0:	f7ff ffc1 	bl	8003836 <wait_ready>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <spiselect+0x26>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e002      	b.n	80038c4 <spiselect+0x2c>

	despiselect();
 80038be:	f7ff ffdd 	bl	800387c <despiselect>
	return 0;	/* Timeout */
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	48000400 	.word	0x48000400

080038cc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80038d6:	20c8      	movs	r0, #200	; 0xc8
 80038d8:	f7ff ff36 	bl	8003748 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80038dc:	20ff      	movs	r0, #255	; 0xff
 80038de:	f7ff ff5d 	bl	800379c <xchg_spi>
 80038e2:	4603      	mov	r3, r0
 80038e4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
 80038e8:	2bff      	cmp	r3, #255	; 0xff
 80038ea:	d104      	bne.n	80038f6 <rcvr_datablock+0x2a>
 80038ec:	f7ff ff40 	bl	8003770 <SPI_Timer_Status>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1f2      	bne.n	80038dc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80038f6:	7bfb      	ldrb	r3, [r7, #15]
 80038f8:	2bfe      	cmp	r3, #254	; 0xfe
 80038fa:	d001      	beq.n	8003900 <rcvr_datablock+0x34>
 80038fc:	2300      	movs	r3, #0
 80038fe:	e00a      	b.n	8003916 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7ff ff60 	bl	80037c8 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003908:	20ff      	movs	r0, #255	; 0xff
 800390a:	f7ff ff47 	bl	800379c <xchg_spi>
 800390e:	20ff      	movs	r0, #255	; 0xff
 8003910:	f7ff ff44 	bl	800379c <xchg_spi>

	return 1;						/* Function succeeded */
 8003914:	2301      	movs	r3, #1
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b084      	sub	sp, #16
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	460b      	mov	r3, r1
 8003928:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800392a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800392e:	f7ff ff82 	bl	8003836 <wait_ready>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <xmit_datablock+0x1e>
 8003938:	2300      	movs	r3, #0
 800393a:	e01e      	b.n	800397a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff ff2c 	bl	800379c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	2bfd      	cmp	r3, #253	; 0xfd
 8003948:	d016      	beq.n	8003978 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800394a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff56 	bl	8003800 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003954:	20ff      	movs	r0, #255	; 0xff
 8003956:	f7ff ff21 	bl	800379c <xchg_spi>
 800395a:	20ff      	movs	r0, #255	; 0xff
 800395c:	f7ff ff1e 	bl	800379c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003960:	20ff      	movs	r0, #255	; 0xff
 8003962:	f7ff ff1b 	bl	800379c <xchg_spi>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	f003 031f 	and.w	r3, r3, #31
 8003970:	2b05      	cmp	r3, #5
 8003972:	d001      	beq.n	8003978 <xmit_datablock+0x5a>
 8003974:	2300      	movs	r3, #0
 8003976:	e000      	b.n	800397a <xmit_datablock+0x5c>
	}
	return 1;
 8003978:	2301      	movs	r3, #1
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	6039      	str	r1, [r7, #0]
 800398c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da0e      	bge.n	80039b4 <send_cmd+0x32>
		cmd &= 0x7F;
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800399c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800399e:	2100      	movs	r1, #0
 80039a0:	2037      	movs	r0, #55	; 0x37
 80039a2:	f7ff ffee 	bl	8003982 <send_cmd>
 80039a6:	4603      	mov	r3, r0
 80039a8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80039aa:	7bbb      	ldrb	r3, [r7, #14]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d901      	bls.n	80039b4 <send_cmd+0x32>
 80039b0:	7bbb      	ldrb	r3, [r7, #14]
 80039b2:	e051      	b.n	8003a58 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	2b0c      	cmp	r3, #12
 80039b8:	d008      	beq.n	80039cc <send_cmd+0x4a>
		despiselect();
 80039ba:	f7ff ff5f 	bl	800387c <despiselect>
		if (!spiselect()) return 0xFF;
 80039be:	f7ff ff6b 	bl	8003898 <spiselect>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <send_cmd+0x4a>
 80039c8:	23ff      	movs	r3, #255	; 0xff
 80039ca:	e045      	b.n	8003a58 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff fee1 	bl	800379c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	0e1b      	lsrs	r3, r3, #24
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fedb 	bl	800379c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff fed5 	bl	800379c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff fecf 	bl	800379c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff feca 	bl	800379c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <send_cmd+0x94>
 8003a12:	2395      	movs	r3, #149	; 0x95
 8003a14:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d101      	bne.n	8003a20 <send_cmd+0x9e>
 8003a1c:	2387      	movs	r3, #135	; 0x87
 8003a1e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003a20:	7bfb      	ldrb	r3, [r7, #15]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff feba 	bl	800379c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003a28:	79fb      	ldrb	r3, [r7, #7]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d102      	bne.n	8003a34 <send_cmd+0xb2>
 8003a2e:	20ff      	movs	r0, #255	; 0xff
 8003a30:	f7ff feb4 	bl	800379c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003a34:	230a      	movs	r3, #10
 8003a36:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003a38:	20ff      	movs	r0, #255	; 0xff
 8003a3a:	f7ff feaf 	bl	800379c <xchg_spi>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003a42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	da05      	bge.n	8003a56 <send_cmd+0xd4>
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <send_cmd+0xb6>

	return res;							/* Return received response */
 8003a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d001      	beq.n	8003a74 <USER_SPI_initialize+0x14>
 8003a70:	2301      	movs	r3, #1
 8003a72:	e0c2      	b.n	8003bfa <USER_SPI_initialize+0x19a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003a74:	4b63      	ldr	r3, [pc, #396]	; (8003c04 <USER_SPI_initialize+0x1a4>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <USER_SPI_initialize+0x2a>
 8003a82:	4b60      	ldr	r3, [pc, #384]	; (8003c04 <USER_SPI_initialize+0x1a4>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e0b7      	b.n	8003bfa <USER_SPI_initialize+0x19a>

	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003a8a:	230a      	movs	r3, #10
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	e005      	b.n	8003a9c <USER_SPI_initialize+0x3c>
 8003a90:	20ff      	movs	r0, #255	; 0xff
 8003a92:	f7ff fe83 	bl	800379c <xchg_spi>
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f6      	bne.n	8003a90 <USER_SPI_initialize+0x30>

	ty = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	f7ff ff6a 	bl	8003982 <send_cmd>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	f040 808b 	bne.w	8003bcc <USER_SPI_initialize+0x16c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003ab6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003aba:	f7ff fe45 	bl	8003748 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003abe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003ac2:	2008      	movs	r0, #8
 8003ac4:	f7ff ff5d 	bl	8003982 <send_cmd>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d151      	bne.n	8003b72 <USER_SPI_initialize+0x112>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]
 8003ad2:	e00d      	b.n	8003af0 <USER_SPI_initialize+0x90>
 8003ad4:	7bfc      	ldrb	r4, [r7, #15]
 8003ad6:	20ff      	movs	r0, #255	; 0xff
 8003ad8:	f7ff fe60 	bl	800379c <xchg_spi>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	4423      	add	r3, r4
 8003ae6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003aea:	7bfb      	ldrb	r3, [r7, #15]
 8003aec:	3301      	adds	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d9ee      	bls.n	8003ad4 <USER_SPI_initialize+0x74>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003af6:	7abb      	ldrb	r3, [r7, #10]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d167      	bne.n	8003bcc <USER_SPI_initialize+0x16c>
 8003afc:	7afb      	ldrb	r3, [r7, #11]
 8003afe:	2baa      	cmp	r3, #170	; 0xaa
 8003b00:	d164      	bne.n	8003bcc <USER_SPI_initialize+0x16c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003b02:	bf00      	nop
 8003b04:	f7ff fe34 	bl	8003770 <SPI_Timer_Status>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <USER_SPI_initialize+0xbe>
 8003b0e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003b12:	20a9      	movs	r0, #169	; 0xa9
 8003b14:	f7ff ff35 	bl	8003982 <send_cmd>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f2      	bne.n	8003b04 <USER_SPI_initialize+0xa4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003b1e:	f7ff fe27 	bl	8003770 <SPI_Timer_Status>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d051      	beq.n	8003bcc <USER_SPI_initialize+0x16c>
 8003b28:	2100      	movs	r1, #0
 8003b2a:	203a      	movs	r0, #58	; 0x3a
 8003b2c:	f7ff ff29 	bl	8003982 <send_cmd>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d14a      	bne.n	8003bcc <USER_SPI_initialize+0x16c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
 8003b3a:	e00d      	b.n	8003b58 <USER_SPI_initialize+0xf8>
 8003b3c:	7bfc      	ldrb	r4, [r7, #15]
 8003b3e:	20ff      	movs	r0, #255	; 0xff
 8003b40:	f7ff fe2c 	bl	800379c <xchg_spi>
 8003b44:	4603      	mov	r3, r0
 8003b46:	461a      	mov	r2, r3
 8003b48:	f107 0310 	add.w	r3, r7, #16
 8003b4c:	4423      	add	r3, r4
 8003b4e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	3301      	adds	r3, #1
 8003b56:	73fb      	strb	r3, [r7, #15]
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d9ee      	bls.n	8003b3c <USER_SPI_initialize+0xdc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003b5e:	7a3b      	ldrb	r3, [r7, #8]
 8003b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <USER_SPI_initialize+0x10c>
 8003b68:	230c      	movs	r3, #12
 8003b6a:	e000      	b.n	8003b6e <USER_SPI_initialize+0x10e>
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	737b      	strb	r3, [r7, #13]
 8003b70:	e02c      	b.n	8003bcc <USER_SPI_initialize+0x16c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003b72:	2100      	movs	r1, #0
 8003b74:	20a9      	movs	r0, #169	; 0xa9
 8003b76:	f7ff ff04 	bl	8003982 <send_cmd>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d804      	bhi.n	8003b8a <USER_SPI_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003b80:	2302      	movs	r3, #2
 8003b82:	737b      	strb	r3, [r7, #13]
 8003b84:	23a9      	movs	r3, #169	; 0xa9
 8003b86:	73bb      	strb	r3, [r7, #14]
 8003b88:	e003      	b.n	8003b92 <USER_SPI_initialize+0x132>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	737b      	strb	r3, [r7, #13]
 8003b8e:	2301      	movs	r3, #1
 8003b90:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003b92:	bf00      	nop
 8003b94:	f7ff fdec 	bl	8003770 <SPI_Timer_Status>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d007      	beq.n	8003bae <USER_SPI_initialize+0x14e>
 8003b9e:	7bbb      	ldrb	r3, [r7, #14]
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff feed 	bl	8003982 <send_cmd>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f2      	bne.n	8003b94 <USER_SPI_initialize+0x134>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003bae:	f7ff fddf 	bl	8003770 <SPI_Timer_Status>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d007      	beq.n	8003bc8 <USER_SPI_initialize+0x168>
 8003bb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003bbc:	2010      	movs	r0, #16
 8003bbe:	f7ff fee0 	bl	8003982 <send_cmd>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d001      	beq.n	8003bcc <USER_SPI_initialize+0x16c>
				ty = 0;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003bcc:	4a0e      	ldr	r2, [pc, #56]	; (8003c08 <USER_SPI_initialize+0x1a8>)
 8003bce:	7b7b      	ldrb	r3, [r7, #13]
 8003bd0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003bd2:	f7ff fe53 	bl	800387c <despiselect>

	if (ty) {			/* OK */
 8003bd6:	7b7b      	ldrb	r3, [r7, #13]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <USER_SPI_initialize+0x18e>
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003bdc:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <USER_SPI_initialize+0x1a4>)
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <USER_SPI_initialize+0x1a4>)
 8003bea:	701a      	strb	r2, [r3, #0]
 8003bec:	e002      	b.n	8003bf4 <USER_SPI_initialize+0x194>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003bee:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <USER_SPI_initialize+0x1a4>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <USER_SPI_initialize+0x1a4>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	b2db      	uxtb	r3, r3
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd90      	pop	{r4, r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000020 	.word	0x20000020
 8003c08:	20000041 	.word	0x20000041

08003c0c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <USER_SPI_status+0x14>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e002      	b.n	8003c26 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003c20:	4b04      	ldr	r3, [pc, #16]	; (8003c34 <USER_SPI_status+0x28>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	b2db      	uxtb	r3, r3
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000020 	.word	0x20000020

08003c38 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60b9      	str	r1, [r7, #8]
 8003c40:	607a      	str	r2, [r7, #4]
 8003c42:	603b      	str	r3, [r7, #0]
 8003c44:	4603      	mov	r3, r0
 8003c46:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d102      	bne.n	8003c54 <USER_SPI_read+0x1c>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <USER_SPI_read+0x20>
 8003c54:	2304      	movs	r3, #4
 8003c56:	e04d      	b.n	8003cf4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003c58:	4b28      	ldr	r3, [pc, #160]	; (8003cfc <USER_SPI_read+0xc4>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <USER_SPI_read+0x32>
 8003c66:	2303      	movs	r3, #3
 8003c68:	e044      	b.n	8003cf4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003c6a:	4b25      	ldr	r3, [pc, #148]	; (8003d00 <USER_SPI_read+0xc8>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <USER_SPI_read+0x44>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	025b      	lsls	r3, r3, #9
 8003c7a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d111      	bne.n	8003ca6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	2011      	movs	r0, #17
 8003c86:	f7ff fe7c 	bl	8003982 <send_cmd>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d129      	bne.n	8003ce4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003c90:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c94:	68b8      	ldr	r0, [r7, #8]
 8003c96:	f7ff fe19 	bl	80038cc <rcvr_datablock>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d021      	beq.n	8003ce4 <USER_SPI_read+0xac>
			count = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	e01e      	b.n	8003ce4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003ca6:	6879      	ldr	r1, [r7, #4]
 8003ca8:	2012      	movs	r0, #18
 8003caa:	f7ff fe6a 	bl	8003982 <send_cmd>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d117      	bne.n	8003ce4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003cb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cb8:	68b8      	ldr	r0, [r7, #8]
 8003cba:	f7ff fe07 	bl	80038cc <rcvr_datablock>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00a      	beq.n	8003cda <USER_SPI_read+0xa2>
				buff += 512;
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003cca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	603b      	str	r3, [r7, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1ed      	bne.n	8003cb4 <USER_SPI_read+0x7c>
 8003cd8:	e000      	b.n	8003cdc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003cda:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003cdc:	2100      	movs	r1, #0
 8003cde:	200c      	movs	r0, #12
 8003ce0:	f7ff fe4f 	bl	8003982 <send_cmd>
		}
	}
	despiselect();
 8003ce4:	f7ff fdca 	bl	800387c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	bf14      	ite	ne
 8003cee:	2301      	movne	r3, #1
 8003cf0:	2300      	moveq	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000020 	.word	0x20000020
 8003d00:	20000041 	.word	0x20000041

08003d04 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4603      	mov	r3, r0
 8003d12:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d102      	bne.n	8003d20 <USER_SPI_write+0x1c>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <USER_SPI_write+0x20>
 8003d20:	2304      	movs	r3, #4
 8003d22:	e063      	b.n	8003dec <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003d24:	4b33      	ldr	r3, [pc, #204]	; (8003df4 <USER_SPI_write+0xf0>)
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <USER_SPI_write+0x32>
 8003d32:	2303      	movs	r3, #3
 8003d34:	e05a      	b.n	8003dec <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003d36:	4b2f      	ldr	r3, [pc, #188]	; (8003df4 <USER_SPI_write+0xf0>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <USER_SPI_write+0x44>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e051      	b.n	8003dec <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <USER_SPI_write+0xf4>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <USER_SPI_write+0x56>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	025b      	lsls	r3, r3, #9
 8003d58:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d110      	bne.n	8003d82 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003d60:	6879      	ldr	r1, [r7, #4]
 8003d62:	2018      	movs	r0, #24
 8003d64:	f7ff fe0d 	bl	8003982 <send_cmd>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d136      	bne.n	8003ddc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003d6e:	21fe      	movs	r1, #254	; 0xfe
 8003d70:	68b8      	ldr	r0, [r7, #8]
 8003d72:	f7ff fdd4 	bl	800391e <xmit_datablock>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d02f      	beq.n	8003ddc <USER_SPI_write+0xd8>
			count = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	e02c      	b.n	8003ddc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <USER_SPI_write+0xf4>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	f003 0306 	and.w	r3, r3, #6
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <USER_SPI_write+0x92>
 8003d8e:	6839      	ldr	r1, [r7, #0]
 8003d90:	2097      	movs	r0, #151	; 0x97
 8003d92:	f7ff fdf6 	bl	8003982 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	2019      	movs	r0, #25
 8003d9a:	f7ff fdf2 	bl	8003982 <send_cmd>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d11b      	bne.n	8003ddc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003da4:	21fc      	movs	r1, #252	; 0xfc
 8003da6:	68b8      	ldr	r0, [r7, #8]
 8003da8:	f7ff fdb9 	bl	800391e <xmit_datablock>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00a      	beq.n	8003dc8 <USER_SPI_write+0xc4>
				buff += 512;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003db8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1ee      	bne.n	8003da4 <USER_SPI_write+0xa0>
 8003dc6:	e000      	b.n	8003dca <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003dc8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003dca:	21fd      	movs	r1, #253	; 0xfd
 8003dcc:	2000      	movs	r0, #0
 8003dce:	f7ff fda6 	bl	800391e <xmit_datablock>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <USER_SPI_write+0xd8>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003ddc:	f7ff fd4e 	bl	800387c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	bf14      	ite	ne
 8003de6:	2301      	movne	r3, #1
 8003de8:	2300      	moveq	r3, #0
 8003dea:	b2db      	uxtb	r3, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000020 	.word	0x20000020
 8003df8:	20000041 	.word	0x20000041

08003dfc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08c      	sub	sp, #48	; 0x30
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	603a      	str	r2, [r7, #0]
 8003e06:	71fb      	strb	r3, [r7, #7]
 8003e08:	460b      	mov	r3, r1
 8003e0a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <USER_SPI_ioctl+0x1a>
 8003e12:	2304      	movs	r3, #4
 8003e14:	e15a      	b.n	80040cc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003e16:	4baf      	ldr	r3, [pc, #700]	; (80040d4 <USER_SPI_ioctl+0x2d8>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <USER_SPI_ioctl+0x2c>
 8003e24:	2303      	movs	r3, #3
 8003e26:	e151      	b.n	80040cc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8003e2e:	79bb      	ldrb	r3, [r7, #6]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	f200 8136 	bhi.w	80040a2 <USER_SPI_ioctl+0x2a6>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <USER_SPI_ioctl+0x40>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e51 	.word	0x08003e51
 8003e40:	08003e65 	.word	0x08003e65
 8003e44:	080040a3 	.word	0x080040a3
 8003e48:	08003f11 	.word	0x08003f11
 8003e4c:	08004007 	.word	0x08004007
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8003e50:	f7ff fd22 	bl	8003898 <spiselect>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8127 	beq.w	80040aa <USER_SPI_ioctl+0x2ae>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8003e62:	e122      	b.n	80040aa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8003e64:	2100      	movs	r1, #0
 8003e66:	2009      	movs	r0, #9
 8003e68:	f7ff fd8b 	bl	8003982 <send_cmd>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f040 811d 	bne.w	80040ae <USER_SPI_ioctl+0x2b2>
 8003e74:	f107 030c 	add.w	r3, r7, #12
 8003e78:	2110      	movs	r1, #16
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fd26 	bl	80038cc <rcvr_datablock>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 8113 	beq.w	80040ae <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8003e88:	7b3b      	ldrb	r3, [r7, #12]
 8003e8a:	099b      	lsrs	r3, r3, #6
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d111      	bne.n	8003eb6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8003e92:	7d7b      	ldrb	r3, [r7, #21]
 8003e94:	461a      	mov	r2, r3
 8003e96:	7d3b      	ldrb	r3, [r7, #20]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	4413      	add	r3, r2
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8003ea6:	4413      	add	r3, r2
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	029a      	lsls	r2, r3, #10
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	e028      	b.n	8003f08 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8003eb6:	7c7b      	ldrb	r3, [r7, #17]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	7dbb      	ldrb	r3, [r7, #22]
 8003ec0:	09db      	lsrs	r3, r3, #7
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	7d7b      	ldrb	r3, [r7, #21]
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 0306 	and.w	r3, r3, #6
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	3302      	adds	r3, #2
 8003eda:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8003ede:	7d3b      	ldrb	r3, [r7, #20]
 8003ee0:	099b      	lsrs	r3, r3, #6
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	7cfb      	ldrb	r3, [r7, #19]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	7cbb      	ldrb	r3, [r7, #18]
 8003eee:	029b      	lsls	r3, r3, #10
 8003ef0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ef4:	4413      	add	r3, r2
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8003efa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003efe:	3b09      	subs	r3, #9
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	409a      	lsls	r2, r3
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8003f0e:	e0ce      	b.n	80040ae <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8003f10:	4b71      	ldr	r3, [pc, #452]	; (80040d8 <USER_SPI_ioctl+0x2dc>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d031      	beq.n	8003f80 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	208d      	movs	r0, #141	; 0x8d
 8003f20:	f7ff fd2f 	bl	8003982 <send_cmd>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f040 80c3 	bne.w	80040b2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8003f2c:	20ff      	movs	r0, #255	; 0xff
 8003f2e:	f7ff fc35 	bl	800379c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8003f32:	f107 030c 	add.w	r3, r7, #12
 8003f36:	2110      	movs	r1, #16
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fcc7 	bl	80038cc <rcvr_datablock>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80b6 	beq.w	80040b2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8003f46:	2330      	movs	r3, #48	; 0x30
 8003f48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003f4c:	e007      	b.n	8003f5e <USER_SPI_ioctl+0x162>
 8003f4e:	20ff      	movs	r0, #255	; 0xff
 8003f50:	f7ff fc24 	bl	800379c <xchg_spi>
 8003f54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003f5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f3      	bne.n	8003f4e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8003f66:	7dbb      	ldrb	r3, [r7, #22]
 8003f68:	091b      	lsrs	r3, r3, #4
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	2310      	movs	r3, #16
 8003f70:	fa03 f202 	lsl.w	r2, r3, r2
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8003f7e:	e098      	b.n	80040b2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8003f80:	2100      	movs	r1, #0
 8003f82:	2009      	movs	r0, #9
 8003f84:	f7ff fcfd 	bl	8003982 <send_cmd>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 8091 	bne.w	80040b2 <USER_SPI_ioctl+0x2b6>
 8003f90:	f107 030c 	add.w	r3, r7, #12
 8003f94:	2110      	movs	r1, #16
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fc98 	bl	80038cc <rcvr_datablock>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 8087 	beq.w	80040b2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8003fa4:	4b4c      	ldr	r3, [pc, #304]	; (80040d8 <USER_SPI_ioctl+0x2dc>)
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d012      	beq.n	8003fd6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8003fb0:	7dbb      	ldrb	r3, [r7, #22]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8003fb8:	7dfa      	ldrb	r2, [r7, #23]
 8003fba:	09d2      	lsrs	r2, r2, #7
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	1c5a      	adds	r2, r3, #1
 8003fc2:	7e7b      	ldrb	r3, [r7, #25]
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	e013      	b.n	8003ffe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8003fd6:	7dbb      	ldrb	r3, [r7, #22]
 8003fd8:	109b      	asrs	r3, r3, #2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	7dfa      	ldrb	r2, [r7, #23]
 8003fe4:	00d2      	lsls	r2, r2, #3
 8003fe6:	f002 0218 	and.w	r2, r2, #24
 8003fea:	7df9      	ldrb	r1, [r7, #23]
 8003fec:	0949      	lsrs	r1, r1, #5
 8003fee:	b2c9      	uxtb	r1, r1
 8003ff0:	440a      	add	r2, r1
 8003ff2:	3201      	adds	r2, #1
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004004:	e055      	b.n	80040b2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004006:	4b34      	ldr	r3, [pc, #208]	; (80040d8 <USER_SPI_ioctl+0x2dc>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	f003 0306 	and.w	r3, r3, #6
 800400e:	2b00      	cmp	r3, #0
 8004010:	d051      	beq.n	80040b6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8004012:	f107 020c 	add.w	r2, r7, #12
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	210b      	movs	r1, #11
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff feee 	bl	8003dfc <USER_SPI_ioctl>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d149      	bne.n	80040ba <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004026:	7b3b      	ldrb	r3, [r7, #12]
 8004028:	099b      	lsrs	r3, r3, #6
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d104      	bne.n	800403a <USER_SPI_ioctl+0x23e>
 8004030:	7dbb      	ldrb	r3, [r7, #22]
 8004032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004036:	2b00      	cmp	r3, #0
 8004038:	d041      	beq.n	80040be <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	623b      	str	r3, [r7, #32]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800404a:	4b23      	ldr	r3, [pc, #140]	; (80040d8 <USER_SPI_ioctl+0x2dc>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b00      	cmp	r3, #0
 8004054:	d105      	bne.n	8004062 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	025b      	lsls	r3, r3, #9
 800405a:	62bb      	str	r3, [r7, #40]	; 0x28
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	025b      	lsls	r3, r3, #9
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8004062:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004064:	2020      	movs	r0, #32
 8004066:	f7ff fc8c 	bl	8003982 <send_cmd>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d128      	bne.n	80040c2 <USER_SPI_ioctl+0x2c6>
 8004070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004072:	2021      	movs	r0, #33	; 0x21
 8004074:	f7ff fc85 	bl	8003982 <send_cmd>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d121      	bne.n	80040c2 <USER_SPI_ioctl+0x2c6>
 800407e:	2100      	movs	r1, #0
 8004080:	2026      	movs	r0, #38	; 0x26
 8004082:	f7ff fc7e 	bl	8003982 <send_cmd>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d11a      	bne.n	80040c2 <USER_SPI_ioctl+0x2c6>
 800408c:	f247 5030 	movw	r0, #30000	; 0x7530
 8004090:	f7ff fbd1 	bl	8003836 <wait_ready>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d013      	beq.n	80040c2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800409a:	2300      	movs	r3, #0
 800409c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80040a0:	e00f      	b.n	80040c2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80040a2:	2304      	movs	r3, #4
 80040a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80040a8:	e00c      	b.n	80040c4 <USER_SPI_ioctl+0x2c8>
		break;
 80040aa:	bf00      	nop
 80040ac:	e00a      	b.n	80040c4 <USER_SPI_ioctl+0x2c8>
		break;
 80040ae:	bf00      	nop
 80040b0:	e008      	b.n	80040c4 <USER_SPI_ioctl+0x2c8>
		break;
 80040b2:	bf00      	nop
 80040b4:	e006      	b.n	80040c4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80040b6:	bf00      	nop
 80040b8:	e004      	b.n	80040c4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80040ba:	bf00      	nop
 80040bc:	e002      	b.n	80040c4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <USER_SPI_ioctl+0x2c8>
		break;
 80040c2:	bf00      	nop
	}

	despiselect();
 80040c4:	f7ff fbda 	bl	800387c <despiselect>

	return res;
 80040c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3730      	adds	r7, #48	; 0x30
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000020 	.word	0x20000020
 80040d8:	20000041 	.word	0x20000041

080040dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	4a08      	ldr	r2, [pc, #32]	; (800410c <disk_status+0x30>)
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4413      	add	r3, r2
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	79fa      	ldrb	r2, [r7, #7]
 80040f4:	4905      	ldr	r1, [pc, #20]	; (800410c <disk_status+0x30>)
 80040f6:	440a      	add	r2, r1
 80040f8:	7a12      	ldrb	r2, [r2, #8]
 80040fa:	4610      	mov	r0, r2
 80040fc:	4798      	blx	r3
 80040fe:	4603      	mov	r3, r0
 8004100:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004102:	7bfb      	ldrb	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	2000006c 	.word	0x2000006c

08004110 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800411e:	79fb      	ldrb	r3, [r7, #7]
 8004120:	4a0d      	ldr	r2, [pc, #52]	; (8004158 <disk_initialize+0x48>)
 8004122:	5cd3      	ldrb	r3, [r2, r3]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d111      	bne.n	800414c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004128:	79fb      	ldrb	r3, [r7, #7]
 800412a:	4a0b      	ldr	r2, [pc, #44]	; (8004158 <disk_initialize+0x48>)
 800412c:	2101      	movs	r1, #1
 800412e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <disk_initialize+0x48>)
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	79fa      	ldrb	r2, [r7, #7]
 800413e:	4906      	ldr	r1, [pc, #24]	; (8004158 <disk_initialize+0x48>)
 8004140:	440a      	add	r2, r1
 8004142:	7a12      	ldrb	r2, [r2, #8]
 8004144:	4610      	mov	r0, r2
 8004146:	4798      	blx	r3
 8004148:	4603      	mov	r3, r0
 800414a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800414c:	7bfb      	ldrb	r3, [r7, #15]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	2000006c 	.word	0x2000006c

0800415c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800415c:	b590      	push	{r4, r7, lr}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	4603      	mov	r3, r0
 800416a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	4a0a      	ldr	r2, [pc, #40]	; (8004198 <disk_read+0x3c>)
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	689c      	ldr	r4, [r3, #8]
 8004178:	7bfb      	ldrb	r3, [r7, #15]
 800417a:	4a07      	ldr	r2, [pc, #28]	; (8004198 <disk_read+0x3c>)
 800417c:	4413      	add	r3, r2
 800417e:	7a18      	ldrb	r0, [r3, #8]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	47a0      	blx	r4
 8004188:	4603      	mov	r3, r0
 800418a:	75fb      	strb	r3, [r7, #23]
  return res;
 800418c:	7dfb      	ldrb	r3, [r7, #23]
}
 800418e:	4618      	mov	r0, r3
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	bd90      	pop	{r4, r7, pc}
 8004196:	bf00      	nop
 8004198:	2000006c 	.word	0x2000006c

0800419c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800419c:	b590      	push	{r4, r7, lr}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60b9      	str	r1, [r7, #8]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	4603      	mov	r3, r0
 80041aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <disk_write+0x3c>)
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	68dc      	ldr	r4, [r3, #12]
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <disk_write+0x3c>)
 80041bc:	4413      	add	r3, r2
 80041be:	7a18      	ldrb	r0, [r3, #8]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68b9      	ldr	r1, [r7, #8]
 80041c6:	47a0      	blx	r4
 80041c8:	4603      	mov	r3, r0
 80041ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd90      	pop	{r4, r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2000006c 	.word	0x2000006c

080041dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	603a      	str	r2, [r7, #0]
 80041e6:	71fb      	strb	r3, [r7, #7]
 80041e8:	460b      	mov	r3, r1
 80041ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	4a09      	ldr	r2, [pc, #36]	; (8004214 <disk_ioctl+0x38>)
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	79fa      	ldrb	r2, [r7, #7]
 80041fa:	4906      	ldr	r1, [pc, #24]	; (8004214 <disk_ioctl+0x38>)
 80041fc:	440a      	add	r2, r1
 80041fe:	7a10      	ldrb	r0, [r2, #8]
 8004200:	79b9      	ldrb	r1, [r7, #6]
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	4798      	blx	r3
 8004206:	4603      	mov	r3, r0
 8004208:	73fb      	strb	r3, [r7, #15]
  return res;
 800420a:	7bfb      	ldrb	r3, [r7, #15]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	2000006c 	.word	0x2000006c

08004218 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3301      	adds	r3, #1
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004228:	89fb      	ldrh	r3, [r7, #14]
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	b21a      	sxth	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	b21b      	sxth	r3, r3
 8004234:	4313      	orrs	r3, r2
 8004236:	b21b      	sxth	r3, r3
 8004238:	81fb      	strh	r3, [r7, #14]
	return rv;
 800423a:	89fb      	ldrh	r3, [r7, #14]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3303      	adds	r3, #3
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	021b      	lsls	r3, r3, #8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	3202      	adds	r2, #2
 8004260:	7812      	ldrb	r2, [r2, #0]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	021b      	lsls	r3, r3, #8
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	3201      	adds	r2, #1
 800426e:	7812      	ldrb	r2, [r2, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	021b      	lsls	r3, r3, #8
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	7812      	ldrb	r2, [r2, #0]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
	return rv;
 8004280:	68fb      	ldr	r3, [r7, #12]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
 8004296:	460b      	mov	r3, r1
 8004298:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	887a      	ldrh	r2, [r7, #2]
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	701a      	strb	r2, [r3, #0]
 80042a6:	887b      	ldrh	r3, [r7, #2]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	887a      	ldrh	r2, [r7, #2]
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	701a      	strb	r2, [r3, #0]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	0a1b      	lsrs	r3, r3, #8
 80042de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	b2d2      	uxtb	r2, r2
 80042ea:	701a      	strb	r2, [r3, #0]
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	0a1b      	lsrs	r3, r3, #8
 8004302:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	1c5a      	adds	r2, r3, #1
 8004308:	607a      	str	r2, [r7, #4]
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00d      	beq.n	8004352 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	1c53      	adds	r3, r2, #1
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	1c59      	adds	r1, r3, #1
 8004340:	6179      	str	r1, [r7, #20]
 8004342:	7812      	ldrb	r2, [r2, #0]
 8004344:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3b01      	subs	r3, #1
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f1      	bne.n	8004336 <mem_cpy+0x1a>
	}
}
 8004352:	bf00      	nop
 8004354:	371c      	adds	r7, #28
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800435e:	b480      	push	{r7}
 8004360:	b087      	sub	sp, #28
 8004362:	af00      	add	r7, sp, #0
 8004364:	60f8      	str	r0, [r7, #12]
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	617a      	str	r2, [r7, #20]
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	3b01      	subs	r3, #1
 800437e:	607b      	str	r3, [r7, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f3      	bne.n	800436e <mem_set+0x10>
}
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	61fb      	str	r3, [r7, #28]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	61fa      	str	r2, [r7, #28]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	61ba      	str	r2, [r7, #24]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	1acb      	subs	r3, r1, r3
 80043c0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	607b      	str	r3, [r7, #4]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <mem_cmp+0x40>
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0eb      	beq.n	80043ac <mem_cmp+0x18>

	return r;
 80043d4:	697b      	ldr	r3, [r7, #20]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3724      	adds	r7, #36	; 0x24
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80043ec:	e002      	b.n	80043f4 <chk_chr+0x12>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3301      	adds	r3, #1
 80043f2:	607b      	str	r3, [r7, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <chk_chr+0x26>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	4293      	cmp	r3, r2
 8004406:	d1f2      	bne.n	80043ee <chk_chr+0xc>
	return *str;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	781b      	ldrb	r3, [r3, #0]
}
 800440c:	4618      	mov	r0, r3
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004422:	2300      	movs	r3, #0
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	e029      	b.n	8004480 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800442c:	4a27      	ldr	r2, [pc, #156]	; (80044cc <chk_lock+0xb4>)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	4413      	add	r3, r2
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d01d      	beq.n	8004476 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800443a:	4a24      	ldr	r2, [pc, #144]	; (80044cc <chk_lock+0xb4>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	4413      	add	r3, r2
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d116      	bne.n	800447a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <chk_lock+0xb4>)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	4413      	add	r3, r2
 8004454:	3304      	adds	r3, #4
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800445c:	429a      	cmp	r2, r3
 800445e:	d10c      	bne.n	800447a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004460:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <chk_lock+0xb4>)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	011b      	lsls	r3, r3, #4
 8004466:	4413      	add	r3, r2
 8004468:	3308      	adds	r3, #8
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004470:	429a      	cmp	r2, r3
 8004472:	d102      	bne.n	800447a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004474:	e007      	b.n	8004486 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	3301      	adds	r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d9d2      	bls.n	800442c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d109      	bne.n	80044a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <chk_lock+0x80>
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	2b02      	cmp	r3, #2
 8004496:	d101      	bne.n	800449c <chk_lock+0x84>
 8004498:	2300      	movs	r3, #0
 800449a:	e010      	b.n	80044be <chk_lock+0xa6>
 800449c:	2312      	movs	r3, #18
 800449e:	e00e      	b.n	80044be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d108      	bne.n	80044b8 <chk_lock+0xa0>
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <chk_lock+0xb4>)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	011b      	lsls	r3, r3, #4
 80044ac:	4413      	add	r3, r2
 80044ae:	330c      	adds	r3, #12
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b6:	d101      	bne.n	80044bc <chk_lock+0xa4>
 80044b8:	2310      	movs	r3, #16
 80044ba:	e000      	b.n	80044be <chk_lock+0xa6>
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	2000004c 	.word	0x2000004c

080044d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80044d6:	2300      	movs	r3, #0
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	e002      	b.n	80044e2 <enq_lock+0x12>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3301      	adds	r3, #1
 80044e0:	607b      	str	r3, [r7, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d806      	bhi.n	80044f6 <enq_lock+0x26>
 80044e8:	4a09      	ldr	r2, [pc, #36]	; (8004510 <enq_lock+0x40>)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	011b      	lsls	r3, r3, #4
 80044ee:	4413      	add	r3, r2
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f2      	bne.n	80044dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	bf14      	ite	ne
 80044fc:	2301      	movne	r3, #1
 80044fe:	2300      	moveq	r3, #0
 8004500:	b2db      	uxtb	r3, r3
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	2000004c 	.word	0x2000004c

08004514 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	e01f      	b.n	8004564 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004524:	4a41      	ldr	r2, [pc, #260]	; (800462c <inc_lock+0x118>)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	4413      	add	r3, r2
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d113      	bne.n	800455e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004536:	4a3d      	ldr	r2, [pc, #244]	; (800462c <inc_lock+0x118>)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	4413      	add	r3, r2
 800453e:	3304      	adds	r3, #4
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004546:	429a      	cmp	r2, r3
 8004548:	d109      	bne.n	800455e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800454a:	4a38      	ldr	r2, [pc, #224]	; (800462c <inc_lock+0x118>)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	011b      	lsls	r3, r3, #4
 8004550:	4413      	add	r3, r2
 8004552:	3308      	adds	r3, #8
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800455a:	429a      	cmp	r2, r3
 800455c:	d006      	beq.n	800456c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3301      	adds	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d9dc      	bls.n	8004524 <inc_lock+0x10>
 800456a:	e000      	b.n	800456e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800456c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2b02      	cmp	r3, #2
 8004572:	d132      	bne.n	80045da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	e002      	b.n	8004580 <inc_lock+0x6c>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d806      	bhi.n	8004594 <inc_lock+0x80>
 8004586:	4a29      	ldr	r2, [pc, #164]	; (800462c <inc_lock+0x118>)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	4413      	add	r3, r2
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1f2      	bne.n	800457a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d101      	bne.n	800459e <inc_lock+0x8a>
 800459a:	2300      	movs	r3, #0
 800459c:	e040      	b.n	8004620 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	4922      	ldr	r1, [pc, #136]	; (800462c <inc_lock+0x118>)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	011b      	lsls	r3, r3, #4
 80045a8:	440b      	add	r3, r1
 80045aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	491e      	ldr	r1, [pc, #120]	; (800462c <inc_lock+0x118>)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	440b      	add	r3, r1
 80045b8:	3304      	adds	r3, #4
 80045ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	491a      	ldr	r1, [pc, #104]	; (800462c <inc_lock+0x118>)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	440b      	add	r3, r1
 80045c8:	3308      	adds	r3, #8
 80045ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80045cc:	4a17      	ldr	r2, [pc, #92]	; (800462c <inc_lock+0x118>)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	4413      	add	r3, r2
 80045d4:	330c      	adds	r3, #12
 80045d6:	2200      	movs	r2, #0
 80045d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d009      	beq.n	80045f4 <inc_lock+0xe0>
 80045e0:	4a12      	ldr	r2, [pc, #72]	; (800462c <inc_lock+0x118>)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	4413      	add	r3, r2
 80045e8:	330c      	adds	r3, #12
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <inc_lock+0xe0>
 80045f0:	2300      	movs	r3, #0
 80045f2:	e015      	b.n	8004620 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d108      	bne.n	800460c <inc_lock+0xf8>
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <inc_lock+0x118>)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	011b      	lsls	r3, r3, #4
 8004600:	4413      	add	r3, r2
 8004602:	330c      	adds	r3, #12
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	3301      	adds	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	e001      	b.n	8004610 <inc_lock+0xfc>
 800460c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004610:	4906      	ldr	r1, [pc, #24]	; (800462c <inc_lock+0x118>)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	011b      	lsls	r3, r3, #4
 8004616:	440b      	add	r3, r1
 8004618:	330c      	adds	r3, #12
 800461a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3301      	adds	r3, #1
}
 8004620:	4618      	mov	r0, r3
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	2000004c 	.word	0x2000004c

08004630 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3b01      	subs	r3, #1
 800463c:	607b      	str	r3, [r7, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d825      	bhi.n	8004690 <dec_lock+0x60>
		n = Files[i].ctr;
 8004644:	4a17      	ldr	r2, [pc, #92]	; (80046a4 <dec_lock+0x74>)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	4413      	add	r3, r2
 800464c:	330c      	adds	r3, #12
 800464e:	881b      	ldrh	r3, [r3, #0]
 8004650:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004652:	89fb      	ldrh	r3, [r7, #14]
 8004654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004658:	d101      	bne.n	800465e <dec_lock+0x2e>
 800465a:	2300      	movs	r3, #0
 800465c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800465e:	89fb      	ldrh	r3, [r7, #14]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d002      	beq.n	800466a <dec_lock+0x3a>
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	3b01      	subs	r3, #1
 8004668:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800466a:	4a0e      	ldr	r2, [pc, #56]	; (80046a4 <dec_lock+0x74>)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	4413      	add	r3, r2
 8004672:	330c      	adds	r3, #12
 8004674:	89fa      	ldrh	r2, [r7, #14]
 8004676:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004678:	89fb      	ldrh	r3, [r7, #14]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d105      	bne.n	800468a <dec_lock+0x5a>
 800467e:	4a09      	ldr	r2, [pc, #36]	; (80046a4 <dec_lock+0x74>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	4413      	add	r3, r2
 8004686:	2200      	movs	r2, #0
 8004688:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	737b      	strb	r3, [r7, #13]
 800468e:	e001      	b.n	8004694 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004690:	2302      	movs	r3, #2
 8004692:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004694:	7b7b      	ldrb	r3, [r7, #13]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	2000004c 	.word	0x2000004c

080046a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	e010      	b.n	80046d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80046b6:	4a0d      	ldr	r2, [pc, #52]	; (80046ec <clear_lock+0x44>)
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	4413      	add	r3, r2
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d105      	bne.n	80046d2 <clear_lock+0x2a>
 80046c6:	4a09      	ldr	r2, [pc, #36]	; (80046ec <clear_lock+0x44>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	4413      	add	r3, r2
 80046ce:	2200      	movs	r2, #0
 80046d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	3301      	adds	r3, #1
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d9eb      	bls.n	80046b6 <clear_lock+0xe>
	}
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	2000004c 	.word	0x2000004c

080046f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	78db      	ldrb	r3, [r3, #3]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d034      	beq.n	800476e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	7858      	ldrb	r0, [r3, #1]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004714:	2301      	movs	r3, #1
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	f7ff fd40 	bl	800419c <disk_write>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <sync_window+0x38>
			res = FR_DISK_ERR;
 8004722:	2301      	movs	r3, #1
 8004724:	73fb      	strb	r3, [r7, #15]
 8004726:	e022      	b.n	800476e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	1ad2      	subs	r2, r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	429a      	cmp	r2, r3
 800473c:	d217      	bcs.n	800476e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	789b      	ldrb	r3, [r3, #2]
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	e010      	b.n	8004768 <sync_window+0x78>
					wsect += fs->fsize;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4413      	add	r3, r2
 800474e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7858      	ldrb	r0, [r3, #1]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800475a:	2301      	movs	r3, #1
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	f7ff fd1d 	bl	800419c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3b01      	subs	r3, #1
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d8eb      	bhi.n	8004746 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800476e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d01b      	beq.n	80047c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7ff ffad 	bl	80046f0 <sync_window>
 8004796:	4603      	mov	r3, r0
 8004798:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d113      	bne.n	80047c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	7858      	ldrb	r0, [r3, #1]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80047aa:	2301      	movs	r3, #1
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	f7ff fcd5 	bl	800415c <disk_read>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80047b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80047c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ff87 	bl	80046f0 <sync_window>
 80047e2:	4603      	mov	r3, r0
 80047e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d158      	bne.n	800489e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b03      	cmp	r3, #3
 80047f2:	d148      	bne.n	8004886 <sync_fs+0xb2>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	791b      	ldrb	r3, [r3, #4]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d144      	bne.n	8004886 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3330      	adds	r3, #48	; 0x30
 8004800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004804:	2100      	movs	r1, #0
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fda9 	bl	800435e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	3330      	adds	r3, #48	; 0x30
 8004810:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004814:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fd38 	bl	800428e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3330      	adds	r3, #48	; 0x30
 8004822:	4921      	ldr	r1, [pc, #132]	; (80048a8 <sync_fs+0xd4>)
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fd4d 	bl	80042c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3330      	adds	r3, #48	; 0x30
 800482e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004832:	491e      	ldr	r1, [pc, #120]	; (80048ac <sync_fs+0xd8>)
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fd45 	bl	80042c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3330      	adds	r3, #48	; 0x30
 800483e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	4619      	mov	r1, r3
 8004848:	4610      	mov	r0, r2
 800484a:	f7ff fd3b 	bl	80042c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3330      	adds	r3, #48	; 0x30
 8004852:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7ff fd31 	bl	80042c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	7858      	ldrb	r0, [r3, #1]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487a:	2301      	movs	r3, #1
 800487c:	f7ff fc8e 	bl	800419c <disk_write>
			fs->fsi_flag = 0;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	785b      	ldrb	r3, [r3, #1]
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fca4 	bl	80041dc <disk_ioctl>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <sync_fs+0xca>
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	41615252 	.word	0x41615252
 80048ac:	61417272 	.word	0x61417272

080048b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	3b02      	subs	r3, #2
 80048be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	3b02      	subs	r3, #2
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d301      	bcc.n	80048d0 <clust2sect+0x20>
 80048cc:	2300      	movs	r3, #0
 80048ce:	e008      	b.n	80048e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	895b      	ldrh	r3, [r3, #10]
 80048d4:	461a      	mov	r2, r3
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	fb03 f202 	mul.w	r2, r3, r2
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	4413      	add	r3, r2
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b086      	sub	sp, #24
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d904      	bls.n	800490e <get_fat+0x20>
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	695b      	ldr	r3, [r3, #20]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <get_fat+0x26>
		val = 1;	/* Internal error */
 800490e:	2301      	movs	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e08f      	b.n	8004a34 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004918:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	2b03      	cmp	r3, #3
 8004920:	d062      	beq.n	80049e8 <get_fat+0xfa>
 8004922:	2b03      	cmp	r3, #3
 8004924:	dc7c      	bgt.n	8004a20 <get_fat+0x132>
 8004926:	2b01      	cmp	r3, #1
 8004928:	d002      	beq.n	8004930 <get_fat+0x42>
 800492a:	2b02      	cmp	r3, #2
 800492c:	d042      	beq.n	80049b4 <get_fat+0xc6>
 800492e:	e077      	b.n	8004a20 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6a1a      	ldr	r2, [r3, #32]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	0a5b      	lsrs	r3, r3, #9
 8004946:	4413      	add	r3, r2
 8004948:	4619      	mov	r1, r3
 800494a:	6938      	ldr	r0, [r7, #16]
 800494c:	f7ff ff14 	bl	8004778 <move_window>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d167      	bne.n	8004a26 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	60fa      	str	r2, [r7, #12]
 800495c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4413      	add	r3, r2
 8004964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004968:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	6a1a      	ldr	r2, [r3, #32]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	4413      	add	r3, r2
 8004974:	4619      	mov	r1, r3
 8004976:	6938      	ldr	r0, [r7, #16]
 8004978:	f7ff fefe 	bl	8004778 <move_window>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d153      	bne.n	8004a2a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	461a      	mov	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4313      	orrs	r3, r2
 8004998:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <get_fat+0xbc>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	091b      	lsrs	r3, r3, #4
 80049a8:	e002      	b.n	80049b0 <get_fat+0xc2>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b0:	617b      	str	r3, [r7, #20]
			break;
 80049b2:	e03f      	b.n	8004a34 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	4413      	add	r3, r2
 80049be:	4619      	mov	r1, r3
 80049c0:	6938      	ldr	r0, [r7, #16]
 80049c2:	f7ff fed9 	bl	8004778 <move_window>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d130      	bne.n	8004a2e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	005b      	lsls	r3, r3, #1
 80049d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80049da:	4413      	add	r3, r2
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff fc1b 	bl	8004218 <ld_word>
 80049e2:	4603      	mov	r3, r0
 80049e4:	617b      	str	r3, [r7, #20]
			break;
 80049e6:	e025      	b.n	8004a34 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	6a1a      	ldr	r2, [r3, #32]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	09db      	lsrs	r3, r3, #7
 80049f0:	4413      	add	r3, r2
 80049f2:	4619      	mov	r1, r3
 80049f4:	6938      	ldr	r0, [r7, #16]
 80049f6:	f7ff febf 	bl	8004778 <move_window>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d118      	bne.n	8004a32 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004a0e:	4413      	add	r3, r2
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fc19 	bl	8004248 <ld_dword>
 8004a16:	4603      	mov	r3, r0
 8004a18:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004a1c:	617b      	str	r3, [r7, #20]
			break;
 8004a1e:	e009      	b.n	8004a34 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e006      	b.n	8004a34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a26:	bf00      	nop
 8004a28:	e004      	b.n	8004a34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a2a:	bf00      	nop
 8004a2c:	e002      	b.n	8004a34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004a32:	bf00      	nop
		}
	}

	return val;
 8004a34:	697b      	ldr	r3, [r7, #20]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004a3e:	b590      	push	{r4, r7, lr}
 8004a40:	b089      	sub	sp, #36	; 0x24
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	f240 80d2 	bls.w	8004bfa <put_fat+0x1bc>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	f080 80cc 	bcs.w	8004bfa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	f000 8096 	beq.w	8004b98 <put_fat+0x15a>
 8004a6c:	2b03      	cmp	r3, #3
 8004a6e:	f300 80cd 	bgt.w	8004c0c <put_fat+0x1ce>
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d002      	beq.n	8004a7c <put_fat+0x3e>
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d06e      	beq.n	8004b58 <put_fat+0x11a>
 8004a7a:	e0c7      	b.n	8004c0c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	085b      	lsrs	r3, r3, #1
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4413      	add	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1a      	ldr	r2, [r3, #32]
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	0a5b      	lsrs	r3, r3, #9
 8004a92:	4413      	add	r3, r2
 8004a94:	4619      	mov	r1, r3
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff fe6e 	bl	8004778 <move_window>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004aa0:	7ffb      	ldrb	r3, [r7, #31]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 80ab 	bne.w	8004bfe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	61b9      	str	r1, [r7, #24]
 8004ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab8:	4413      	add	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00d      	beq.n	8004ae2 <put_fat+0xa4>
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	b25b      	sxtb	r3, r3
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	b25a      	sxtb	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	011b      	lsls	r3, r3, #4
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	4313      	orrs	r3, r2
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	e001      	b.n	8004ae6 <put_fat+0xa8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a1a      	ldr	r2, [r3, #32]
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	0a5b      	lsrs	r3, r3, #9
 8004af8:	4413      	add	r3, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7ff fe3b 	bl	8004778 <move_window>
 8004b02:	4603      	mov	r3, r0
 8004b04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b06:	7ffb      	ldrb	r3, [r7, #31]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d17a      	bne.n	8004c02 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b18:	4413      	add	r3, r2
 8004b1a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d003      	beq.n	8004b2e <put_fat+0xf0>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	e00e      	b.n	8004b4c <put_fat+0x10e>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	b25b      	sxtb	r3, r3
 8004b34:	f023 030f 	bic.w	r3, r3, #15
 8004b38:	b25a      	sxtb	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	b25b      	sxtb	r3, r3
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	b25b      	sxtb	r3, r3
 8004b46:	4313      	orrs	r3, r2
 8004b48:	b25b      	sxtb	r3, r3
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	70da      	strb	r2, [r3, #3]
			break;
 8004b56:	e059      	b.n	8004c0c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a1a      	ldr	r2, [r3, #32]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	0a1b      	lsrs	r3, r3, #8
 8004b60:	4413      	add	r3, r2
 8004b62:	4619      	mov	r1, r3
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f7ff fe07 	bl	8004778 <move_window>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004b6e:	7ffb      	ldrb	r3, [r7, #31]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d148      	bne.n	8004c06 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004b82:	4413      	add	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	b292      	uxth	r2, r2
 8004b88:	4611      	mov	r1, r2
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fb7f 	bl	800428e <st_word>
			fs->wflag = 1;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2201      	movs	r2, #1
 8004b94:	70da      	strb	r2, [r3, #3]
			break;
 8004b96:	e039      	b.n	8004c0c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1a      	ldr	r2, [r3, #32]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	09db      	lsrs	r3, r3, #7
 8004ba0:	4413      	add	r3, r2
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fde7 	bl	8004778 <move_window>
 8004baa:	4603      	mov	r3, r0
 8004bac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004bae:	7ffb      	ldrb	r3, [r7, #31]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d12a      	bne.n	8004c0a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004bc8:	4413      	add	r3, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fb3c 	bl	8004248 <ld_dword>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004bd6:	4323      	orrs	r3, r4
 8004bd8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004be8:	4413      	add	r3, r2
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff fb69 	bl	80042c4 <st_dword>
			fs->wflag = 1;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	70da      	strb	r2, [r3, #3]
			break;
 8004bf8:	e008      	b.n	8004c0c <put_fat+0x1ce>
		}
	}
 8004bfa:	bf00      	nop
 8004bfc:	e006      	b.n	8004c0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004bfe:	bf00      	nop
 8004c00:	e004      	b.n	8004c0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004c02:	bf00      	nop
 8004c04:	e002      	b.n	8004c0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004c06:	bf00      	nop
 8004c08:	e000      	b.n	8004c0c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004c0a:	bf00      	nop
	return res;
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3724      	adds	r7, #36	; 0x24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd90      	pop	{r4, r7, pc}

08004c16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b088      	sub	sp, #32
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004c22:	2300      	movs	r3, #0
 8004c24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d904      	bls.n	8004c3c <remove_chain+0x26>
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d301      	bcc.n	8004c40 <remove_chain+0x2a>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e04b      	b.n	8004cd8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	69b8      	ldr	r0, [r7, #24]
 8004c4e:	f7ff fef6 	bl	8004a3e <put_fat>
 8004c52:	4603      	mov	r3, r0
 8004c54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004c56:	7ffb      	ldrb	r3, [r7, #31]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <remove_chain+0x4a>
 8004c5c:	7ffb      	ldrb	r3, [r7, #31]
 8004c5e:	e03b      	b.n	8004cd8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7ff fe43 	bl	80048ee <get_fat>
 8004c68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d031      	beq.n	8004cd4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <remove_chain+0x64>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e02e      	b.n	8004cd8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c80:	d101      	bne.n	8004c86 <remove_chain+0x70>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e028      	b.n	8004cd8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004c86:	2200      	movs	r2, #0
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	69b8      	ldr	r0, [r7, #24]
 8004c8c:	f7ff fed7 	bl	8004a3e <put_fat>
 8004c90:	4603      	mov	r3, r0
 8004c92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004c94:	7ffb      	ldrb	r3, [r7, #31]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <remove_chain+0x88>
 8004c9a:	7ffb      	ldrb	r3, [r7, #31]
 8004c9c:	e01c      	b.n	8004cd8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	691a      	ldr	r2, [r3, #16]
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	695b      	ldr	r3, [r3, #20]
 8004ca6:	3b02      	subs	r3, #2
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d20b      	bcs.n	8004cc4 <remove_chain+0xae>
			fs->free_clst++;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	1c5a      	adds	r2, r3, #1
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	791b      	ldrb	r3, [r3, #4]
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d3c6      	bcc.n	8004c60 <remove_chain+0x4a>
 8004cd2:	e000      	b.n	8004cd6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004cd4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3720      	adds	r7, #32
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <create_chain+0x2c>
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d31b      	bcc.n	8004d44 <create_chain+0x64>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e018      	b.n	8004d44 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004d12:	6839      	ldr	r1, [r7, #0]
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff fdea 	bl	80048ee <get_fat>
 8004d1a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d801      	bhi.n	8004d26 <create_chain+0x46>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e070      	b.n	8004e08 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d2c:	d101      	bne.n	8004d32 <create_chain+0x52>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	e06a      	b.n	8004e08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d201      	bcs.n	8004d40 <create_chain+0x60>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	e063      	b.n	8004e08 <create_chain+0x128>
		scl = clst;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	69fa      	ldr	r2, [r7, #28]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d307      	bcc.n	8004d68 <create_chain+0x88>
				ncl = 2;
 8004d58:	2302      	movs	r3, #2
 8004d5a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d901      	bls.n	8004d68 <create_chain+0x88>
 8004d64:	2300      	movs	r3, #0
 8004d66:	e04f      	b.n	8004e08 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004d68:	69f9      	ldr	r1, [r7, #28]
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff fdbf 	bl	80048ee <get_fat>
 8004d70:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00e      	beq.n	8004d96 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d003      	beq.n	8004d86 <create_chain+0xa6>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d84:	d101      	bne.n	8004d8a <create_chain+0xaa>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	e03e      	b.n	8004e08 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004d8a:	69fa      	ldr	r2, [r7, #28]
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d1da      	bne.n	8004d48 <create_chain+0x68>
 8004d92:	2300      	movs	r3, #0
 8004d94:	e038      	b.n	8004e08 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004d96:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d9c:	69f9      	ldr	r1, [r7, #28]
 8004d9e:	6938      	ldr	r0, [r7, #16]
 8004da0:	f7ff fe4d 	bl	8004a3e <put_fat>
 8004da4:	4603      	mov	r3, r0
 8004da6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <create_chain+0xe2>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d006      	beq.n	8004dc2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	6839      	ldr	r1, [r7, #0]
 8004db8:	6938      	ldr	r0, [r7, #16]
 8004dba:	f7ff fe40 	bl	8004a3e <put_fat>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d116      	bne.n	8004df6 <create_chain+0x116>
		fs->last_clst = ncl;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	69fa      	ldr	r2, [r7, #28]
 8004dcc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	3b02      	subs	r3, #2
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d804      	bhi.n	8004de6 <create_chain+0x106>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	1e5a      	subs	r2, r3, #1
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	791b      	ldrb	r3, [r3, #4]
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	711a      	strb	r2, [r3, #4]
 8004df4:	e007      	b.n	8004e06 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d102      	bne.n	8004e02 <create_chain+0x122>
 8004dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e00:	e000      	b.n	8004e04 <create_chain+0x124>
 8004e02:	2301      	movs	r3, #1
 8004e04:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004e06:	69fb      	ldr	r3, [r7, #28]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3720      	adds	r7, #32
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	3304      	adds	r3, #4
 8004e26:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	0a5b      	lsrs	r3, r3, #9
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	8952      	ldrh	r2, [r2, #10]
 8004e30:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	1d1a      	adds	r2, r3, #4
 8004e3a:	613a      	str	r2, [r7, #16]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <clmt_clust+0x3a>
 8004e46:	2300      	movs	r3, #0
 8004e48:	e010      	b.n	8004e6c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d307      	bcc.n	8004e62 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	617b      	str	r3, [r7, #20]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004e60:	e7e9      	b.n	8004e36 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004e62:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4413      	add	r3, r2
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e8e:	d204      	bcs.n	8004e9a <dir_sdi+0x22>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <dir_sdi+0x26>
		return FR_INT_ERR;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e063      	b.n	8004f66 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <dir_sdi+0x46>
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <dir_sdi+0x46>
		clst = fs->dirbase;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10c      	bne.n	8004ede <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	095b      	lsrs	r3, r3, #5
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	8912      	ldrh	r2, [r2, #8]
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d301      	bcc.n	8004ed4 <dir_sdi+0x5c>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e048      	b.n	8004f66 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	61da      	str	r2, [r3, #28]
 8004edc:	e029      	b.n	8004f32 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	895b      	ldrh	r3, [r3, #10]
 8004ee2:	025b      	lsls	r3, r3, #9
 8004ee4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ee6:	e019      	b.n	8004f1c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7ff fcfe 	bl	80048ee <get_fat>
 8004ef2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004efa:	d101      	bne.n	8004f00 <dir_sdi+0x88>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e032      	b.n	8004f66 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d904      	bls.n	8004f10 <dir_sdi+0x98>
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d301      	bcc.n	8004f14 <dir_sdi+0x9c>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e028      	b.n	8004f66 <dir_sdi+0xee>
			ofs -= csz;
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d2e1      	bcs.n	8004ee8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	6938      	ldr	r0, [r7, #16]
 8004f28:	f7ff fcc2 	bl	80048b0 <clust2sect>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <dir_sdi+0xcc>
 8004f40:	2302      	movs	r3, #2
 8004f42:	e010      	b.n	8004f66 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	0a5b      	lsrs	r3, r3, #9
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5e:	441a      	add	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b086      	sub	sp, #24
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
 8004f76:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	3320      	adds	r3, #32
 8004f84:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <dir_next+0x28>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f94:	d301      	bcc.n	8004f9a <dir_next+0x2c>
 8004f96:	2304      	movs	r3, #4
 8004f98:	e0aa      	b.n	80050f0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f040 8098 	bne.w	80050d6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	1c5a      	adds	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10b      	bne.n	8004fd0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	8912      	ldrh	r2, [r2, #8]
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	f0c0 8088 	bcc.w	80050d6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	61da      	str	r2, [r3, #28]
 8004fcc:	2304      	movs	r3, #4
 8004fce:	e08f      	b.n	80050f0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	0a5b      	lsrs	r3, r3, #9
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	8952      	ldrh	r2, [r2, #10]
 8004fd8:	3a01      	subs	r2, #1
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d17a      	bne.n	80050d6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	4610      	mov	r0, r2
 8004fea:	f7ff fc80 	bl	80048ee <get_fat>
 8004fee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d801      	bhi.n	8004ffa <dir_next+0x8c>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e07a      	b.n	80050f0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005000:	d101      	bne.n	8005006 <dir_next+0x98>
 8005002:	2301      	movs	r3, #1
 8005004:	e074      	b.n	80050f0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	697a      	ldr	r2, [r7, #20]
 800500c:	429a      	cmp	r2, r3
 800500e:	d358      	bcc.n	80050c2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d104      	bne.n	8005020 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	61da      	str	r2, [r3, #28]
 800501c:	2304      	movs	r3, #4
 800501e:	e067      	b.n	80050f0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f7ff fe59 	bl	8004ce0 <create_chain>
 800502e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <dir_next+0xcc>
 8005036:	2307      	movs	r3, #7
 8005038:	e05a      	b.n	80050f0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <dir_next+0xd6>
 8005040:	2302      	movs	r3, #2
 8005042:	e055      	b.n	80050f0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800504a:	d101      	bne.n	8005050 <dir_next+0xe2>
 800504c:	2301      	movs	r3, #1
 800504e:	e04f      	b.n	80050f0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	f7ff fb4d 	bl	80046f0 <sync_window>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <dir_next+0xf2>
 800505c:	2301      	movs	r3, #1
 800505e:	e047      	b.n	80050f0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	3330      	adds	r3, #48	; 0x30
 8005064:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff f977 	bl	800435e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005070:	2300      	movs	r3, #0
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	6979      	ldr	r1, [r7, #20]
 8005076:	68f8      	ldr	r0, [r7, #12]
 8005078:	f7ff fc1a 	bl	80048b0 <clust2sect>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	62da      	str	r2, [r3, #44]	; 0x2c
 8005082:	e012      	b.n	80050aa <dir_next+0x13c>
						fs->wflag = 1;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f7ff fb30 	bl	80046f0 <sync_window>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <dir_next+0x12c>
 8005096:	2301      	movs	r3, #1
 8005098:	e02a      	b.n	80050f0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	3301      	adds	r3, #1
 800509e:	613b      	str	r3, [r7, #16]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	895b      	ldrh	r3, [r3, #10]
 80050ae:	461a      	mov	r2, r3
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d3e6      	bcc.n	8005084 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad2      	subs	r2, r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80050c8:	6979      	ldr	r1, [r7, #20]
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f7ff fbf0 	bl	80048b0 <clust2sect>
 80050d0:	4602      	mov	r2, r0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005108:	2100      	movs	r1, #0
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff feb4 	bl	8004e78 <dir_sdi>
 8005110:	4603      	mov	r3, r0
 8005112:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005114:	7dfb      	ldrb	r3, [r7, #23]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d12b      	bne.n	8005172 <dir_alloc+0x7a>
		n = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	4619      	mov	r1, r3
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f7ff fb27 	bl	8004778 <move_window>
 800512a:	4603      	mov	r3, r0
 800512c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d11d      	bne.n	8005170 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2be5      	cmp	r3, #229	; 0xe5
 800513c:	d004      	beq.n	8005148 <dir_alloc+0x50>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d107      	bne.n	8005158 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	3301      	adds	r3, #1
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d102      	bne.n	800515c <dir_alloc+0x64>
 8005156:	e00c      	b.n	8005172 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005158:	2300      	movs	r3, #0
 800515a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800515c:	2101      	movs	r1, #1
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7ff ff05 	bl	8004f6e <dir_next>
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d0d7      	beq.n	800511e <dir_alloc+0x26>
 800516e:	e000      	b.n	8005172 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005170:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005172:	7dfb      	ldrb	r3, [r7, #23]
 8005174:	2b04      	cmp	r3, #4
 8005176:	d101      	bne.n	800517c <dir_alloc+0x84>
 8005178:	2307      	movs	r3, #7
 800517a:	75fb      	strb	r3, [r7, #23]
	return res;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}

08005186 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005186:	b580      	push	{r7, lr}
 8005188:	b084      	sub	sp, #16
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	331a      	adds	r3, #26
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff f83f 	bl	8004218 <ld_word>
 800519a:	4603      	mov	r3, r0
 800519c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d109      	bne.n	80051ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	3314      	adds	r3, #20
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff f834 	bl	8004218 <ld_word>
 80051b0:	4603      	mov	r3, r0
 80051b2:	041b      	lsls	r3, r3, #16
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	331a      	adds	r3, #26
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	b292      	uxth	r2, r2
 80051d8:	4611      	mov	r1, r2
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff f857 	bl	800428e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d109      	bne.n	80051fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	f103 0214 	add.w	r2, r3, #20
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0c1b      	lsrs	r3, r3, #16
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f7ff f849 	bl	800428e <st_word>
	}
}
 80051fc:	bf00      	nop
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005212:	2100      	movs	r1, #0
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fe2f 	bl	8004e78 <dir_sdi>
 800521a:	4603      	mov	r3, r0
 800521c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800521e:	7dfb      	ldrb	r3, [r7, #23]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <dir_find+0x24>
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	e03e      	b.n	80052a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	4619      	mov	r1, r3
 800522e:	6938      	ldr	r0, [r7, #16]
 8005230:	f7ff faa2 	bl	8004778 <move_window>
 8005234:	4603      	mov	r3, r0
 8005236:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d12f      	bne.n	800529e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <dir_find+0x4e>
 800524c:	2304      	movs	r3, #4
 800524e:	75fb      	strb	r3, [r7, #23]
 8005250:	e028      	b.n	80052a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	330b      	adds	r3, #11
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800525e:	b2da      	uxtb	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	330b      	adds	r3, #11
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	f003 0308 	and.w	r3, r3, #8
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <dir_find+0x86>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a18      	ldr	r0, [r3, #32]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	3324      	adds	r3, #36	; 0x24
 800527c:	220b      	movs	r2, #11
 800527e:	4619      	mov	r1, r3
 8005280:	f7ff f888 	bl	8004394 <mem_cmp>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800528a:	2100      	movs	r1, #0
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7ff fe6e 	bl	8004f6e <dir_next>
 8005292:	4603      	mov	r3, r0
 8005294:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005296:	7dfb      	ldrb	r3, [r7, #23]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0c5      	beq.n	8005228 <dir_find+0x24>
 800529c:	e002      	b.n	80052a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800529e:	bf00      	nop
 80052a0:	e000      	b.n	80052a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80052a2:	bf00      	nop

	return res;
 80052a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80052bc:	2101      	movs	r1, #1
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff ff1a 	bl	80050f8 <dir_alloc>
 80052c4:	4603      	mov	r3, r0
 80052c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d11c      	bne.n	8005308 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	4619      	mov	r1, r3
 80052d4:	68b8      	ldr	r0, [r7, #8]
 80052d6:	f7ff fa4f 	bl	8004778 <move_window>
 80052da:	4603      	mov	r3, r0
 80052dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80052de:	7bfb      	ldrb	r3, [r7, #15]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d111      	bne.n	8005308 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	2220      	movs	r2, #32
 80052ea:	2100      	movs	r1, #0
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7ff f836 	bl	800435e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a18      	ldr	r0, [r3, #32]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3324      	adds	r3, #36	; 0x24
 80052fa:	220b      	movs	r2, #11
 80052fc:	4619      	mov	r1, r3
 80052fe:	f7ff f80d 	bl	800431c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2201      	movs	r2, #1
 8005306:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005308:	7bfb      	ldrb	r3, [r7, #15]
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
	...

08005314 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b088      	sub	sp, #32
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	3324      	adds	r3, #36	; 0x24
 8005328:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800532a:	220b      	movs	r2, #11
 800532c:	2120      	movs	r1, #32
 800532e:	68b8      	ldr	r0, [r7, #8]
 8005330:	f7ff f815 	bl	800435e <mem_set>
	si = i = 0; ni = 8;
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	2308      	movs	r3, #8
 800533e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	1c5a      	adds	r2, r3, #1
 8005344:	61fa      	str	r2, [r7, #28]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	4413      	add	r3, r2
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800534e:	7efb      	ldrb	r3, [r7, #27]
 8005350:	2b20      	cmp	r3, #32
 8005352:	d94e      	bls.n	80053f2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005354:	7efb      	ldrb	r3, [r7, #27]
 8005356:	2b2f      	cmp	r3, #47	; 0x2f
 8005358:	d006      	beq.n	8005368 <create_name+0x54>
 800535a:	7efb      	ldrb	r3, [r7, #27]
 800535c:	2b5c      	cmp	r3, #92	; 0x5c
 800535e:	d110      	bne.n	8005382 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005360:	e002      	b.n	8005368 <create_name+0x54>
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	3301      	adds	r3, #1
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b2f      	cmp	r3, #47	; 0x2f
 8005372:	d0f6      	beq.n	8005362 <create_name+0x4e>
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	4413      	add	r3, r2
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b5c      	cmp	r3, #92	; 0x5c
 800537e:	d0f0      	beq.n	8005362 <create_name+0x4e>
			break;
 8005380:	e038      	b.n	80053f4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8005382:	7efb      	ldrb	r3, [r7, #27]
 8005384:	2b2e      	cmp	r3, #46	; 0x2e
 8005386:	d003      	beq.n	8005390 <create_name+0x7c>
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	429a      	cmp	r2, r3
 800538e:	d30c      	bcc.n	80053aa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b0b      	cmp	r3, #11
 8005394:	d002      	beq.n	800539c <create_name+0x88>
 8005396:	7efb      	ldrb	r3, [r7, #27]
 8005398:	2b2e      	cmp	r3, #46	; 0x2e
 800539a:	d001      	beq.n	80053a0 <create_name+0x8c>
 800539c:	2306      	movs	r3, #6
 800539e:	e044      	b.n	800542a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80053a0:	2308      	movs	r3, #8
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	230b      	movs	r3, #11
 80053a6:	617b      	str	r3, [r7, #20]
			continue;
 80053a8:	e022      	b.n	80053f0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80053aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da04      	bge.n	80053bc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80053b2:	7efb      	ldrb	r3, [r7, #27]
 80053b4:	3b80      	subs	r3, #128	; 0x80
 80053b6:	4a1f      	ldr	r2, [pc, #124]	; (8005434 <create_name+0x120>)
 80053b8:	5cd3      	ldrb	r3, [r2, r3]
 80053ba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80053bc:	7efb      	ldrb	r3, [r7, #27]
 80053be:	4619      	mov	r1, r3
 80053c0:	481d      	ldr	r0, [pc, #116]	; (8005438 <create_name+0x124>)
 80053c2:	f7ff f80e 	bl	80043e2 <chk_chr>
 80053c6:	4603      	mov	r3, r0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d001      	beq.n	80053d0 <create_name+0xbc>
 80053cc:	2306      	movs	r3, #6
 80053ce:	e02c      	b.n	800542a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80053d0:	7efb      	ldrb	r3, [r7, #27]
 80053d2:	2b60      	cmp	r3, #96	; 0x60
 80053d4:	d905      	bls.n	80053e2 <create_name+0xce>
 80053d6:	7efb      	ldrb	r3, [r7, #27]
 80053d8:	2b7a      	cmp	r3, #122	; 0x7a
 80053da:	d802      	bhi.n	80053e2 <create_name+0xce>
 80053dc:	7efb      	ldrb	r3, [r7, #27]
 80053de:	3b20      	subs	r3, #32
 80053e0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1c5a      	adds	r2, r3, #1
 80053e6:	613a      	str	r2, [r7, #16]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	4413      	add	r3, r2
 80053ec:	7efa      	ldrb	r2, [r7, #27]
 80053ee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80053f0:	e7a6      	b.n	8005340 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80053f2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	441a      	add	r2, r3
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <create_name+0xf4>
 8005404:	2306      	movs	r3, #6
 8005406:	e010      	b.n	800542a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2be5      	cmp	r3, #229	; 0xe5
 800540e:	d102      	bne.n	8005416 <create_name+0x102>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2205      	movs	r2, #5
 8005414:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005416:	7efb      	ldrb	r3, [r7, #27]
 8005418:	2b20      	cmp	r3, #32
 800541a:	d801      	bhi.n	8005420 <create_name+0x10c>
 800541c:	2204      	movs	r2, #4
 800541e:	e000      	b.n	8005422 <create_name+0x10e>
 8005420:	2200      	movs	r2, #0
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	330b      	adds	r3, #11
 8005426:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005428:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800542a:	4618      	mov	r0, r3
 800542c:	3720      	adds	r7, #32
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}
 8005432:	bf00      	nop
 8005434:	08006570 	.word	0x08006570
 8005438:	080064e4 	.word	0x080064e4

0800543c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b086      	sub	sp, #24
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005450:	e002      	b.n	8005458 <follow_path+0x1c>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	3301      	adds	r3, #1
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b2f      	cmp	r3, #47	; 0x2f
 800545e:	d0f8      	beq.n	8005452 <follow_path+0x16>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b5c      	cmp	r3, #92	; 0x5c
 8005466:	d0f4      	beq.n	8005452 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2200      	movs	r2, #0
 800546c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b1f      	cmp	r3, #31
 8005474:	d80a      	bhi.n	800548c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800547e:	2100      	movs	r1, #0
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fcf9 	bl	8004e78 <dir_sdi>
 8005486:	4603      	mov	r3, r0
 8005488:	75fb      	strb	r3, [r7, #23]
 800548a:	e043      	b.n	8005514 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800548c:	463b      	mov	r3, r7
 800548e:	4619      	mov	r1, r3
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff ff3f 	bl	8005314 <create_name>
 8005496:	4603      	mov	r3, r0
 8005498:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800549a:	7dfb      	ldrb	r3, [r7, #23]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d134      	bne.n	800550a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f7ff feaf 	bl	8005204 <dir_find>
 80054a6:	4603      	mov	r3, r0
 80054a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80054b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80054b2:	7dfb      	ldrb	r3, [r7, #23]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d127      	bne.n	800550e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80054be:	7afb      	ldrb	r3, [r7, #11]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d122      	bne.n	800550e <follow_path+0xd2>
 80054c8:	2305      	movs	r3, #5
 80054ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80054cc:	e01f      	b.n	800550e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80054ce:	7afb      	ldrb	r3, [r7, #11]
 80054d0:	f003 0304 	and.w	r3, r3, #4
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d11c      	bne.n	8005512 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	799b      	ldrb	r3, [r3, #6]
 80054dc:	f003 0310 	and.w	r3, r3, #16
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80054e4:	2305      	movs	r3, #5
 80054e6:	75fb      	strb	r3, [r7, #23]
 80054e8:	e014      	b.n	8005514 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f8:	4413      	add	r3, r2
 80054fa:	4619      	mov	r1, r3
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f7ff fe42 	bl	8005186 <ld_clust>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005508:	e7c0      	b.n	800548c <follow_path+0x50>
			if (res != FR_OK) break;
 800550a:	bf00      	nop
 800550c:	e002      	b.n	8005514 <follow_path+0xd8>
				break;
 800550e:	bf00      	nop
 8005510:	e000      	b.n	8005514 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005512:	bf00      	nop
			}
		}
	}

	return res;
 8005514:	7dfb      	ldrb	r3, [r7, #23]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800551e:	b480      	push	{r7}
 8005520:	b087      	sub	sp, #28
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800552a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d031      	beq.n	8005598 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e002      	b.n	8005542 <get_ldnumber+0x24>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	3301      	adds	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b20      	cmp	r3, #32
 8005548:	d903      	bls.n	8005552 <get_ldnumber+0x34>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b3a      	cmp	r3, #58	; 0x3a
 8005550:	d1f4      	bne.n	800553c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b3a      	cmp	r3, #58	; 0x3a
 8005558:	d11c      	bne.n	8005594 <get_ldnumber+0x76>
			tp = *path;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	1c5a      	adds	r2, r3, #1
 8005564:	60fa      	str	r2, [r7, #12]
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	3b30      	subs	r3, #48	; 0x30
 800556a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b09      	cmp	r3, #9
 8005570:	d80e      	bhi.n	8005590 <get_ldnumber+0x72>
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	429a      	cmp	r2, r3
 8005578:	d10a      	bne.n	8005590 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d107      	bne.n	8005590 <get_ldnumber+0x72>
					vol = (int)i;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	3301      	adds	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	e002      	b.n	800559a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005598:	693b      	ldr	r3, [r7, #16]
}
 800559a:	4618      	mov	r0, r3
 800559c:	371c      	adds	r7, #28
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	70da      	strb	r2, [r3, #3]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80055c0:	6839      	ldr	r1, [r7, #0]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff f8d8 	bl	8004778 <move_window>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <check_fs+0x2a>
 80055ce:	2304      	movs	r3, #4
 80055d0:	e038      	b.n	8005644 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3330      	adds	r3, #48	; 0x30
 80055d6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe fe1c 	bl	8004218 <ld_word>
 80055e0:	4603      	mov	r3, r0
 80055e2:	461a      	mov	r2, r3
 80055e4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d001      	beq.n	80055f0 <check_fs+0x48>
 80055ec:	2303      	movs	r3, #3
 80055ee:	e029      	b.n	8005644 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055f6:	2be9      	cmp	r3, #233	; 0xe9
 80055f8:	d009      	beq.n	800560e <check_fs+0x66>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005600:	2beb      	cmp	r3, #235	; 0xeb
 8005602:	d11e      	bne.n	8005642 <check_fs+0x9a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800560a:	2b90      	cmp	r3, #144	; 0x90
 800560c:	d119      	bne.n	8005642 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	3330      	adds	r3, #48	; 0x30
 8005612:	3336      	adds	r3, #54	; 0x36
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe fe17 	bl	8004248 <ld_dword>
 800561a:	4603      	mov	r3, r0
 800561c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005620:	4a0a      	ldr	r2, [pc, #40]	; (800564c <check_fs+0xa4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d101      	bne.n	800562a <check_fs+0x82>
 8005626:	2300      	movs	r3, #0
 8005628:	e00c      	b.n	8005644 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3330      	adds	r3, #48	; 0x30
 800562e:	3352      	adds	r3, #82	; 0x52
 8005630:	4618      	mov	r0, r3
 8005632:	f7fe fe09 	bl	8004248 <ld_dword>
 8005636:	4603      	mov	r3, r0
 8005638:	4a05      	ldr	r2, [pc, #20]	; (8005650 <check_fs+0xa8>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d101      	bne.n	8005642 <check_fs+0x9a>
 800563e:	2300      	movs	r3, #0
 8005640:	e000      	b.n	8005644 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005642:	2302      	movs	r3, #2
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	00544146 	.word	0x00544146
 8005650:	33544146 	.word	0x33544146

08005654 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b096      	sub	sp, #88	; 0x58
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	4613      	mov	r3, r2
 8005660:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005668:	68f8      	ldr	r0, [r7, #12]
 800566a:	f7ff ff58 	bl	800551e <get_ldnumber>
 800566e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005672:	2b00      	cmp	r3, #0
 8005674:	da01      	bge.n	800567a <find_volume+0x26>
 8005676:	230b      	movs	r3, #11
 8005678:	e22e      	b.n	8005ad8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800567a:	4aa8      	ldr	r2, [pc, #672]	; (800591c <find_volume+0x2c8>)
 800567c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800567e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005682:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <find_volume+0x3a>
 800568a:	230c      	movs	r3, #12
 800568c:	e224      	b.n	8005ad8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005692:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	f023 0301 	bic.w	r3, r3, #1
 800569a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800569c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01a      	beq.n	80056da <find_volume+0x86>
		stat = disk_status(fs->drv);
 80056a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a6:	785b      	ldrb	r3, [r3, #1]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fe fd17 	bl	80040dc <disk_status>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80056b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10c      	bne.n	80056da <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80056c0:	79fb      	ldrb	r3, [r7, #7]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <find_volume+0x82>
 80056c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056ca:	f003 0304 	and.w	r3, r3, #4
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80056d2:	230a      	movs	r3, #10
 80056d4:	e200      	b.n	8005ad8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80056d6:	2300      	movs	r3, #0
 80056d8:	e1fe      	b.n	8005ad8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80056da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80056e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e2:	b2da      	uxtb	r2, r3
 80056e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	785b      	ldrb	r3, [r3, #1]
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fe fd0f 	bl	8004110 <disk_initialize>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80056f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005704:	2303      	movs	r3, #3
 8005706:	e1e7      	b.n	8005ad8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d007      	beq.n	800571e <find_volume+0xca>
 800570e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005712:	f003 0304 	and.w	r3, r3, #4
 8005716:	2b00      	cmp	r3, #0
 8005718:	d001      	beq.n	800571e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800571a:	230a      	movs	r3, #10
 800571c:	e1dc      	b.n	8005ad8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005724:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005726:	f7ff ff3f 	bl	80055a8 <check_fs>
 800572a:	4603      	mov	r3, r0
 800572c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005730:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005734:	2b02      	cmp	r3, #2
 8005736:	d14b      	bne.n	80057d0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005738:	2300      	movs	r3, #0
 800573a:	643b      	str	r3, [r7, #64]	; 0x40
 800573c:	e01f      	b.n	800577e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800574c:	4413      	add	r3, r2
 800574e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005752:	3304      	adds	r3, #4
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d006      	beq.n	8005768 <find_volume+0x114>
 800575a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800575c:	3308      	adds	r3, #8
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fd72 	bl	8004248 <ld_dword>
 8005764:	4602      	mov	r2, r0
 8005766:	e000      	b.n	800576a <find_volume+0x116>
 8005768:	2200      	movs	r2, #0
 800576a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8005772:	440b      	add	r3, r1
 8005774:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577a:	3301      	adds	r3, #1
 800577c:	643b      	str	r3, [r7, #64]	; 0x40
 800577e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005780:	2b03      	cmp	r3, #3
 8005782:	d9dc      	bls.n	800573e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005784:	2300      	movs	r3, #0
 8005786:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <find_volume+0x140>
 800578e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005790:	3b01      	subs	r3, #1
 8005792:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800579c:	4413      	add	r3, r2
 800579e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80057a2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80057a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <find_volume+0x162>
 80057aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80057ae:	f7ff fefb 	bl	80055a8 <check_fs>
 80057b2:	4603      	mov	r3, r0
 80057b4:	e000      	b.n	80057b8 <find_volume+0x164>
 80057b6:	2303      	movs	r3, #3
 80057b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80057bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d905      	bls.n	80057d0 <find_volume+0x17c>
 80057c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c6:	3301      	adds	r3, #1
 80057c8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057cc:	2b03      	cmp	r3, #3
 80057ce:	d9e1      	bls.n	8005794 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80057d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d101      	bne.n	80057dc <find_volume+0x188>
 80057d8:	2301      	movs	r3, #1
 80057da:	e17d      	b.n	8005ad8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80057dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d901      	bls.n	80057e8 <find_volume+0x194>
 80057e4:	230d      	movs	r3, #13
 80057e6:	e177      	b.n	8005ad8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	3330      	adds	r3, #48	; 0x30
 80057ec:	330b      	adds	r3, #11
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fd12 	bl	8004218 <ld_word>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057fa:	d001      	beq.n	8005800 <find_volume+0x1ac>
 80057fc:	230d      	movs	r3, #13
 80057fe:	e16b      	b.n	8005ad8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	3330      	adds	r3, #48	; 0x30
 8005804:	3316      	adds	r3, #22
 8005806:	4618      	mov	r0, r3
 8005808:	f7fe fd06 	bl	8004218 <ld_word>
 800580c:	4603      	mov	r3, r0
 800580e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d106      	bne.n	8005824 <find_volume+0x1d0>
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	3330      	adds	r3, #48	; 0x30
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	4618      	mov	r0, r3
 800581e:	f7fe fd13 	bl	8004248 <ld_dword>
 8005822:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005826:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005828:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800582a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800582c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005832:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	789b      	ldrb	r3, [r3, #2]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d005      	beq.n	8005848 <find_volume+0x1f4>
 800583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583e:	789b      	ldrb	r3, [r3, #2]
 8005840:	2b02      	cmp	r3, #2
 8005842:	d001      	beq.n	8005848 <find_volume+0x1f4>
 8005844:	230d      	movs	r3, #13
 8005846:	e147      	b.n	8005ad8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	789b      	ldrb	r3, [r3, #2]
 800584c:	461a      	mov	r2, r3
 800584e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005850:	fb02 f303 	mul.w	r3, r2, r3
 8005854:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585c:	b29a      	uxth	r2, r3
 800585e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005860:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005864:	895b      	ldrh	r3, [r3, #10]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <find_volume+0x228>
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	895b      	ldrh	r3, [r3, #10]
 800586e:	461a      	mov	r2, r3
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	895b      	ldrh	r3, [r3, #10]
 8005874:	3b01      	subs	r3, #1
 8005876:	4013      	ands	r3, r2
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <find_volume+0x22c>
 800587c:	230d      	movs	r3, #13
 800587e:	e12b      	b.n	8005ad8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	3330      	adds	r3, #48	; 0x30
 8005884:	3311      	adds	r3, #17
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe fcc6 	bl	8004218 <ld_word>
 800588c:	4603      	mov	r3, r0
 800588e:	461a      	mov	r2, r3
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	891b      	ldrh	r3, [r3, #8]
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <find_volume+0x252>
 80058a2:	230d      	movs	r3, #13
 80058a4:	e118      	b.n	8005ad8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	3330      	adds	r3, #48	; 0x30
 80058aa:	3313      	adds	r3, #19
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7fe fcb3 	bl	8004218 <ld_word>
 80058b2:	4603      	mov	r3, r0
 80058b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80058b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d106      	bne.n	80058ca <find_volume+0x276>
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	3330      	adds	r3, #48	; 0x30
 80058c0:	3320      	adds	r3, #32
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe fcc0 	bl	8004248 <ld_dword>
 80058c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	3330      	adds	r3, #48	; 0x30
 80058ce:	330e      	adds	r3, #14
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe fca1 	bl	8004218 <ld_word>
 80058d6:	4603      	mov	r3, r0
 80058d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80058da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d101      	bne.n	80058e4 <find_volume+0x290>
 80058e0:	230d      	movs	r3, #13
 80058e2:	e0f9      	b.n	8005ad8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	4413      	add	r3, r2
 80058ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058ec:	8912      	ldrh	r2, [r2, #8]
 80058ee:	0912      	lsrs	r2, r2, #4
 80058f0:	b292      	uxth	r2, r2
 80058f2:	4413      	add	r3, r2
 80058f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80058f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d201      	bcs.n	8005902 <find_volume+0x2ae>
 80058fe:	230d      	movs	r3, #13
 8005900:	e0ea      	b.n	8005ad8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005902:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800590a:	8952      	ldrh	r2, [r2, #10]
 800590c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <find_volume+0x2cc>
 8005918:	230d      	movs	r3, #13
 800591a:	e0dd      	b.n	8005ad8 <find_volume+0x484>
 800591c:	20000044 	.word	0x20000044
		fmt = FS_FAT32;
 8005920:	2303      	movs	r3, #3
 8005922:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800592c:	4293      	cmp	r3, r2
 800592e:	d802      	bhi.n	8005936 <find_volume+0x2e2>
 8005930:	2302      	movs	r3, #2
 8005932:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	f640 72f5 	movw	r2, #4085	; 0xff5
 800593c:	4293      	cmp	r3, r2
 800593e:	d802      	bhi.n	8005946 <find_volume+0x2f2>
 8005940:	2301      	movs	r3, #1
 8005942:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005952:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005954:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005958:	441a      	add	r2, r3
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800595e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	441a      	add	r2, r3
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005968:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800596c:	2b03      	cmp	r3, #3
 800596e:	d11e      	bne.n	80059ae <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005972:	3330      	adds	r3, #48	; 0x30
 8005974:	332a      	adds	r3, #42	; 0x2a
 8005976:	4618      	mov	r0, r3
 8005978:	f7fe fc4e 	bl	8004218 <ld_word>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <find_volume+0x332>
 8005982:	230d      	movs	r3, #13
 8005984:	e0a8      	b.n	8005ad8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	891b      	ldrh	r3, [r3, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d001      	beq.n	8005992 <find_volume+0x33e>
 800598e:	230d      	movs	r3, #13
 8005990:	e0a2      	b.n	8005ad8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	3330      	adds	r3, #48	; 0x30
 8005996:	332c      	adds	r3, #44	; 0x2c
 8005998:	4618      	mov	r0, r3
 800599a:	f7fe fc55 	bl	8004248 <ld_dword>
 800599e:	4602      	mov	r2, r0
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80059a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	647b      	str	r3, [r7, #68]	; 0x44
 80059ac:	e01f      	b.n	80059ee <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	891b      	ldrh	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <find_volume+0x366>
 80059b6:	230d      	movs	r3, #13
 80059b8:	e08e      	b.n	8005ad8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80059ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059bc:	6a1a      	ldr	r2, [r3, #32]
 80059be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c0:	441a      	add	r2, r3
 80059c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d103      	bne.n	80059d6 <find_volume+0x382>
 80059ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d0:	695b      	ldr	r3, [r3, #20]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	e00a      	b.n	80059ec <find_volume+0x398>
 80059d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	4613      	mov	r3, r2
 80059dc:	005b      	lsls	r3, r3, #1
 80059de:	4413      	add	r3, r2
 80059e0:	085a      	lsrs	r2, r3, #1
 80059e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80059ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80059ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80059f8:	0a5b      	lsrs	r3, r3, #9
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d201      	bcs.n	8005a02 <find_volume+0x3ae>
 80059fe:	230d      	movs	r3, #13
 8005a00:	e06a      	b.n	8005ad8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	691a      	ldr	r2, [r3, #16]
 8005a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a10:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a14:	2280      	movs	r2, #128	; 0x80
 8005a16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005a18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d149      	bne.n	8005ab4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a22:	3330      	adds	r3, #48	; 0x30
 8005a24:	3330      	adds	r3, #48	; 0x30
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fe fbf6 	bl	8004218 <ld_word>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d140      	bne.n	8005ab4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a34:	3301      	adds	r3, #1
 8005a36:	4619      	mov	r1, r3
 8005a38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005a3a:	f7fe fe9d 	bl	8004778 <move_window>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d137      	bne.n	8005ab4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	2200      	movs	r2, #0
 8005a48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a4c:	3330      	adds	r3, #48	; 0x30
 8005a4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7fe fbe0 	bl	8004218 <ld_word>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d127      	bne.n	8005ab4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	3330      	adds	r3, #48	; 0x30
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe fbed 	bl	8004248 <ld_dword>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4a1b      	ldr	r2, [pc, #108]	; (8005ae0 <find_volume+0x48c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d11e      	bne.n	8005ab4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a78:	3330      	adds	r3, #48	; 0x30
 8005a7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe fbe2 	bl	8004248 <ld_dword>
 8005a84:	4603      	mov	r3, r0
 8005a86:	4a17      	ldr	r2, [pc, #92]	; (8005ae4 <find_volume+0x490>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d113      	bne.n	8005ab4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	3330      	adds	r3, #48	; 0x30
 8005a90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7fe fbd7 	bl	8004248 <ld_dword>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa2:	3330      	adds	r3, #48	; 0x30
 8005aa4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe fbcd 	bl	8004248 <ld_dword>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005aba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005abc:	4b0a      	ldr	r3, [pc, #40]	; (8005ae8 <find_volume+0x494>)
 8005abe:	881b      	ldrh	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	4b08      	ldr	r3, [pc, #32]	; (8005ae8 <find_volume+0x494>)
 8005ac6:	801a      	strh	r2, [r3, #0]
 8005ac8:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <find_volume+0x494>)
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ace:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ad2:	f7fe fde9 	bl	80046a8 <clear_lock>
#endif
	return FR_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3758      	adds	r7, #88	; 0x58
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	41615252 	.word	0x41615252
 8005ae4:	61417272 	.word	0x61417272
 8005ae8:	20000048 	.word	0x20000048

08005aec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005af6:	2309      	movs	r3, #9
 8005af8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d01c      	beq.n	8005b3a <validate+0x4e>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d018      	beq.n	8005b3a <validate+0x4e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d013      	beq.n	8005b3a <validate+0x4e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	889a      	ldrh	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	88db      	ldrh	r3, [r3, #6]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d10c      	bne.n	8005b3a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	785b      	ldrb	r3, [r3, #1]
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fad8 	bl	80040dc <disk_status>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <validate+0x4e>
			res = FR_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <validate+0x5a>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	e000      	b.n	8005b48 <validate+0x5c>
 8005b46:	2300      	movs	r3, #0
 8005b48:	683a      	ldr	r2, [r7, #0]
 8005b4a:	6013      	str	r3, [r2, #0]
	return res;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
	...

08005b58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	4613      	mov	r3, r2
 8005b64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005b6a:	f107 0310 	add.w	r3, r7, #16
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7ff fcd5 	bl	800551e <get_ldnumber>
 8005b74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	da01      	bge.n	8005b80 <f_mount+0x28>
 8005b7c:	230b      	movs	r3, #11
 8005b7e:	e02b      	b.n	8005bd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005b80:	4a17      	ldr	r2, [pc, #92]	; (8005be0 <f_mount+0x88>)
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005b90:	69b8      	ldr	r0, [r7, #24]
 8005b92:	f7fe fd89 	bl	80046a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	490d      	ldr	r1, [pc, #52]	; (8005be0 <f_mount+0x88>)
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <f_mount+0x66>
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d001      	beq.n	8005bc2 <f_mount+0x6a>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e00a      	b.n	8005bd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005bc2:	f107 010c 	add.w	r1, r7, #12
 8005bc6:	f107 0308 	add.w	r3, r7, #8
 8005bca:	2200      	movs	r2, #0
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff fd41 	bl	8005654 <find_volume>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3720      	adds	r7, #32
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	20000044 	.word	0x20000044

08005be4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b098      	sub	sp, #96	; 0x60
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d101      	bne.n	8005bfc <f_open+0x18>
 8005bf8:	2309      	movs	r3, #9
 8005bfa:	e1ad      	b.n	8005f58 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005c04:	79fa      	ldrb	r2, [r7, #7]
 8005c06:	f107 0110 	add.w	r1, r7, #16
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fd20 	bl	8005654 <find_volume>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f040 8191 	bne.w	8005f46 <f_open+0x362>
		dj.obj.fs = fs;
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	f107 0314 	add.w	r3, r7, #20
 8005c2e:	4611      	mov	r1, r2
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fc03 	bl	800543c <follow_path>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11a      	bne.n	8005c7a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005c44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c48:	b25b      	sxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	da03      	bge.n	8005c56 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005c4e:	2306      	movs	r3, #6
 8005c50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005c54:	e011      	b.n	8005c7a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	f023 0301 	bic.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bf14      	ite	ne
 8005c60:	2301      	movne	r3, #1
 8005c62:	2300      	moveq	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	f107 0314 	add.w	r3, r7, #20
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fbd2 	bl	8004418 <chk_lock>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005c7a:	79fb      	ldrb	r3, [r7, #7]
 8005c7c:	f003 031c 	and.w	r3, r3, #28
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d07f      	beq.n	8005d84 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005c84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d017      	beq.n	8005cbc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005c8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c90:	2b04      	cmp	r3, #4
 8005c92:	d10e      	bne.n	8005cb2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005c94:	f7fe fc1c 	bl	80044d0 <enq_lock>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d006      	beq.n	8005cac <f_open+0xc8>
 8005c9e:	f107 0314 	add.w	r3, r7, #20
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff fb03 	bl	80052ae <dir_register>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	e000      	b.n	8005cae <f_open+0xca>
 8005cac:	2312      	movs	r3, #18
 8005cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	f043 0308 	orr.w	r3, r3, #8
 8005cb8:	71fb      	strb	r3, [r7, #7]
 8005cba:	e010      	b.n	8005cde <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005cbc:	7ebb      	ldrb	r3, [r7, #26]
 8005cbe:	f003 0311 	and.w	r3, r3, #17
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <f_open+0xea>
					res = FR_DENIED;
 8005cc6:	2307      	movs	r3, #7
 8005cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005ccc:	e007      	b.n	8005cde <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005cce:	79fb      	ldrb	r3, [r7, #7]
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <f_open+0xfa>
 8005cd8:	2308      	movs	r3, #8
 8005cda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d168      	bne.n	8005db8 <f_open+0x1d4>
 8005ce6:	79fb      	ldrb	r3, [r7, #7]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d063      	beq.n	8005db8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005cf0:	f7fd fccc 	bl	800368c <get_fattime>
 8005cf4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cf8:	330e      	adds	r3, #14
 8005cfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe fae1 	bl	80042c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d04:	3316      	adds	r3, #22
 8005d06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fe fadb 	bl	80042c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d10:	330b      	adds	r3, #11
 8005d12:	2220      	movs	r2, #32
 8005d14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7ff fa32 	bl	8005186 <ld_clust>
 8005d22:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff fa4a 	bl	80051c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d32:	331c      	adds	r3, #28
 8005d34:	2100      	movs	r1, #0
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fe fac4 	bl	80042c4 <st_dword>
					fs->wflag = 1;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d037      	beq.n	8005db8 <f_open+0x1d4>
						dw = fs->winsect;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005d4e:	f107 0314 	add.w	r3, r7, #20
 8005d52:	2200      	movs	r2, #0
 8005d54:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe ff5d 	bl	8004c16 <remove_chain>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005d62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d126      	bne.n	8005db8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fe fd02 	bl	8004778 <move_window>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	60da      	str	r2, [r3, #12]
 8005d82:	e019      	b.n	8005db8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005d84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d115      	bne.n	8005db8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005d8c:	7ebb      	ldrb	r3, [r7, #26]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005d96:	2304      	movs	r3, #4
 8005d98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005d9c:	e00c      	b.n	8005db8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005d9e:	79fb      	ldrb	r3, [r7, #7]
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d007      	beq.n	8005db8 <f_open+0x1d4>
 8005da8:	7ebb      	ldrb	r3, [r7, #26]
 8005daa:	f003 0301 	and.w	r3, r3, #1
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <f_open+0x1d4>
						res = FR_DENIED;
 8005db2:	2307      	movs	r3, #7
 8005db4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005db8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d128      	bne.n	8005e12 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005dc0:	79fb      	ldrb	r3, [r7, #7]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005de0:	79fb      	ldrb	r3, [r7, #7]
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bf14      	ite	ne
 8005dea:	2301      	movne	r3, #1
 8005dec:	2300      	moveq	r3, #0
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	f107 0314 	add.w	r3, r7, #20
 8005df6:	4611      	mov	r1, r2
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7fe fb8b 	bl	8004514 <inc_lock>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <f_open+0x22e>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f040 8095 	bne.w	8005f46 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e20:	4611      	mov	r1, r2
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f9af 	bl	8005186 <ld_clust>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	331c      	adds	r3, #28
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fa08 	bl	8004248 <ld_dword>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	88da      	ldrh	r2, [r3, #6]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	79fa      	ldrb	r2, [r7, #7]
 8005e56:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	3330      	adds	r3, #48	; 0x30
 8005e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e72:	2100      	movs	r1, #0
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fe fa72 	bl	800435e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005e7a:	79fb      	ldrb	r3, [r7, #7]
 8005e7c:	f003 0320 	and.w	r3, r3, #32
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d060      	beq.n	8005f46 <f_open+0x362>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d05c      	beq.n	8005f46 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	895b      	ldrh	r3, [r3, #10]
 8005e98:	025b      	lsls	r3, r3, #9
 8005e9a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ea8:	e016      	b.n	8005ed8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe fd1d 	bl	80048ee <get_fat>
 8005eb4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005eb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d802      	bhi.n	8005ec2 <f_open+0x2de>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec8:	d102      	bne.n	8005ed0 <f_open+0x2ec>
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005ed0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d103      	bne.n	8005ee8 <f_open+0x304>
 8005ee0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d8e0      	bhi.n	8005eaa <f_open+0x2c6>
				}
				fp->clust = clst;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005eec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005eee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d127      	bne.n	8005f46 <f_open+0x362>
 8005ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d022      	beq.n	8005f46 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe fcd3 	bl	80048b0 <clust2sect>
 8005f0a:	6478      	str	r0, [r7, #68]	; 0x44
 8005f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <f_open+0x336>
						res = FR_INT_ERR;
 8005f12:	2302      	movs	r3, #2
 8005f14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005f18:	e015      	b.n	8005f46 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005f1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f1c:	0a5a      	lsrs	r2, r3, #9
 8005f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	7858      	ldrb	r0, [r3, #1]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6a1a      	ldr	r2, [r3, #32]
 8005f34:	2301      	movs	r3, #1
 8005f36:	f7fe f911 	bl	800415c <disk_read>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <f_open+0x362>
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005f46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <f_open+0x370>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005f54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3760      	adds	r7, #96	; 0x60
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	bd80      	pop	{r7, pc}

08005f60 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08c      	sub	sp, #48	; 0x30
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	607a      	str	r2, [r7, #4]
 8005f6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2200      	movs	r2, #0
 8005f76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f107 0210 	add.w	r2, r7, #16
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff fdb3 	bl	8005aec <validate>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d107      	bne.n	8005fa4 <f_write+0x44>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	7d5b      	ldrb	r3, [r3, #21]
 8005f98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005f9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <f_write+0x4a>
 8005fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fa8:	e14b      	b.n	8006242 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	7d1b      	ldrb	r3, [r3, #20]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <f_write+0x5a>
 8005fb6:	2307      	movs	r3, #7
 8005fb8:	e143      	b.n	8006242 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699a      	ldr	r2, [r3, #24]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	f080 812d 	bcs.w	8006226 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005fd4:	e127      	b.n	8006226 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 80e3 	bne.w	80061aa <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	0a5b      	lsrs	r3, r3, #9
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	8952      	ldrh	r2, [r2, #10]
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d143      	bne.n	8006082 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d10c      	bne.n	800601c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	d11a      	bne.n	8006044 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2100      	movs	r1, #0
 8006012:	4618      	mov	r0, r3
 8006014:	f7fe fe64 	bl	8004ce0 <create_chain>
 8006018:	62b8      	str	r0, [r7, #40]	; 0x28
 800601a:	e013      	b.n	8006044 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	2b00      	cmp	r3, #0
 8006022:	d007      	beq.n	8006034 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	4619      	mov	r1, r3
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f7fe fef0 	bl	8004e10 <clmt_clust>
 8006030:	62b8      	str	r0, [r7, #40]	; 0x28
 8006032:	e007      	b.n	8006044 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006034:	68fa      	ldr	r2, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f7fe fe4f 	bl	8004ce0 <create_chain>
 8006042:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 80f2 	beq.w	8006230 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	2b01      	cmp	r3, #1
 8006050:	d104      	bne.n	800605c <f_write+0xfc>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2202      	movs	r2, #2
 8006056:	755a      	strb	r2, [r3, #21]
 8006058:	2302      	movs	r3, #2
 800605a:	e0f2      	b.n	8006242 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800605e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006062:	d104      	bne.n	800606e <f_write+0x10e>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	755a      	strb	r2, [r3, #21]
 800606a:	2301      	movs	r3, #1
 800606c:	e0e9      	b.n	8006242 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006072:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <f_write+0x122>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006080:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	7d1b      	ldrb	r3, [r3, #20]
 8006086:	b25b      	sxtb	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	da18      	bge.n	80060be <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	7858      	ldrb	r0, [r3, #1]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	6a1a      	ldr	r2, [r3, #32]
 800609a:	2301      	movs	r3, #1
 800609c:	f7fe f87e 	bl	800419c <disk_write>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <f_write+0x150>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2201      	movs	r2, #1
 80060aa:	755a      	strb	r2, [r3, #21]
 80060ac:	2301      	movs	r3, #1
 80060ae:	e0c8      	b.n	8006242 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	7d1b      	ldrb	r3, [r3, #20]
 80060b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060b8:	b2da      	uxtb	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	4619      	mov	r1, r3
 80060c6:	4610      	mov	r0, r2
 80060c8:	f7fe fbf2 	bl	80048b0 <clust2sect>
 80060cc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <f_write+0x17e>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2202      	movs	r2, #2
 80060d8:	755a      	strb	r2, [r3, #21]
 80060da:	2302      	movs	r3, #2
 80060dc:	e0b1      	b.n	8006242 <f_write+0x2e2>
			sect += csect;
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	4413      	add	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	0a5b      	lsrs	r3, r3, #9
 80060ea:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d03c      	beq.n	800616c <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	6a3b      	ldr	r3, [r7, #32]
 80060f6:	4413      	add	r3, r2
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	8952      	ldrh	r2, [r2, #10]
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d905      	bls.n	800610c <f_write+0x1ac>
					cc = fs->csize - csect;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	895b      	ldrh	r3, [r3, #10]
 8006104:	461a      	mov	r2, r3
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	7858      	ldrb	r0, [r3, #1]
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	69f9      	ldr	r1, [r7, #28]
 8006116:	f7fe f841 	bl	800419c <disk_write>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <f_write+0x1ca>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2201      	movs	r2, #1
 8006124:	755a      	strb	r2, [r3, #21]
 8006126:	2301      	movs	r3, #1
 8006128:	e08b      	b.n	8006242 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1a      	ldr	r2, [r3, #32]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	429a      	cmp	r2, r3
 8006136:	d915      	bls.n	8006164 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6a1a      	ldr	r2, [r3, #32]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	025b      	lsls	r3, r3, #9
 8006148:	69fa      	ldr	r2, [r7, #28]
 800614a:	4413      	add	r3, r2
 800614c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006150:	4619      	mov	r1, r3
 8006152:	f7fe f8e3 	bl	800431c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	7d1b      	ldrb	r3, [r3, #20]
 800615a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800615e:	b2da      	uxtb	r2, r3
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	025b      	lsls	r3, r3, #9
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800616a:	e03f      	b.n	80061ec <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	429a      	cmp	r2, r3
 8006174:	d016      	beq.n	80061a4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800617e:	429a      	cmp	r2, r3
 8006180:	d210      	bcs.n	80061a4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	7858      	ldrb	r0, [r3, #1]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800618c:	2301      	movs	r3, #1
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	f7fd ffe4 	bl	800415c <disk_read>
 8006194:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006196:	2b00      	cmp	r3, #0
 8006198:	d004      	beq.n	80061a4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	755a      	strb	r2, [r3, #21]
 80061a0:	2301      	movs	r3, #1
 80061a2:	e04e      	b.n	8006242 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	699b      	ldr	r3, [r3, #24]
 80061ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80061b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d901      	bls.n	80061c4 <f_write+0x264>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d2:	4413      	add	r3, r2
 80061d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d6:	69f9      	ldr	r1, [r7, #28]
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe f89f 	bl	800431c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	7d1b      	ldrb	r3, [r3, #20]
 80061e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	4413      	add	r3, r2
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	699a      	ldr	r2, [r3, #24]
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	441a      	add	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	619a      	str	r2, [r3, #24]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	429a      	cmp	r2, r3
 800620a:	bf38      	it	cc
 800620c:	461a      	movcc	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	441a      	add	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f47f aed4 	bne.w	8005fd6 <f_write+0x76>
 800622e:	e000      	b.n	8006232 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006230:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	7d1b      	ldrb	r3, [r3, #20]
 8006236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800623a:	b2da      	uxtb	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3730      	adds	r7, #48	; 0x30
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b086      	sub	sp, #24
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f107 0208 	add.w	r2, r7, #8
 8006258:	4611      	mov	r1, r2
 800625a:	4618      	mov	r0, r3
 800625c:	f7ff fc46 	bl	8005aec <validate>
 8006260:	4603      	mov	r3, r0
 8006262:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006264:	7dfb      	ldrb	r3, [r7, #23]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d168      	bne.n	800633c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	7d1b      	ldrb	r3, [r3, #20]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d062      	beq.n	800633c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	7d1b      	ldrb	r3, [r3, #20]
 800627a:	b25b      	sxtb	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	da15      	bge.n	80062ac <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	7858      	ldrb	r0, [r3, #1]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	2301      	movs	r3, #1
 8006290:	f7fd ff84 	bl	800419c <disk_write>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <f_sync+0x54>
 800629a:	2301      	movs	r3, #1
 800629c:	e04f      	b.n	800633e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	7d1b      	ldrb	r3, [r3, #20]
 80062a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80062ac:	f7fd f9ee 	bl	800368c <get_fattime>
 80062b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80062b2:	68ba      	ldr	r2, [r7, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	4619      	mov	r1, r3
 80062ba:	4610      	mov	r0, r2
 80062bc:	f7fe fa5c 	bl	8004778 <move_window>
 80062c0:	4603      	mov	r3, r0
 80062c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80062c4:	7dfb      	ldrb	r3, [r7, #23]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d138      	bne.n	800633c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	330b      	adds	r3, #11
 80062d4:	781a      	ldrb	r2, [r3, #0]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	330b      	adds	r3, #11
 80062da:	f042 0220 	orr.w	r2, r2, #32
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6818      	ldr	r0, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	461a      	mov	r2, r3
 80062ec:	68f9      	ldr	r1, [r7, #12]
 80062ee:	f7fe ff69 	bl	80051c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f103 021c 	add.w	r2, r3, #28
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4619      	mov	r1, r3
 80062fe:	4610      	mov	r0, r2
 8006300:	f7fd ffe0 	bl	80042c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3316      	adds	r3, #22
 8006308:	6939      	ldr	r1, [r7, #16]
 800630a:	4618      	mov	r0, r3
 800630c:	f7fd ffda 	bl	80042c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3312      	adds	r3, #18
 8006314:	2100      	movs	r1, #0
 8006316:	4618      	mov	r0, r3
 8006318:	f7fd ffb9 	bl	800428e <st_word>
					fs->wflag = 1;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2201      	movs	r2, #1
 8006320:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	4618      	mov	r0, r3
 8006326:	f7fe fa55 	bl	80047d4 <sync_fs>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	7d1b      	ldrb	r3, [r3, #20]
 8006332:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006336:	b2da      	uxtb	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800633c:	7dfb      	ldrb	r3, [r7, #23]
}
 800633e:	4618      	mov	r0, r3
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}

08006346 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006346:	b580      	push	{r7, lr}
 8006348:	b084      	sub	sp, #16
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff ff7b 	bl	800624a <f_sync>
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d118      	bne.n	8006390 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f107 0208 	add.w	r2, r7, #8
 8006364:	4611      	mov	r1, r2
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fbc0 	bl	8005aec <validate>
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10c      	bne.n	8006390 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe f958 	bl	8004630 <dec_lock>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d102      	bne.n	8006390 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006390:	7bfb      	ldrb	r3, [r7, #15]
}
 8006392:	4618      	mov	r0, r3
 8006394:	3710      	adds	r7, #16
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	4613      	mov	r3, r2
 80063a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80063aa:	2301      	movs	r3, #1
 80063ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80063ae:	2300      	movs	r3, #0
 80063b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80063b2:	4b1f      	ldr	r3, [pc, #124]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063b4:	7a5b      	ldrb	r3, [r3, #9]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d131      	bne.n	8006420 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80063bc:	4b1c      	ldr	r3, [pc, #112]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063be:	7a5b      	ldrb	r3, [r3, #9]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	4b1a      	ldr	r3, [pc, #104]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063c6:	2100      	movs	r1, #0
 80063c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80063ca:	4b19      	ldr	r3, [pc, #100]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063cc:	7a5b      	ldrb	r3, [r3, #9]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	4a17      	ldr	r2, [pc, #92]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80063da:	4b15      	ldr	r3, [pc, #84]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063dc:	7a5b      	ldrb	r3, [r3, #9]
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	461a      	mov	r2, r3
 80063e2:	4b13      	ldr	r3, [pc, #76]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063e4:	4413      	add	r3, r2
 80063e6:	79fa      	ldrb	r2, [r7, #7]
 80063e8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80063ea:	4b11      	ldr	r3, [pc, #68]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063ec:	7a5b      	ldrb	r3, [r3, #9]
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	1c5a      	adds	r2, r3, #1
 80063f2:	b2d1      	uxtb	r1, r2
 80063f4:	4a0e      	ldr	r2, [pc, #56]	; (8006430 <FATFS_LinkDriverEx+0x94>)
 80063f6:	7251      	strb	r1, [r2, #9]
 80063f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80063fa:	7dbb      	ldrb	r3, [r7, #22]
 80063fc:	3330      	adds	r3, #48	; 0x30
 80063fe:	b2da      	uxtb	r2, r3
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	3301      	adds	r3, #1
 8006408:	223a      	movs	r2, #58	; 0x3a
 800640a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	3302      	adds	r3, #2
 8006410:	222f      	movs	r2, #47	; 0x2f
 8006412:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	3303      	adds	r3, #3
 8006418:	2200      	movs	r2, #0
 800641a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006420:	7dfb      	ldrb	r3, [r7, #23]
}
 8006422:	4618      	mov	r0, r3
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	2000006c 	.word	0x2000006c

08006434 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800643e:	2200      	movs	r2, #0
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f7ff ffaa 	bl	800639c <FATFS_LinkDriverEx>
 8006448:	4603      	mov	r3, r0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <__libc_init_array>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	4d0d      	ldr	r5, [pc, #52]	; (800648c <__libc_init_array+0x38>)
 8006458:	4c0d      	ldr	r4, [pc, #52]	; (8006490 <__libc_init_array+0x3c>)
 800645a:	1b64      	subs	r4, r4, r5
 800645c:	10a4      	asrs	r4, r4, #2
 800645e:	2600      	movs	r6, #0
 8006460:	42a6      	cmp	r6, r4
 8006462:	d109      	bne.n	8006478 <__libc_init_array+0x24>
 8006464:	4d0b      	ldr	r5, [pc, #44]	; (8006494 <__libc_init_array+0x40>)
 8006466:	4c0c      	ldr	r4, [pc, #48]	; (8006498 <__libc_init_array+0x44>)
 8006468:	f000 f820 	bl	80064ac <_init>
 800646c:	1b64      	subs	r4, r4, r5
 800646e:	10a4      	asrs	r4, r4, #2
 8006470:	2600      	movs	r6, #0
 8006472:	42a6      	cmp	r6, r4
 8006474:	d105      	bne.n	8006482 <__libc_init_array+0x2e>
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	f855 3b04 	ldr.w	r3, [r5], #4
 800647c:	4798      	blx	r3
 800647e:	3601      	adds	r6, #1
 8006480:	e7ee      	b.n	8006460 <__libc_init_array+0xc>
 8006482:	f855 3b04 	ldr.w	r3, [r5], #4
 8006486:	4798      	blx	r3
 8006488:	3601      	adds	r6, #1
 800648a:	e7f2      	b.n	8006472 <__libc_init_array+0x1e>
 800648c:	080065f8 	.word	0x080065f8
 8006490:	080065f8 	.word	0x080065f8
 8006494:	080065f8 	.word	0x080065f8
 8006498:	080065fc 	.word	0x080065fc

0800649c <memset>:
 800649c:	4402      	add	r2, r0
 800649e:	4603      	mov	r3, r0
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d100      	bne.n	80064a6 <memset+0xa>
 80064a4:	4770      	bx	lr
 80064a6:	f803 1b01 	strb.w	r1, [r3], #1
 80064aa:	e7f9      	b.n	80064a0 <memset+0x4>

080064ac <_init>:
 80064ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ae:	bf00      	nop
 80064b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064b2:	bc08      	pop	{r3}
 80064b4:	469e      	mov	lr, r3
 80064b6:	4770      	bx	lr

080064b8 <_fini>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr
