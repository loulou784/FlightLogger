
FlightLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800618c  0800618c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800618c  0800618c  0001618c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006194  08006194  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006194  08006194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800619c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000890  20000088  08006224  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  08006224  00020918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6c2  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a39  00000000  00000000  0003d77a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  000411b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001410  00000000  00000000  00042760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238de  00000000  00000000  00043b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b21a  00000000  00000000  0006744e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf28c  00000000  00000000  00082668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001518f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d68  00000000  00000000  00151948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060e0 	.word	0x080060e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080060e0 	.word	0x080060e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b088      	sub	sp, #32
 800056c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	f107 030c 	add.w	r3, r7, #12
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_GPIO_Init+0x8c>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <MX_GPIO_Init+0x8c>)
 8000584:	f043 0304 	orr.w	r3, r3, #4
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b1a      	ldr	r3, [pc, #104]	; (80005f4 <MX_GPIO_Init+0x8c>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0304 	and.w	r3, r3, #4
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000596:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_GPIO_Init+0x8c>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a16      	ldr	r2, [pc, #88]	; (80005f4 <MX_GPIO_Init+0x8c>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_GPIO_Init+0x8c>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	4b11      	ldr	r3, [pc, #68]	; (80005f4 <MX_GPIO_Init+0x8c>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b2:	4a10      	ldr	r2, [pc, #64]	; (80005f4 <MX_GPIO_Init+0x8c>)
 80005b4:	f043 0302 	orr.w	r3, r3, #2
 80005b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ba:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <MX_GPIO_Init+0x8c>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005be:	f003 0302 	and.w	r3, r3, #2
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|LD3_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	210a      	movs	r1, #10
 80005ca:	480b      	ldr	r0, [pc, #44]	; (80005f8 <MX_GPIO_Init+0x90>)
 80005cc:	f001 f8ac 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SD_CS_Pin|LD3_Pin;
 80005d0:	230a      	movs	r3, #10
 80005d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d4:	2301      	movs	r3, #1
 80005d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	2300      	movs	r3, #0
 80005de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	4619      	mov	r1, r3
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MX_GPIO_Init+0x90>)
 80005e8:	f000 ff34 	bl	8001454 <HAL_GPIO_Init>

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40021000 	.word	0x40021000
 80005f8:	48000400 	.word	0x48000400

080005fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_I2C1_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	; (8000674 <MX_I2C1_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_I2C1_Init+0x74>)
 8000608:	4a1b      	ldr	r2, [pc, #108]	; (8000678 <MX_I2C1_Init+0x7c>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_I2C1_Init+0x74>)
 8000614:	2201      	movs	r2, #1
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000636:	480e      	ldr	r0, [pc, #56]	; (8000670 <MX_I2C1_Init+0x74>)
 8000638:	f001 f8a8 	bl	800178c <HAL_I2C_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000642:	f000 f97d 	bl	8000940 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000646:	2100      	movs	r1, #0
 8000648:	4809      	ldr	r0, [pc, #36]	; (8000670 <MX_I2C1_Init+0x74>)
 800064a:	f001 fe01 	bl	8002250 <HAL_I2CEx_ConfigAnalogFilter>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000654:	f000 f974 	bl	8000940 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000658:	2100      	movs	r1, #0
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_I2C1_Init+0x74>)
 800065c:	f001 fe43 	bl	80022e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 f96b 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000c0 	.word	0x200000c0
 8000674:	40005400 	.word	0x40005400
 8000678:	00702991 	.word	0x00702991

0800067c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a18      	ldr	r2, [pc, #96]	; (80006fc <HAL_I2C_MspInit+0x80>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d129      	bne.n	80006f2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b18      	ldr	r3, [pc, #96]	; (8000700 <HAL_I2C_MspInit+0x84>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <HAL_I2C_MspInit+0x84>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <HAL_I2C_MspInit+0x84>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006bc:	2312      	movs	r3, #18
 80006be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c4:	2303      	movs	r3, #3
 80006c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006c8:	2304      	movs	r3, #4
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f000 febd 	bl	8001454 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_I2C_MspInit+0x84>)
 80006dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_I2C_MspInit+0x84>)
 80006e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006e4:	6593      	str	r3, [r2, #88]	; 0x58
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_I2C_MspInit+0x84>)
 80006e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006f2:	bf00      	nop
 80006f4:	3728      	adds	r7, #40	; 0x28
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40005400 	.word	0x40005400
 8000700:	40021000 	.word	0x40021000

08000704 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b0ab      	sub	sp, #172	; 0xac
 8000708:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070a:	f000 fd64 	bl	80011d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800070e:	f000 f881 	bl	8000814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f7ff ff29 	bl	8000568 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000716:	f000 fcb1 	bl	800107c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800071a:	f7ff ff6f 	bl	80005fc <MX_I2C1_Init>
  MX_SPI1_Init();
 800071e:	f000 fb15 	bl	8000d4c <MX_SPI1_Init>
  MX_FATFS_Init();
 8000722:	f004 fadb 	bl	8004cdc <MX_FATFS_Init>
  /*
   * Test MPU6050 peripheral
   */
  uint8_t buffer[128];
  int len;
  uint32_t u32LastRead = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  mpuResult = SD_MPU6050_Init(&hi2c1, &mpu6050, SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_2G, SD_MPU6050_Gyroscope_250s);
 800072c:	2300      	movs	r3, #0
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	2200      	movs	r2, #0
 8000734:	4931      	ldr	r1, [pc, #196]	; (80007fc <main+0xf8>)
 8000736:	4832      	ldr	r0, [pc, #200]	; (8000800 <main+0xfc>)
 8000738:	f000 f907 	bl	800094a <SD_MPU6050_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	461a      	mov	r2, r3
 8000740:	4b30      	ldr	r3, [pc, #192]	; (8000804 <main+0x100>)
 8000742:	701a      	strb	r2, [r3, #0]
  SD_MPU6050_SetDataRate(&hi2c1, &mpu6050, SD_MPU6050_DataRate_1KHz);
 8000744:	2207      	movs	r2, #7
 8000746:	492d      	ldr	r1, [pc, #180]	; (80007fc <main+0xf8>)
 8000748:	482d      	ldr	r0, [pc, #180]	; (8000800 <main+0xfc>)
 800074a:	f000 f973 	bl	8000a34 <SD_MPU6050_SetDataRate>
  HAL_Delay(500); // Wait init
 800074e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000752:	f000 fd79 	bl	8001248 <HAL_Delay>
  if(mpuResult == SD_MPU6050_Result_Ok) {
 8000756:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <main+0x100>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d145      	bne.n	80007ea <main+0xe6>
	  while(1) {
		  mpuResult = SD_MPU6050_ReadAll(&hi2c1, &mpu6050);
 800075e:	4927      	ldr	r1, [pc, #156]	; (80007fc <main+0xf8>)
 8000760:	4827      	ldr	r0, [pc, #156]	; (8000800 <main+0xfc>)
 8000762:	f000 fa6f 	bl	8000c44 <SD_MPU6050_ReadAll>
 8000766:	4603      	mov	r3, r0
 8000768:	461a      	mov	r2, r3
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <main+0x100>)
 800076c:	701a      	strb	r2, [r3, #0]
		  if(mpuResult == SD_MPU6050_Result_Ok) {
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <main+0x100>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d1f3      	bne.n	800075e <main+0x5a>
			  len = snprintf(buffer, sizeof(buffer), "%d: %d %d %d %d %d %d\n", HAL_GetTick() - u32LastRead, mpu6050.Accelerometer_X, mpu6050.Accelerometer_Y, mpu6050.Accelerometer_Z, mpu6050.Gyroscope_X, mpu6050.Gyroscope_Y, mpu6050.Gyroscope_Z);
 8000776:	f000 fd5b 	bl	8001230 <HAL_GetTick>
 800077a:	4602      	mov	r2, r0
 800077c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000780:	1ad3      	subs	r3, r2, r3
 8000782:	4a1e      	ldr	r2, [pc, #120]	; (80007fc <main+0xf8>)
 8000784:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000788:	4611      	mov	r1, r2
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <main+0xf8>)
 800078c:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8000790:	4614      	mov	r4, r2
 8000792:	4a1a      	ldr	r2, [pc, #104]	; (80007fc <main+0xf8>)
 8000794:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000798:	4615      	mov	r5, r2
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <main+0xf8>)
 800079c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80007a0:	4616      	mov	r6, r2
 80007a2:	4a16      	ldr	r2, [pc, #88]	; (80007fc <main+0xf8>)
 80007a4:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80007a8:	607a      	str	r2, [r7, #4]
 80007aa:	4a14      	ldr	r2, [pc, #80]	; (80007fc <main+0xf8>)
 80007ac:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80007b0:	f107 0008 	add.w	r0, r7, #8
 80007b4:	9205      	str	r2, [sp, #20]
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	9204      	str	r2, [sp, #16]
 80007ba:	9603      	str	r6, [sp, #12]
 80007bc:	9502      	str	r5, [sp, #8]
 80007be:	9401      	str	r4, [sp, #4]
 80007c0:	9100      	str	r1, [sp, #0]
 80007c2:	4a11      	ldr	r2, [pc, #68]	; (8000808 <main+0x104>)
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	f005 f849 	bl	800585c <sniprintf>
 80007ca:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
			  HAL_UART_Transmit(&huart2, buffer, len, 10);
 80007ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	f107 0108 	add.w	r1, r7, #8
 80007d8:	230a      	movs	r3, #10
 80007da:	480c      	ldr	r0, [pc, #48]	; (800080c <main+0x108>)
 80007dc:	f003 fe76 	bl	80044cc <HAL_UART_Transmit>
			  u32LastRead = HAL_GetTick();
 80007e0:	f000 fd26 	bl	8001230 <HAL_GetTick>
 80007e4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		  mpuResult = SD_MPU6050_ReadAll(&hi2c1, &mpu6050);
 80007e8:	e7b9      	b.n	800075e <main+0x5a>
		  }
	  }
  } else {
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007ea:	2108      	movs	r1, #8
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <main+0x10c>)
 80007ee:	f000 ffb3 	bl	8001758 <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80007f2:	2064      	movs	r0, #100	; 0x64
 80007f4:	f000 fd28 	bl	8001248 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <main+0xf4>
 80007fa:	bf00      	nop
 80007fc:	2000010c 	.word	0x2000010c
 8000800:	200000c0 	.word	0x200000c0
 8000804:	2000035c 	.word	0x2000035c
 8000808:	080060f8 	.word	0x080060f8
 800080c:	20000410 	.word	0x20000410
 8000810:	48000400 	.word	0x48000400

08000814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b0ac      	sub	sp, #176	; 0xb0
 8000818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800081e:	2244      	movs	r2, #68	; 0x44
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f005 f812 	bl	800584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000828:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	2254      	movs	r2, #84	; 0x54
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f005 f804 	bl	800584c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000844:	f001 fd9c 	bl	8002380 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000848:	4b33      	ldr	r3, [pc, #204]	; (8000918 <SystemClock_Config+0x104>)
 800084a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800084e:	4a32      	ldr	r2, [pc, #200]	; (8000918 <SystemClock_Config+0x104>)
 8000850:	f023 0318 	bic.w	r3, r3, #24
 8000854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000858:	2314      	movs	r3, #20
 800085a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800085c:	2301      	movs	r3, #1
 800085e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800086c:	2360      	movs	r3, #96	; 0x60
 800086e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000878:	2301      	movs	r3, #1
 800087a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000884:	2328      	movs	r3, #40	; 0x28
 8000886:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800088a:	2307      	movs	r3, #7
 800088c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000890:	2302      	movs	r3, #2
 8000892:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fde1 	bl	8002468 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008ac:	f000 f848 	bl	8000940 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b0:	230f      	movs	r3, #15
 80008b2:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b4:	2303      	movs	r3, #3
 80008b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b8:	2300      	movs	r3, #0
 80008ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008bc:	2300      	movs	r3, #0
 80008be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c0:	2300      	movs	r3, #0
 80008c2:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c8:	2104      	movs	r1, #4
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 f9ec 	bl	8002ca8 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008d6:	f000 f833 	bl	8000940 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80008da:	2342      	movs	r3, #66	; 0x42
 80008dc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fc15 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008f4:	f000 f824 	bl	8000940 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008f8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008fc:	f001 fd5e 	bl	80023bc <HAL_PWREx_ControlVoltageScaling>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000906:	f000 f81b 	bl	8000940 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800090a:	f002 fdf9 	bl	8003500 <HAL_RCCEx_EnableMSIPLLMode>
}
 800090e:	bf00      	nop
 8000910:	37b0      	adds	r7, #176	; 0xb0
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 fc6b 	bl	8001208 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40014400 	.word	0x40014400

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	e7fe      	b.n	8000948 <Error_Handler+0x8>

0800094a <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b08a      	sub	sp, #40	; 0x28
 800094e:	af02      	add	r7, sp, #8
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	4611      	mov	r1, r2
 8000956:	461a      	mov	r2, r3
 8000958:	460b      	mov	r3, r1
 800095a:	71fb      	strb	r3, [r7, #7]
 800095c:	4613      	mov	r3, r2
 800095e:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 8000960:	2375      	movs	r3, #117	; 0x75
 8000962:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f063 032f 	orn	r3, r3, #47	; 0x2f
 800096e:	b2da      	uxtb	r2, r3
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 800097a:	7efb      	ldrb	r3, [r7, #27]
 800097c:	b299      	uxth	r1, r3
 800097e:	2305      	movs	r3, #5
 8000980:	2202      	movs	r2, #2
 8000982:	69f8      	ldr	r0, [r7, #28]
 8000984:	f001 f97c 	bl	8001c80 <HAL_I2C_IsDeviceReady>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 800098e:	2301      	movs	r3, #1
 8000990:	e04c      	b.n	8000a2c <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 8000992:	7efb      	ldrb	r3, [r7, #27]
 8000994:	b299      	uxth	r1, r3
 8000996:	f107 021a 	add.w	r2, r7, #26
 800099a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	69f8      	ldr	r0, [r7, #28]
 80009a4:	f000 ff82 	bl	80018ac <HAL_I2C_Master_Transmit>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 80009ae:	2301      	movs	r3, #1
 80009b0:	e03c      	b.n	8000a2c <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 80009b2:	7efb      	ldrb	r3, [r7, #27]
 80009b4:	b299      	uxth	r1, r3
 80009b6:	f107 0219 	add.w	r2, r7, #25
 80009ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	69f8      	ldr	r0, [r7, #28]
 80009c4:	f001 f866 	bl	8001a94 <HAL_I2C_Master_Receive>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 80009ce:	2301      	movs	r3, #1
 80009d0:	e02c      	b.n	8000a2c <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 80009d2:	2303      	movs	r3, #3
 80009d4:	e02a      	b.n	8000a2c <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 80009d6:	bf00      	nop
 80009d8:	7e7b      	ldrb	r3, [r7, #25]
 80009da:	2b68      	cmp	r3, #104	; 0x68
 80009dc:	d1f9      	bne.n	80009d2 <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 80009de:	236b      	movs	r3, #107	; 0x6b
 80009e0:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 80009e2:	2300      	movs	r3, #0
 80009e4:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 80009e6:	7efb      	ldrb	r3, [r7, #27]
 80009e8:	b299      	uxth	r1, r3
 80009ea:	f107 0214 	add.w	r2, r7, #20
 80009ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	2302      	movs	r3, #2
 80009f6:	69f8      	ldr	r0, [r7, #28]
 80009f8:	f000 ff58 	bl	80018ac <HAL_I2C_Master_Transmit>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 8000a02:	2301      	movs	r3, #1
 8000a04:	e012      	b.n	8000a2c <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8000a06:	2207      	movs	r2, #7
 8000a08:	68b9      	ldr	r1, [r7, #8]
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f000 f812 	bl	8000a34 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	461a      	mov	r2, r3
 8000a14:	68b9      	ldr	r1, [r7, #8]
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f000 f830 	bl	8000a7c <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8000a1c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a20:	461a      	mov	r2, r3
 8000a22:	68b9      	ldr	r1, [r7, #8]
 8000a24:	68f8      	ldr	r0, [r7, #12]
 8000a26:	f000 f899 	bl	8000b5c <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8000a4c:	2319      	movs	r3, #25
 8000a4e:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8000a54:	bf00      	nop
 8000a56:	7cfb      	ldrb	r3, [r7, #19]
 8000a58:	b299      	uxth	r1, r3
 8000a5a:	f107 0210 	add.w	r2, r7, #16
 8000a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a62:	9300      	str	r3, [sp, #0]
 8000a64:	2302      	movs	r3, #2
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f000 ff20 	bl	80018ac <HAL_I2C_Master_Transmit>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d1f1      	bne.n	8000a56 <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8000a72:	2300      	movs	r3, #0
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	4613      	mov	r3, r2
 8000a88:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 8000a94:	231c      	movs	r3, #28
 8000a96:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8000a98:	bf00      	nop
 8000a9a:	7cfb      	ldrb	r3, [r7, #19]
 8000a9c:	b299      	uxth	r1, r3
 8000a9e:	f107 0211 	add.w	r2, r7, #17
 8000aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f000 fefe 	bl	80018ac <HAL_I2C_Master_Transmit>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d1f1      	bne.n	8000a9a <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8000ab6:	bf00      	nop
 8000ab8:	7cfb      	ldrb	r3, [r7, #19]
 8000aba:	b299      	uxth	r1, r3
 8000abc:	f107 0212 	add.w	r2, r7, #18
 8000ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	6978      	ldr	r0, [r7, #20]
 8000aca:	f000 ffe3 	bl	8001a94 <HAL_I2C_Master_Receive>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d1f1      	bne.n	8000ab8 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8000ad4:	7cbb      	ldrb	r3, [r7, #18]
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	f023 0318 	bic.w	r3, r3, #24
 8000adc:	b25a      	sxtb	r2, r3
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	b25b      	sxtb	r3, r3
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8000aec:	bf00      	nop
 8000aee:	7cfb      	ldrb	r3, [r7, #19]
 8000af0:	b299      	uxth	r1, r3
 8000af2:	f107 0212 	add.w	r2, r7, #18
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f000 fed4 	bl	80018ac <HAL_I2C_Master_Transmit>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d1f1      	bne.n	8000aee <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b03      	cmp	r3, #3
 8000b0e:	d81f      	bhi.n	8000b50 <SD_MPU6050_SetAccelerometer+0xd4>
 8000b10:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <SD_MPU6050_SetAccelerometer+0x9c>)
 8000b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b16:	bf00      	nop
 8000b18:	08000b29 	.word	0x08000b29
 8000b1c:	08000b33 	.word	0x08000b33
 8000b20:	08000b3d 	.word	0x08000b3d
 8000b24:	08000b47 	.word	0x08000b47
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8000b2e:	609a      	str	r2, [r3, #8]
			break;
 8000b30:	e00f      	b.n	8000b52 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8000b38:	609a      	str	r2, [r3, #8]
			break;
 8000b3a:	e00a      	b.n	8000b52 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8000b42:	609a      	str	r2, [r3, #8]
			break;
 8000b44:	e005      	b.n	8000b52 <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8000b4c:	609a      	str	r2, [r3, #8]
			break;
 8000b4e:	e000      	b.n	8000b52 <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 8000b50:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8000b52:	2300      	movs	r3, #0
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b088      	sub	sp, #32
 8000b60:	af02      	add	r7, sp, #8
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	4613      	mov	r3, r2
 8000b68:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8000b74:	231b      	movs	r3, #27
 8000b76:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8000b78:	bf00      	nop
 8000b7a:	7cfb      	ldrb	r3, [r7, #19]
 8000b7c:	b299      	uxth	r1, r3
 8000b7e:	f107 0211 	add.w	r2, r7, #17
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	9300      	str	r3, [sp, #0]
 8000b88:	2301      	movs	r3, #1
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f000 fe8e 	bl	80018ac <HAL_I2C_Master_Transmit>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d1f1      	bne.n	8000b7a <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8000b96:	bf00      	nop
 8000b98:	7cfb      	ldrb	r3, [r7, #19]
 8000b9a:	b299      	uxth	r1, r3
 8000b9c:	f107 0212 	add.w	r2, r7, #18
 8000ba0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba4:	9300      	str	r3, [sp, #0]
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	6978      	ldr	r0, [r7, #20]
 8000baa:	f000 ff73 	bl	8001a94 <HAL_I2C_Master_Receive>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d1f1      	bne.n	8000b98 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8000bb4:	7cbb      	ldrb	r3, [r7, #18]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	f023 0318 	bic.w	r3, r3, #24
 8000bbc:	b25a      	sxtb	r2, r3
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	00db      	lsls	r3, r3, #3
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	b25b      	sxtb	r3, r3
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8000bcc:	bf00      	nop
 8000bce:	7cfb      	ldrb	r3, [r7, #19]
 8000bd0:	b299      	uxth	r1, r3
 8000bd2:	f107 0212 	add.w	r2, r7, #18
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	2301      	movs	r3, #1
 8000bde:	6978      	ldr	r0, [r7, #20]
 8000be0:	f000 fe64 	bl	80018ac <HAL_I2C_Master_Transmit>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f1      	bne.n	8000bce <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8000bea:	79fb      	ldrb	r3, [r7, #7]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d81b      	bhi.n	8000c28 <SD_MPU6050_SetGyroscope+0xcc>
 8000bf0:	a201      	add	r2, pc, #4	; (adr r2, 8000bf8 <SD_MPU6050_SetGyroscope+0x9c>)
 8000bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000c09 	.word	0x08000c09
 8000bfc:	08000c11 	.word	0x08000c11
 8000c00:	08000c19 	.word	0x08000c19
 8000c04:	08000c21 	.word	0x08000c21
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <SD_MPU6050_SetGyroscope+0xd8>)
 8000c0c:	605a      	str	r2, [r3, #4]
				break;
 8000c0e:	e00c      	b.n	8000c2a <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <SD_MPU6050_SetGyroscope+0xdc>)
 8000c14:	605a      	str	r2, [r3, #4]
				break;
 8000c16:	e008      	b.n	8000c2a <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <SD_MPU6050_SetGyroscope+0xe0>)
 8000c1c:	605a      	str	r2, [r3, #4]
				break;
 8000c1e:	e004      	b.n	8000c2a <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <SD_MPU6050_SetGyroscope+0xe4>)
 8000c24:	605a      	str	r2, [r3, #4]
				break;
 8000c26:	e000      	b.n	8000c2a <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8000c28:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3718      	adds	r7, #24
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	3bfa232d 	.word	0x3bfa232d
 8000c38:	3c7a232d 	.word	0x3c7a232d
 8000c3c:	3cf9c190 	.word	0x3cf9c190
 8000c40:	3d79c190 	.word	0x3d79c190

08000c44 <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08c      	sub	sp, #48	; 0x30
 8000c48:	af02      	add	r7, sp, #8
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8000c4e:	233b      	movs	r3, #59	; 0x3b
 8000c50:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8000c5e:	bf00      	nop
 8000c60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c64:	b299      	uxth	r1, r3
 8000c66:	f107 020f 	add.w	r2, r7, #15
 8000c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	2301      	movs	r3, #1
 8000c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c74:	f000 fe1a 	bl	80018ac <HAL_I2C_Master_Transmit>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <SD_MPU6050_ReadAll+0x1c>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1000) != HAL_OK);
 8000c7e:	bf00      	nop
 8000c80:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c84:	b299      	uxth	r1, r3
 8000c86:	f107 0210 	add.w	r2, r7, #16
 8000c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	230e      	movs	r3, #14
 8000c92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c94:	f000 fefe 	bl	8001a94 <HAL_I2C_Master_Receive>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d1f0      	bne.n	8000c80 <SD_MPU6050_ReadAll+0x3c>

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8000c9e:	7c3b      	ldrb	r3, [r7, #16]
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	7c7b      	ldrb	r3, [r7, #17]
 8000ca6:	b21b      	sxth	r3, r3
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	b21a      	sxth	r2, r3
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8000cb0:	7cbb      	ldrb	r3, [r7, #18]
 8000cb2:	021b      	lsls	r3, r3, #8
 8000cb4:	b21a      	sxth	r2, r3
 8000cb6:	7cfb      	ldrb	r3, [r7, #19]
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8000cc2:	7d3b      	ldrb	r3, [r7, #20]
 8000cc4:	021b      	lsls	r3, r3, #8
 8000cc6:	b21a      	sxth	r2, r3
 8000cc8:	7d7b      	ldrb	r3, [r7, #21]
 8000cca:	b21b      	sxth	r3, r3
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	b21a      	sxth	r2, r3
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8000cd4:	7dbb      	ldrb	r3, [r7, #22]
 8000cd6:	021b      	lsls	r3, r3, #8
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	7dfb      	ldrb	r3, [r7, #23]
 8000cdc:	b21b      	sxth	r3, r3
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8000ce2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cee:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000d44 <SD_MPU6050_ReadAll+0x100>
 8000cf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000cf6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000d48 <SD_MPU6050_ReadAll+0x104>
 8000cfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8000d04:	7e3b      	ldrb	r3, [r7, #24]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	b21a      	sxth	r2, r3
 8000d0a:	7e7b      	ldrb	r3, [r7, #25]
 8000d0c:	b21b      	sxth	r3, r3
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	b21a      	sxth	r2, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 8000d16:	7ebb      	ldrb	r3, [r7, #26]
 8000d18:	021b      	lsls	r3, r3, #8
 8000d1a:	b21a      	sxth	r2, r3
 8000d1c:	7efb      	ldrb	r3, [r7, #27]
 8000d1e:	b21b      	sxth	r3, r3
 8000d20:	4313      	orrs	r3, r2
 8000d22:	b21a      	sxth	r2, r3
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 8000d28:	7f3b      	ldrb	r3, [r7, #28]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	7f7b      	ldrb	r3, [r7, #29]
 8000d30:	b21b      	sxth	r3, r3
 8000d32:	4313      	orrs	r3, r2
 8000d34:	b21a      	sxth	r2, r3
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8000d3a:	2300      	movs	r3, #0
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3728      	adds	r7, #40	; 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	43aa0000 	.word	0x43aa0000
 8000d48:	42121eb8 	.word	0x42121eb8

08000d4c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d52:	4a1c      	ldr	r2, [pc, #112]	; (8000dc4 <MX_SPI1_Init+0x78>)
 8000d54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d5e:	4b18      	ldr	r3, [pc, #96]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d64:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d82:	2208      	movs	r2, #8
 8000d84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000d9a:	2207      	movs	r2, #7
 8000d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000da6:	2208      	movs	r2, #8
 8000da8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_SPI1_Init+0x74>)
 8000dac:	f002 fcaa 	bl	8003704 <HAL_SPI_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000db6:	f7ff fdc3 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000360 	.word	0x20000360
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_SPI_MspInit+0x7c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d128      	bne.n	8000e3c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_SPI_MspInit+0x80>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_SPI_MspInit+0x80>)
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df4:	6613      	str	r3, [r2, #96]	; 0x60
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_SPI_MspInit+0x80>)
 8000df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_SPI_MspInit+0x80>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_SPI_MspInit+0x80>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_SPI_MspInit+0x80>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e1a:	23e0      	movs	r3, #224	; 0xe0
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f000 fb0c 	bl	8001454 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	3728      	adds	r7, #40	; 0x28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40013000 	.word	0x40013000
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_MspInit+0x44>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e56:	4a0e      	ldr	r2, [pc, #56]	; (8000e90 <HAL_MspInit+0x44>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e5e:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <HAL_MspInit+0x44>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_MspInit+0x44>)
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <HAL_MspInit+0x44>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6593      	str	r3, [r2, #88]	; 0x58
 8000e76:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_MspInit+0x44>)
 8000e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40021000 	.word	0x40021000

08000e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08c      	sub	sp, #48	; 0x30
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	2019      	movs	r0, #25
 8000eaa:	f000 faa9 	bl	8001400 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000eae:	2019      	movs	r0, #25
 8000eb0:	f000 fac2 	bl	8001438 <HAL_NVIC_EnableIRQ>
  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_InitTick+0x9c>)
 8000eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_InitTick+0x9c>)
 8000eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebe:	6613      	str	r3, [r2, #96]	; 0x60
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_InitTick+0x9c>)
 8000ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ecc:	f107 0210 	add.w	r2, r7, #16
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f002 f88c 	bl	8002ff4 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000edc:	f002 f874 	bl	8002fc8 <HAL_RCC_GetPCLK2Freq>
 8000ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee4:	4a13      	ldr	r2, [pc, #76]	; (8000f34 <HAL_InitTick+0xa0>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	0c9b      	lsrs	r3, r3, #18
 8000eec:	3b01      	subs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_InitTick+0xa4>)
 8000ef2:	4a12      	ldr	r2, [pc, #72]	; (8000f3c <HAL_InitTick+0xa8>)
 8000ef4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_InitTick+0xa4>)
 8000ef8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000efc:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000efe:	4a0e      	ldr	r2, [pc, #56]	; (8000f38 <HAL_InitTick+0xa4>)
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_InitTick+0xa4>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_InitTick+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <HAL_InitTick+0xa4>)
 8000f12:	f003 f80d 	bl	8003f30 <HAL_TIM_Base_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d104      	bne.n	8000f26 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8000f1c:	4806      	ldr	r0, [pc, #24]	; (8000f38 <HAL_InitTick+0xa4>)
 8000f1e:	f003 f869 	bl	8003ff4 <HAL_TIM_Base_Start_IT>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3730      	adds	r7, #48	; 0x30
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	200003c4 	.word	0x200003c4
 8000f3c:	40014400 	.word	0x40014400

08000f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <NMI_Handler+0x4>

08000f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4a:	e7fe      	b.n	8000f4a <HardFault_Handler+0x4>

08000f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <MemManage_Handler+0x4>

08000f52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <BusFault_Handler+0x4>

08000f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <UsageFault_Handler+0x4>

08000f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000f9e:	f003 f87d 	bl	800409c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200003c4 	.word	0x200003c4

08000fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <_sbrk+0x5c>)
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <_sbrk+0x60>)
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <_sbrk+0x64>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d102      	bne.n	8000fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <_sbrk+0x64>)
 8000fca:	4a12      	ldr	r2, [pc, #72]	; (8001014 <_sbrk+0x68>)
 8000fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <_sbrk+0x64>)
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d207      	bcs.n	8000fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fdc:	f004 fc0c 	bl	80057f8 <__errno>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	220c      	movs	r2, #12
 8000fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fea:	e009      	b.n	8001000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fec:	4b08      	ldr	r3, [pc, #32]	; (8001010 <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff2:	4b07      	ldr	r3, [pc, #28]	; (8001010 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	4a05      	ldr	r2, [pc, #20]	; (8001010 <_sbrk+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
}
 8001000:	4618      	mov	r0, r3
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20010000 	.word	0x20010000
 800100c:	00000400 	.word	0x00000400
 8001010:	200000a4 	.word	0x200000a4
 8001014:	20000918 	.word	0x20000918

08001018 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <SystemInit+0x5c>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001022:	4a14      	ldr	r2, [pc, #80]	; (8001074 <SystemInit+0x5c>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <SystemInit+0x60>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <SystemInit+0x60>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <SystemInit+0x60>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <SystemInit+0x60>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a0d      	ldr	r2, [pc, #52]	; (8001078 <SystemInit+0x60>)
 8001044:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001048:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800104c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <SystemInit+0x60>)
 8001050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001054:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <SystemInit+0x60>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <SystemInit+0x60>)
 800105c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001060:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SystemInit+0x60>)
 8001064:	2200      	movs	r2, #0
 8001066:	619a      	str	r2, [r3, #24]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000ed00 	.word	0xe000ed00
 8001078:	40021000 	.word	0x40021000

0800107c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 8001082:	4a15      	ldr	r2, [pc, #84]	; (80010d8 <MX_USART2_UART_Init+0x5c>)
 8001084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 8001088:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800108c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010a2:	220c      	movs	r2, #12
 80010a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010be:	4805      	ldr	r0, [pc, #20]	; (80010d4 <MX_USART2_UART_Init+0x58>)
 80010c0:	f003 f9b6 	bl	8004430 <HAL_UART_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010ca:	f7ff fc39 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000410 	.word	0x20000410
 80010d8:	40004400 	.word	0x40004400

080010dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a20      	ldr	r2, [pc, #128]	; (800117c <HAL_UART_MspInit+0xa0>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d13a      	bne.n	8001174 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <HAL_UART_MspInit+0xa4>)
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <HAL_UART_MspInit+0xa4>)
 8001104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001108:	6593      	str	r3, [r2, #88]	; 0x58
 800110a:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <HAL_UART_MspInit+0xa4>)
 800110c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001116:	4b1a      	ldr	r3, [pc, #104]	; (8001180 <HAL_UART_MspInit+0xa4>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800111a:	4a19      	ldr	r2, [pc, #100]	; (8001180 <HAL_UART_MspInit+0xa4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <HAL_UART_MspInit+0xa4>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800112e:	2304      	movs	r3, #4
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114c:	f000 f982 	bl	8001454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001150:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001154:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001162:	2303      	movs	r3, #3
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001166:	f107 0314 	add.w	r3, r7, #20
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001170:	f000 f970 	bl	8001454 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	; 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40004400 	.word	0x40004400
 8001180:	40021000 	.word	0x40021000

08001184 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001188:	f7ff ff46 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800118c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800118e:	e003      	b.n	8001198 <LoopCopyDataInit>

08001190 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001192:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001194:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001196:	3104      	adds	r1, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001198:	480a      	ldr	r0, [pc, #40]	; (80011c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800119c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800119e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80011a0:	d3f6      	bcc.n	8001190 <CopyDataInit>
	ldr	r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80011a4:	e002      	b.n	80011ac <LoopFillZerobss>

080011a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80011a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80011a8:	f842 3b04 	str.w	r3, [r2], #4

080011ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80011ac:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <LoopForever+0x16>)
	cmp	r2, r3
 80011ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80011b0:	d3f9      	bcc.n	80011a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f004 fb27 	bl	8005804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff faa5 	bl	8000704 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011bc:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80011c0:	0800619c 	.word	0x0800619c
	ldr	r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80011c8:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80011cc:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80011d0:	20000918 	.word	0x20000918

080011d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC1_IRQHandler>

080011d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f902 	bl	80013ea <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fe54 	bl	8000e94 <HAL_InitTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	71fb      	strb	r3, [r7, #7]
 80011f6:	e001      	b.n	80011fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f8:	f7ff fe28 	bl	8000e4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x20>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x24>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4413      	add	r3, r2
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <HAL_IncTick+0x24>)
 800121a:	6013      	str	r3, [r2, #0]
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000008 	.word	0x20000008
 800122c:	20000494 	.word	0x20000494

08001230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return uwTick;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GetTick+0x14>)
 8001236:	681b      	ldr	r3, [r3, #0]
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000494 	.word	0x20000494

08001248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001250:	f7ff ffee 	bl	8001230 <HAL_GetTick>
 8001254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001260:	d005      	beq.n	800126e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001262:	4b0a      	ldr	r3, [pc, #40]	; (800128c <HAL_Delay+0x44>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800126e:	bf00      	nop
 8001270:	f7ff ffde 	bl	8001230 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	429a      	cmp	r2, r3
 800127e:	d8f7      	bhi.n	8001270 <HAL_Delay+0x28>
  {
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000008 	.word	0x20000008

08001290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012ac:	4013      	ands	r3, r2
 80012ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <__NVIC_SetPriorityGrouping+0x44>)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	60d3      	str	r3, [r2, #12]
}
 80012c8:	bf00      	nop
 80012ca:	3714      	adds	r7, #20
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <__NVIC_GetPriorityGrouping+0x18>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	0a1b      	lsrs	r3, r3, #8
 80012e2:	f003 0307 	and.w	r3, r3, #7
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	2b00      	cmp	r3, #0
 8001304:	db0b      	blt.n	800131e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	f003 021f 	and.w	r2, r3, #31
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <__NVIC_EnableIRQ+0x38>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	095b      	lsrs	r3, r3, #5
 8001314:	2001      	movs	r0, #1
 8001316:	fa00 f202 	lsl.w	r2, r0, r2
 800131a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000e100 	.word	0xe000e100

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ff4c 	bl	8001290 <__NVIC_SetPriorityGrouping>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
 800140c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001412:	f7ff ff61 	bl	80012d8 <__NVIC_GetPriorityGrouping>
 8001416:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	6978      	ldr	r0, [r7, #20]
 800141e:	f7ff ffb1 	bl	8001384 <NVIC_EncodePriority>
 8001422:	4602      	mov	r2, r0
 8001424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001428:	4611      	mov	r1, r2
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff80 	bl	8001330 <__NVIC_SetPriority>
}
 8001430:	bf00      	nop
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff54 	bl	80012f4 <__NVIC_EnableIRQ>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b087      	sub	sp, #28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	e148      	b.n	80016f6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	2101      	movs	r1, #1
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	4013      	ands	r3, r2
 8001472:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 813a 	beq.w	80016f0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d00b      	beq.n	800149c <HAL_GPIO_Init+0x48>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001490:	2b11      	cmp	r3, #17
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d130      	bne.n	80014fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014d2:	2201      	movs	r2, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	f003 0201 	and.w	r2, r3, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	2203      	movs	r2, #3
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	4013      	ands	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0xea>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b12      	cmp	r3, #18
 800153c:	d123      	bne.n	8001586 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	08da      	lsrs	r2, r3, #3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	3208      	adds	r2, #8
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0307 	and.w	r3, r3, #7
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	220f      	movs	r2, #15
 8001556:	fa02 f303 	lsl.w	r3, r2, r3
 800155a:	43db      	mvns	r3, r3
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	4013      	ands	r3, r2
 8001560:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	691a      	ldr	r2, [r3, #16]
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	08da      	lsrs	r2, r3, #3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3208      	adds	r2, #8
 8001580:	6939      	ldr	r1, [r7, #16]
 8001582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	693a      	ldr	r2, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0203 	and.w	r2, r3, #3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8094 	beq.w	80016f0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c8:	4b52      	ldr	r3, [pc, #328]	; (8001714 <HAL_GPIO_Init+0x2c0>)
 80015ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015cc:	4a51      	ldr	r2, [pc, #324]	; (8001714 <HAL_GPIO_Init+0x2c0>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6613      	str	r3, [r2, #96]	; 0x60
 80015d4:	4b4f      	ldr	r3, [pc, #316]	; (8001714 <HAL_GPIO_Init+0x2c0>)
 80015d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015e0:	4a4d      	ldr	r2, [pc, #308]	; (8001718 <HAL_GPIO_Init+0x2c4>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0303 	and.w	r3, r3, #3
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800160a:	d00d      	beq.n	8001628 <HAL_GPIO_Init+0x1d4>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a43      	ldr	r2, [pc, #268]	; (800171c <HAL_GPIO_Init+0x2c8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d007      	beq.n	8001624 <HAL_GPIO_Init+0x1d0>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a42      	ldr	r2, [pc, #264]	; (8001720 <HAL_GPIO_Init+0x2cc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d101      	bne.n	8001620 <HAL_GPIO_Init+0x1cc>
 800161c:	2302      	movs	r3, #2
 800161e:	e004      	b.n	800162a <HAL_GPIO_Init+0x1d6>
 8001620:	2307      	movs	r3, #7
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x1d6>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <HAL_GPIO_Init+0x1d6>
 8001628:	2300      	movs	r3, #0
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	f002 0203 	and.w	r2, r2, #3
 8001630:	0092      	lsls	r2, r2, #2
 8001632:	4093      	lsls	r3, r2
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800163a:	4937      	ldr	r1, [pc, #220]	; (8001718 <HAL_GPIO_Init+0x2c4>)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001648:	4b36      	ldr	r3, [pc, #216]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	43db      	mvns	r3, r3
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800166c:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001672:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	43db      	mvns	r3, r3
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	4013      	ands	r3, r2
 8001680:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016c0:	4a18      	ldr	r2, [pc, #96]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016ea:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <HAL_GPIO_Init+0x2d0>)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	3301      	adds	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001700:	2b00      	cmp	r3, #0
 8001702:	f47f aeaf 	bne.w	8001464 <HAL_GPIO_Init+0x10>
  }
}
 8001706:	bf00      	nop
 8001708:	bf00      	nop
 800170a:	371c      	adds	r7, #28
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	40021000 	.word	0x40021000
 8001718:	40010000 	.word	0x40010000
 800171c:	48000400 	.word	0x48000400
 8001720:	48000800 	.word	0x48000800
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
 8001734:	4613      	mov	r3, r2
 8001736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001738:	787b      	ldrb	r3, [r7, #1]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001744:	e002      	b.n	800174c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001746:	887a      	ldrh	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4013      	ands	r3, r2
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	43d9      	mvns	r1, r3
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	400b      	ands	r3, r1
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	619a      	str	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e081      	b.n	80018a2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d106      	bne.n	80017b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7fe ff62 	bl	800067c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2224      	movs	r2, #36	; 0x24
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d107      	bne.n	8001806 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	e006      	b.n	8001814 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001812:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d104      	bne.n	8001826 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001824:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001834:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001838:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001848:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	ea42 0103 	orr.w	r1, r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	021a      	lsls	r2, r3, #8
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	430a      	orrs	r2, r1
 8001862:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69d9      	ldr	r1, [r3, #28]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1a      	ldr	r2, [r3, #32]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	607a      	str	r2, [r7, #4]
 80018b6:	461a      	mov	r2, r3
 80018b8:	460b      	mov	r3, r1
 80018ba:	817b      	strh	r3, [r7, #10]
 80018bc:	4613      	mov	r3, r2
 80018be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	2b20      	cmp	r3, #32
 80018ca:	f040 80da 	bne.w	8001a82 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d101      	bne.n	80018dc <HAL_I2C_Master_Transmit+0x30>
 80018d8:	2302      	movs	r3, #2
 80018da:	e0d3      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1d8>
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018e4:	f7ff fca4 	bl	8001230 <HAL_GetTick>
 80018e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2319      	movs	r3, #25
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f000 faed 	bl	8001ed6 <I2C_WaitOnFlagUntilTimeout>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e0be      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2221      	movs	r2, #33	; 0x21
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2210      	movs	r2, #16
 8001912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	893a      	ldrh	r2, [r7, #8]
 8001926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001932:	b29b      	uxth	r3, r3
 8001934:	2bff      	cmp	r3, #255	; 0xff
 8001936:	d90e      	bls.n	8001956 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	22ff      	movs	r2, #255	; 0xff
 800193c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	b2da      	uxtb	r2, r3
 8001944:	8979      	ldrh	r1, [r7, #10]
 8001946:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <HAL_I2C_Master_Transmit+0x1e0>)
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	f000 fc50 	bl	80021f4 <I2C_TransferConfig>
 8001954:	e06c      	b.n	8001a30 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001964:	b2da      	uxtb	r2, r3
 8001966:	8979      	ldrh	r1, [r7, #10]
 8001968:	4b48      	ldr	r3, [pc, #288]	; (8001a8c <HAL_I2C_Master_Transmit+0x1e0>)
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f000 fc3f 	bl	80021f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001976:	e05b      	b.n	8001a30 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6a39      	ldr	r1, [r7, #32]
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 faea 	bl	8001f56 <I2C_WaitOnTXISFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e07b      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	781a      	ldrb	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	3b01      	subs	r3, #1
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	3b01      	subs	r3, #1
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d034      	beq.n	8001a30 <HAL_I2C_Master_Transmit+0x184>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d130      	bne.n	8001a30 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	6a3b      	ldr	r3, [r7, #32]
 80019d4:	2200      	movs	r2, #0
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f000 fa7c 	bl	8001ed6 <I2C_WaitOnFlagUntilTimeout>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e04d      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	2bff      	cmp	r3, #255	; 0xff
 80019f0:	d90e      	bls.n	8001a10 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	22ff      	movs	r2, #255	; 0xff
 80019f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	b2da      	uxtb	r2, r3
 80019fe:	8979      	ldrh	r1, [r7, #10]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fbf3 	bl	80021f4 <I2C_TransferConfig>
 8001a0e:	e00f      	b.n	8001a30 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	8979      	ldrh	r1, [r7, #10]
 8001a22:	2300      	movs	r3, #0
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fbe2 	bl	80021f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d19e      	bne.n	8001978 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	6a39      	ldr	r1, [r7, #32]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 fac9 	bl	8001fd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e01a      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2220      	movs	r2, #32
 8001a54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6859      	ldr	r1, [r3, #4]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_I2C_Master_Transmit+0x1e4>)
 8001a62:	400b      	ands	r3, r1
 8001a64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	e000      	b.n	8001a84 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001a82:	2302      	movs	r3, #2
  }
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	80002000 	.word	0x80002000
 8001a90:	fe00e800 	.word	0xfe00e800

08001a94 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	817b      	strh	r3, [r7, #10]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	2b20      	cmp	r3, #32
 8001ab2:	f040 80db 	bne.w	8001c6c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_I2C_Master_Receive+0x30>
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e0d4      	b.n	8001c6e <HAL_I2C_Master_Receive+0x1da>
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001acc:	f7ff fbb0 	bl	8001230 <HAL_GetTick>
 8001ad0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	2319      	movs	r3, #25
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 f9f9 	bl	8001ed6 <I2C_WaitOnFlagUntilTimeout>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0bf      	b.n	8001c6e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2222      	movs	r2, #34	; 0x22
 8001af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2210      	movs	r2, #16
 8001afa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2200      	movs	r2, #0
 8001b02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	893a      	ldrh	r2, [r7, #8]
 8001b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2200      	movs	r2, #0
 8001b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2bff      	cmp	r3, #255	; 0xff
 8001b1e:	d90e      	bls.n	8001b3e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	22ff      	movs	r2, #255	; 0xff
 8001b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	8979      	ldrh	r1, [r7, #10]
 8001b2e:	4b52      	ldr	r3, [pc, #328]	; (8001c78 <HAL_I2C_Master_Receive+0x1e4>)
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fb5c 	bl	80021f4 <I2C_TransferConfig>
 8001b3c:	e06d      	b.n	8001c1a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	8979      	ldrh	r1, [r7, #10]
 8001b50:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <HAL_I2C_Master_Receive+0x1e4>)
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f000 fb4b 	bl	80021f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001b5e:	e05c      	b.n	8001c1a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	6a39      	ldr	r1, [r7, #32]
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 fa73 	bl	8002050 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e07c      	b.n	8001c6e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	b2d2      	uxtb	r2, r2
 8001b80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	1c5a      	adds	r2, r3, #1
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d034      	beq.n	8001c1a <HAL_I2C_Master_Receive+0x186>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d130      	bne.n	8001c1a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2180      	movs	r1, #128	; 0x80
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f000 f987 	bl	8001ed6 <I2C_WaitOnFlagUntilTimeout>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e04d      	b.n	8001c6e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2bff      	cmp	r3, #255	; 0xff
 8001bda:	d90e      	bls.n	8001bfa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	22ff      	movs	r2, #255	; 0xff
 8001be0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	8979      	ldrh	r1, [r7, #10]
 8001bea:	2300      	movs	r3, #0
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f000 fafe 	bl	80021f4 <I2C_TransferConfig>
 8001bf8:	e00f      	b.n	8001c1a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	8979      	ldrh	r1, [r7, #10]
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f000 faed 	bl	80021f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d19d      	bne.n	8001b60 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	6a39      	ldr	r1, [r7, #32]
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 f9d4 	bl	8001fd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e01a      	b.n	8001c6e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_I2C_Master_Receive+0x1e8>)
 8001c4c:	400b      	ands	r3, r1
 8001c4e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2220      	movs	r2, #32
 8001c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e000      	b.n	8001c6e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001c6c:	2302      	movs	r3, #2
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	80002400 	.word	0x80002400
 8001c7c:	fe00e800 	.word	0xfe00e800

08001c80 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	f040 80f1 	bne.w	8001e84 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cb0:	d101      	bne.n	8001cb6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	e0e7      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_I2C_IsDeviceReady+0x44>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e0e0      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x206>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2224      	movs	r2, #36	; 0x24
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_I2C_IsDeviceReady+0x72>
 8001ce2:	897b      	ldrh	r3, [r7, #10]
 8001ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ce8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001cf0:	e004      	b.n	8001cfc <HAL_I2C_IsDeviceReady+0x7c>
 8001cf2:	897b      	ldrh	r3, [r7, #10]
 8001cf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cf8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001cfc:	68fa      	ldr	r2, [r7, #12]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001d02:	f7ff fa95 	bl	8001230 <HAL_GetTick>
 8001d06:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0320 	and.w	r3, r3, #32
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	bf0c      	ite	eq
 8001d16:	2301      	moveq	r3, #1
 8001d18:	2300      	movne	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b10      	cmp	r3, #16
 8001d2a:	bf0c      	ite	eq
 8001d2c:	2301      	moveq	r3, #1
 8001d2e:	2300      	movne	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d34:	e034      	b.n	8001da0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d3c:	d01a      	beq.n	8001d74 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7ff fa77 	bl	8001230 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <HAL_I2C_IsDeviceReady+0xd4>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10f      	bne.n	8001d74 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2220      	movs	r2, #32
 8001d58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	f043 0220 	orr.w	r2, r3, #32
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e088      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f003 0320 	and.w	r3, r3, #32
 8001d7e:	2b20      	cmp	r3, #32
 8001d80:	bf0c      	ite	eq
 8001d82:	2301      	moveq	r3, #1
 8001d84:	2300      	movne	r3, #0
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b10      	cmp	r3, #16
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001da0:	7ffb      	ldrb	r3, [r7, #31]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_I2C_IsDeviceReady+0x12c>
 8001da6:	7fbb      	ldrb	r3, [r7, #30]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d0c4      	beq.n	8001d36 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b10      	cmp	r3, #16
 8001db8:	d01a      	beq.n	8001df0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f886 	bl	8001ed6 <I2C_WaitOnFlagUntilTimeout>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e058      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001dec:	2300      	movs	r3, #0
 8001dee:	e04a      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2200      	movs	r2, #0
 8001df8:	2120      	movs	r1, #32
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f000 f86b 	bl	8001ed6 <I2C_WaitOnFlagUntilTimeout>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e03d      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2210      	movs	r2, #16
 8001e10:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2220      	movs	r2, #32
 8001e18:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d118      	bne.n	8001e54 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e30:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2120      	movs	r1, #32
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f84a 	bl	8001ed6 <I2C_WaitOnFlagUntilTimeout>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e01c      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2220      	movs	r2, #32
 8001e52:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	f63f af3b 	bhi.w	8001cda <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e70:	f043 0220 	orr.w	r2, r3, #32
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e000      	b.n	8001e86 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3720      	adds	r7, #32
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d103      	bne.n	8001eac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d007      	beq.n	8001eca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0201 	orr.w	r2, r2, #1
 8001ec8:	619a      	str	r2, [r3, #24]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	60f8      	str	r0, [r7, #12]
 8001ede:	60b9      	str	r1, [r7, #8]
 8001ee0:	603b      	str	r3, [r7, #0]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee6:	e022      	b.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001eee:	d01e      	beq.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef0:	f7ff f99e 	bl	8001230 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d302      	bcc.n	8001f06 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d113      	bne.n	8001f2e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	f043 0220 	orr.w	r2, r3, #32
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00f      	b.n	8001f4e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	699a      	ldr	r2, [r3, #24]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4013      	ands	r3, r2
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	bf0c      	ite	eq
 8001f3e:	2301      	moveq	r3, #1
 8001f40:	2300      	movne	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d0cd      	beq.n	8001ee8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f62:	e02c      	b.n	8001fbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 f8dd 	bl	8002128 <I2C_IsAcknowledgeFailed>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e02a      	b.n	8001fce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f7e:	d01e      	beq.n	8001fbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f80:	f7ff f956 	bl	8001230 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68ba      	ldr	r2, [r7, #8]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d302      	bcc.n	8001f96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d113      	bne.n	8001fbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f9a:	f043 0220 	orr.w	r2, r3, #32
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2220      	movs	r2, #32
 8001fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e007      	b.n	8001fce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d1cb      	bne.n	8001f64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fe2:	e028      	b.n	8002036 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f000 f89d 	bl	8002128 <I2C_IsAcknowledgeFailed>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e026      	b.n	8002046 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff8:	f7ff f91a 	bl	8001230 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	429a      	cmp	r2, r3
 8002006:	d302      	bcc.n	800200e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d113      	bne.n	8002036 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	f043 0220 	orr.w	r2, r3, #32
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2220      	movs	r2, #32
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e007      	b.n	8002046 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b20      	cmp	r3, #32
 8002042:	d1cf      	bne.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800205c:	e055      	b.n	800210a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f860 	bl	8002128 <I2C_IsAcknowledgeFailed>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e053      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	f003 0320 	and.w	r3, r3, #32
 800207c:	2b20      	cmp	r3, #32
 800207e:	d129      	bne.n	80020d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b04      	cmp	r3, #4
 800208c:	d105      	bne.n	800209a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002096:	2300      	movs	r3, #0
 8002098:	e03f      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2220      	movs	r2, #32
 80020a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80020ae:	400b      	ands	r3, r1
 80020b0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e022      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020d4:	f7ff f8ac 	bl	8001230 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68ba      	ldr	r2, [r7, #8]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d302      	bcc.n	80020ea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2220      	movs	r2, #32
 80020fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e007      	b.n	800211a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b04      	cmp	r3, #4
 8002116:	d1a2      	bne.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	fe00e800 	.word	0xfe00e800

08002128 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b10      	cmp	r3, #16
 8002140:	d151      	bne.n	80021e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002142:	e022      	b.n	800218a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800214a:	d01e      	beq.n	800218a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214c:	f7ff f870 	bl	8001230 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	429a      	cmp	r2, r3
 800215a:	d302      	bcc.n	8002162 <I2C_IsAcknowledgeFailed+0x3a>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d113      	bne.n	800218a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f043 0220 	orr.w	r2, r3, #32
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e02e      	b.n	80021e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b20      	cmp	r3, #32
 8002196:	d1d5      	bne.n	8002144 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2210      	movs	r2, #16
 800219e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2220      	movs	r2, #32
 80021a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fe70 	bl	8001e8e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b0d      	ldr	r3, [pc, #52]	; (80021f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80021ba:	400b      	ands	r3, r1
 80021bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	f043 0204 	orr.w	r2, r3, #4
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	fe00e800 	.word	0xfe00e800

080021f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	460b      	mov	r3, r1
 8002200:	817b      	strh	r3, [r7, #10]
 8002202:	4613      	mov	r3, r2
 8002204:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	0d5b      	lsrs	r3, r3, #21
 8002210:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002214:	4b0d      	ldr	r3, [pc, #52]	; (800224c <I2C_TransferConfig+0x58>)
 8002216:	430b      	orrs	r3, r1
 8002218:	43db      	mvns	r3, r3
 800221a:	ea02 0103 	and.w	r1, r2, r3
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002224:	7a7b      	ldrb	r3, [r7, #9]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	431a      	orrs	r2, r3
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	03ff63ff 	.word	0x03ff63ff

08002250 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b20      	cmp	r3, #32
 8002264:	d138      	bne.n	80022d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002270:	2302      	movs	r3, #2
 8002272:	e032      	b.n	80022da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f022 0201 	bic.w	r2, r2, #1
 8002292:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80022a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6819      	ldr	r1, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	e000      	b.n	80022da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022d8:	2302      	movs	r3, #2
  }
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b085      	sub	sp, #20
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
 80022ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d139      	bne.n	8002370 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002306:	2302      	movs	r3, #2
 8002308:	e033      	b.n	8002372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2224      	movs	r2, #36	; 0x24
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0201 	bic.w	r2, r2, #1
 8002328:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002338:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	4313      	orrs	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0201 	orr.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002370:	2302      	movs	r3, #2
  }
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a04      	ldr	r2, [pc, #16]	; (800239c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	40007000 	.word	0x40007000

080023a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40007000 	.word	0x40007000

080023bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ca:	d130      	bne.n	800242e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80023cc:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023d8:	d038      	beq.n	800244c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023e2:	4a1e      	ldr	r2, [pc, #120]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023ea:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2232      	movs	r2, #50	; 0x32
 80023f0:	fb02 f303 	mul.w	r3, r2, r3
 80023f4:	4a1b      	ldr	r2, [pc, #108]	; (8002464 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	0c9b      	lsrs	r3, r3, #18
 80023fc:	3301      	adds	r3, #1
 80023fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002400:	e002      	b.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	3b01      	subs	r3, #1
 8002406:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002414:	d102      	bne.n	800241c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d1f2      	bne.n	8002402 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002428:	d110      	bne.n	800244c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e00f      	b.n	800244e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243a:	d007      	beq.n	800244c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002444:	4a05      	ldr	r2, [pc, #20]	; (800245c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	40007000 	.word	0x40007000
 8002460:	20000000 	.word	0x20000000
 8002464:	431bde83 	.word	0x431bde83

08002468 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d102      	bne.n	800247c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	f000 bc11 	b.w	8002c9e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247c:	4ba0      	ldr	r3, [pc, #640]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 030c 	and.w	r3, r3, #12
 8002484:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002486:	4b9e      	ldr	r3, [pc, #632]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0310 	and.w	r3, r3, #16
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80e4 	beq.w	8002666 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <HAL_RCC_OscConfig+0x4c>
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	f040 808b 	bne.w	80025c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	f040 8087 	bne.w	80025c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b4:	4b92      	ldr	r3, [pc, #584]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_OscConfig+0x64>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e3e8      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	4b8b      	ldr	r3, [pc, #556]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_RCC_OscConfig+0x7e>
 80024dc:	4b88      	ldr	r3, [pc, #544]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e4:	e005      	b.n	80024f2 <HAL_RCC_OscConfig+0x8a>
 80024e6:	4b86      	ldr	r3, [pc, #536]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d223      	bcs.n	800253e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 fdac 	bl	8003058 <RCC_SetFlashLatencyFromMSIRange>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e3c9      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250a:	4b7d      	ldr	r3, [pc, #500]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7c      	ldr	r2, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002510:	f043 0308 	orr.w	r3, r3, #8
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b7a      	ldr	r3, [pc, #488]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4977      	ldr	r1, [pc, #476]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002528:	4b75      	ldr	r3, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	4972      	ldr	r1, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
 800253c:	e025      	b.n	800258a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253e:	4b70      	ldr	r3, [pc, #448]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6f      	ldr	r2, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	496a      	ldr	r1, [pc, #424]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255c:	4b68      	ldr	r3, [pc, #416]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	4965      	ldr	r1, [pc, #404]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fd6c 	bl	8003058 <RCC_SetFlashLatencyFromMSIRange>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e389      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800258a:	f000 fc6f 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 800258e:	4602      	mov	r2, r0
 8002590:	4b5b      	ldr	r3, [pc, #364]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	495a      	ldr	r1, [pc, #360]	; (8002704 <HAL_RCC_OscConfig+0x29c>)
 800259c:	5ccb      	ldrb	r3, [r1, r3]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	fa22 f303 	lsr.w	r3, r2, r3
 80025a6:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_OscConfig+0x2a0>)
 80025a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025aa:	4b58      	ldr	r3, [pc, #352]	; (800270c <HAL_RCC_OscConfig+0x2a4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fc70 	bl	8000e94 <HAL_InitTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d052      	beq.n	8002664 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	e36d      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d032      	beq.n	8002630 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ca:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4c      	ldr	r2, [pc, #304]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fe2b 	bl	8001230 <HAL_GetTick>
 80025da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025de:	f7fe fe27 	bl	8001230 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e356      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025fc:	4b40      	ldr	r3, [pc, #256]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	493a      	ldr	r1, [pc, #232]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261a:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	4935      	ldr	r1, [pc, #212]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
 800262e:	e01a      	b.n	8002666 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a32      	ldr	r2, [pc, #200]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800263c:	f7fe fdf8 	bl	8001230 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002644:	f7fe fdf4 	bl	8001230 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e323      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1dc>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d073      	beq.n	800275a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d005      	beq.n	8002684 <HAL_RCC_OscConfig+0x21c>
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d10e      	bne.n	800269c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d063      	beq.n	8002758 <HAL_RCC_OscConfig+0x2f0>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d15f      	bne.n	8002758 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e300      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x24c>
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0x288>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x270>
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0x288>
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a05      	ldr	r2, [pc, #20]	; (8002700 <HAL_RCC_OscConfig+0x298>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fd9a 	bl	8001230 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	e010      	b.n	8002722 <HAL_RCC_OscConfig+0x2ba>
 8002700:	40021000 	.word	0x40021000
 8002704:	08006110 	.word	0x08006110
 8002708:	20000000 	.word	0x20000000
 800270c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fd8e 	bl	8001230 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e2bd      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002722:	4baf      	ldr	r3, [pc, #700]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x2a8>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fd7e 	bl	8001230 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe fd7a 	bl	8001230 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e2a9      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274a:	4ba5      	ldr	r3, [pc, #660]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x2d0>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d060      	beq.n	8002828 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d005      	beq.n	8002778 <HAL_RCC_OscConfig+0x310>
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d119      	bne.n	80027a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d116      	bne.n	80027a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	4b99      	ldr	r3, [pc, #612]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x328>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e286      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b93      	ldr	r3, [pc, #588]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4990      	ldr	r1, [pc, #576]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a4:	e040      	b.n	8002828 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d023      	beq.n	80027f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ae:	4b8c      	ldr	r3, [pc, #560]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a8b      	ldr	r2, [pc, #556]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fd39 	bl	8001230 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c2:	f7fe fd35 	bl	8001230 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e264      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d4:	4b82      	ldr	r3, [pc, #520]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b7f      	ldr	r3, [pc, #508]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	497c      	ldr	r1, [pc, #496]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
 80027f4:	e018      	b.n	8002828 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f6:	4b7a      	ldr	r3, [pc, #488]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a79      	ldr	r2, [pc, #484]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80027fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe fd15 	bl	8001230 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe fd11 	bl	8001230 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e240      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281c:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d03c      	beq.n	80028ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01c      	beq.n	8002876 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800283c:	4b68      	ldr	r3, [pc, #416]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002842:	4a67      	ldr	r2, [pc, #412]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002844:	f043 0301 	orr.w	r3, r3, #1
 8002848:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fcf0 	bl	8001230 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002854:	f7fe fcec 	bl	8001230 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e21b      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002866:	4b5e      	ldr	r3, [pc, #376]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d0ef      	beq.n	8002854 <HAL_RCC_OscConfig+0x3ec>
 8002874:	e01b      	b.n	80028ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002876:	4b5a      	ldr	r3, [pc, #360]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800287e:	f023 0301 	bic.w	r3, r3, #1
 8002882:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002886:	f7fe fcd3 	bl	8001230 <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288e:	f7fe fccf 	bl	8001230 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1fe      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028a0:	4b4f      	ldr	r3, [pc, #316]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ef      	bne.n	800288e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0304 	and.w	r3, r3, #4
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 80a6 	beq.w	8002a08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80028c0:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d0:	4a43      	ldr	r2, [pc, #268]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6593      	str	r3, [r2, #88]	; 0x58
 80028d8:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80028da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e4:	2301      	movs	r3, #1
 80028e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e8:	4b3e      	ldr	r3, [pc, #248]	; (80029e4 <HAL_RCC_OscConfig+0x57c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d118      	bne.n	8002926 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f4:	4b3b      	ldr	r3, [pc, #236]	; (80029e4 <HAL_RCC_OscConfig+0x57c>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a3a      	ldr	r2, [pc, #232]	; (80029e4 <HAL_RCC_OscConfig+0x57c>)
 80028fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002900:	f7fe fc96 	bl	8001230 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002908:	f7fe fc92 	bl	8001230 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1c1      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800291a:	4b32      	ldr	r3, [pc, #200]	; (80029e4 <HAL_RCC_OscConfig+0x57c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d108      	bne.n	8002940 <HAL_RCC_OscConfig+0x4d8>
 800292e:	4b2c      	ldr	r3, [pc, #176]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002934:	4a2a      	ldr	r2, [pc, #168]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800293e:	e024      	b.n	800298a <HAL_RCC_OscConfig+0x522>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b05      	cmp	r3, #5
 8002946:	d110      	bne.n	800296a <HAL_RCC_OscConfig+0x502>
 8002948:	4b25      	ldr	r3, [pc, #148]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800294a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294e:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002950:	f043 0304 	orr.w	r3, r3, #4
 8002954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295e:	4a20      	ldr	r2, [pc, #128]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002968:	e00f      	b.n	800298a <HAL_RCC_OscConfig+0x522>
 800296a:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800296c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002970:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 8002982:	f023 0304 	bic.w	r3, r3, #4
 8002986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002992:	f7fe fc4d 	bl	8001230 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002998:	e00a      	b.n	80029b0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299a:	f7fe fc49 	bl	8001230 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e176      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x578>)
 80029b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0ed      	beq.n	800299a <HAL_RCC_OscConfig+0x532>
 80029be:	e01a      	b.n	80029f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe fc36 	bl	8001230 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c6:	e00f      	b.n	80029e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe fc32 	bl	8001230 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d906      	bls.n	80029e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e15f      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029e8:	4baa      	ldr	r3, [pc, #680]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1e8      	bne.n	80029c8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029f6:	7ffb      	ldrb	r3, [r7, #31]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d105      	bne.n	8002a08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029fc:	4ba5      	ldr	r3, [pc, #660]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 80029fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a00:	4aa4      	ldr	r2, [pc, #656]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d03c      	beq.n	8002a8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d01c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a1c:	4b9d      	ldr	r3, [pc, #628]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a22:	4a9c      	ldr	r2, [pc, #624]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fc00 	bl	8001230 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a34:	f7fe fbfc 	bl	8001230 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e12b      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a46:	4b93      	ldr	r3, [pc, #588]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002a48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a4c:	f003 0302 	and.w	r3, r3, #2
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0ef      	beq.n	8002a34 <HAL_RCC_OscConfig+0x5cc>
 8002a54:	e01b      	b.n	8002a8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a56:	4b8f      	ldr	r3, [pc, #572]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002a58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a5c:	4a8d      	ldr	r2, [pc, #564]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe fbe3 	bl	8001230 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a6e:	f7fe fbdf 	bl	8001230 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e10e      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a80:	4b84      	ldr	r3, [pc, #528]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002a82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1ef      	bne.n	8002a6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 8102 	beq.w	8002c9c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	f040 80c5 	bne.w	8002c2c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002aa2:	4b7c      	ldr	r3, [pc, #496]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f003 0203 	and.w	r2, r3, #3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d12c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d123      	bne.n	8002b10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d11b      	bne.n	8002b10 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d113      	bne.n	8002b10 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	3b01      	subs	r3, #1
 8002af6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d109      	bne.n	8002b10 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	085b      	lsrs	r3, r3, #1
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d067      	beq.n	8002be0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	2b0c      	cmp	r3, #12
 8002b14:	d062      	beq.n	8002bdc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b16:	4b5f      	ldr	r3, [pc, #380]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e0bb      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b26:	4b5b      	ldr	r3, [pc, #364]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5a      	ldr	r2, [pc, #360]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002b2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b30:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b32:	f7fe fb7d 	bl	8001230 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3a:	f7fe fb79 	bl	8001230 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e0a8      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4c:	4b51      	ldr	r3, [pc, #324]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1f0      	bne.n	8002b3a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b58:	4b4e      	ldr	r3, [pc, #312]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	4b4e      	ldr	r3, [pc, #312]	; (8002c98 <HAL_RCC_OscConfig+0x830>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b68:	3a01      	subs	r2, #1
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	4311      	orrs	r1, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b72:	0212      	lsls	r2, r2, #8
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b7a:	0852      	lsrs	r2, r2, #1
 8002b7c:	3a01      	subs	r2, #1
 8002b7e:	0552      	lsls	r2, r2, #21
 8002b80:	4311      	orrs	r1, r2
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b86:	0852      	lsrs	r2, r2, #1
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0652      	lsls	r2, r2, #25
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b92:	06d2      	lsls	r2, r2, #27
 8002b94:	430a      	orrs	r2, r1
 8002b96:	493f      	ldr	r1, [pc, #252]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b9c:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a3c      	ldr	r2, [pc, #240]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ba6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ba8:	4b3a      	ldr	r3, [pc, #232]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4a39      	ldr	r2, [pc, #228]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002bae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bb4:	f7fe fb3c 	bl	8001230 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bbc:	f7fe fb38 	bl	8001230 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e067      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bce:	4b31      	ldr	r3, [pc, #196]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d0f0      	beq.n	8002bbc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bda:	e05f      	b.n	8002c9c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e05e      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002be0:	4b2c      	ldr	r3, [pc, #176]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d157      	bne.n	8002c9c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bec:	4b29      	ldr	r3, [pc, #164]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a28      	ldr	r2, [pc, #160]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bf8:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	4a25      	ldr	r2, [pc, #148]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c04:	f7fe fb14 	bl	8001230 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fb10 	bl	8001230 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e03f      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x7a4>
 8002c2a:	e037      	b.n	8002c9c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	2b0c      	cmp	r3, #12
 8002c30:	d02d      	beq.n	8002c8e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b18      	ldr	r3, [pc, #96]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a17      	ldr	r2, [pc, #92]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c3c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c3e:	4b15      	ldr	r3, [pc, #84]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d105      	bne.n	8002c56 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c50:	f023 0303 	bic.w	r3, r3, #3
 8002c54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002c56:	4b0f      	ldr	r3, [pc, #60]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	4a0e      	ldr	r2, [pc, #56]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c5c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c64:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c66:	f7fe fae3 	bl	8001230 <HAL_GetTick>
 8002c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c6c:	e008      	b.n	8002c80 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6e:	f7fe fadf 	bl	8001230 <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d901      	bls.n	8002c80 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	e00e      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c80:	4b04      	ldr	r3, [pc, #16]	; (8002c94 <HAL_RCC_OscConfig+0x82c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1f0      	bne.n	8002c6e <HAL_RCC_OscConfig+0x806>
 8002c8c:	e006      	b.n	8002c9c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e005      	b.n	8002c9e <HAL_RCC_OscConfig+0x836>
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000
 8002c98:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0c8      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b66      	ldr	r3, [pc, #408]	; (8002e58 <HAL_RCC_ClockConfig+0x1b0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d910      	bls.n	8002cec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b63      	ldr	r3, [pc, #396]	; (8002e58 <HAL_RCC_ClockConfig+0x1b0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f023 0207 	bic.w	r2, r3, #7
 8002cd2:	4961      	ldr	r1, [pc, #388]	; (8002e58 <HAL_RCC_ClockConfig+0x1b0>)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cda:	4b5f      	ldr	r3, [pc, #380]	; (8002e58 <HAL_RCC_ClockConfig+0x1b0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d001      	beq.n	8002cec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e0b0      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d04c      	beq.n	8002d92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d00:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d121      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e09e      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d18:	4b50      	ldr	r3, [pc, #320]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d115      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e092      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d30:	4b4a      	ldr	r3, [pc, #296]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0302 	and.w	r3, r3, #2
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e086      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d40:	4b46      	ldr	r3, [pc, #280]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e07e      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d50:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f023 0203 	bic.w	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	493f      	ldr	r1, [pc, #252]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d62:	f7fe fa65 	bl	8001230 <HAL_GetTick>
 8002d66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6a:	f7fe fa61 	bl	8001230 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e066      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d80:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 020c 	and.w	r2, r3, #12
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d1eb      	bne.n	8002d6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d9e:	4b2f      	ldr	r3, [pc, #188]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	492c      	ldr	r1, [pc, #176]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_ClockConfig+0x1b0>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d210      	bcs.n	8002de0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 0207 	bic.w	r2, r3, #7
 8002dc6:	4924      	ldr	r1, [pc, #144]	; (8002e58 <HAL_RCC_ClockConfig+0x1b0>)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_RCC_ClockConfig+0x1b0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d001      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e036      	b.n	8002e4e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dec:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	4918      	ldr	r1, [pc, #96]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4910      	ldr	r1, [pc, #64]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e1e:	f000 f825 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <HAL_RCC_ClockConfig+0x1b4>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	490c      	ldr	r1, [pc, #48]	; (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	5ccb      	ldrb	r3, [r1, r3]
 8002e32:	f003 031f 	and.w	r3, r3, #31
 8002e36:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7fe f826 	bl	8000e94 <HAL_InitTick>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e4c:	7afb      	ldrb	r3, [r7, #11]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3710      	adds	r7, #16
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40022000 	.word	0x40022000
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	08006110 	.word	0x08006110
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000004 	.word	0x20000004

08002e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e7a:	4b3e      	ldr	r3, [pc, #248]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e84:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d005      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	d121      	bne.n	8002ede <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d11e      	bne.n	8002ede <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002ea0:	4b34      	ldr	r3, [pc, #208]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0308 	and.w	r3, r3, #8
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002eac:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	61fb      	str	r3, [r7, #28]
 8002eba:	e005      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ed0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10d      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002edc:	e00a      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d102      	bne.n	8002eea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ee4:	4b25      	ldr	r3, [pc, #148]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ee6:	61bb      	str	r3, [r7, #24]
 8002ee8:	e004      	b.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d101      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ef0:	4b23      	ldr	r3, [pc, #140]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ef2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d134      	bne.n	8002f64 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d003      	beq.n	8002f12 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d003      	beq.n	8002f18 <HAL_RCC_GetSysClockFreq+0xac>
 8002f10:	e005      	b.n	8002f1e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f12:	4b1a      	ldr	r3, [pc, #104]	; (8002f7c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f14:	617b      	str	r3, [r7, #20]
      break;
 8002f16:	e005      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f18:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f1a:	617b      	str	r3, [r7, #20]
      break;
 8002f1c:	e002      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	617b      	str	r3, [r7, #20]
      break;
 8002f22:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f24:	4b13      	ldr	r3, [pc, #76]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	091b      	lsrs	r3, r3, #4
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	3301      	adds	r3, #1
 8002f30:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	0a1b      	lsrs	r3, r3, #8
 8002f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f3c:	697a      	ldr	r2, [r7, #20]
 8002f3e:	fb02 f203 	mul.w	r2, r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f4a:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	0e5b      	lsrs	r3, r3, #25
 8002f50:	f003 0303 	and.w	r3, r3, #3
 8002f54:	3301      	adds	r3, #1
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f64:	69bb      	ldr	r3, [r7, #24]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3724      	adds	r7, #36	; 0x24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	08006128 	.word	0x08006128
 8002f7c:	00f42400 	.word	0x00f42400
 8002f80:	007a1200 	.word	0x007a1200

08002f84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f88:	4b03      	ldr	r3, [pc, #12]	; (8002f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	20000000 	.word	0x20000000

08002f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fa0:	f7ff fff0 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	f003 0307 	and.w	r3, r3, #7
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fb2:	5ccb      	ldrb	r3, [r1, r3]
 8002fb4:	f003 031f 	and.w	r3, r3, #31
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	08006120 	.word	0x08006120

08002fc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fcc:	f7ff ffda 	bl	8002f84 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	0adb      	lsrs	r3, r3, #11
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4904      	ldr	r1, [pc, #16]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	f003 031f 	and.w	r3, r3, #31
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	08006120 	.word	0x08006120

08002ff4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	220f      	movs	r2, #15
 8003002:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_RCC_GetClockConfig+0x5c>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 0203 	and.w	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <HAL_RCC_GetClockConfig+0x5c>)
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <HAL_RCC_GetClockConfig+0x5c>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <HAL_RCC_GetClockConfig+0x5c>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	08db      	lsrs	r3, r3, #3
 800302e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003036:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_RCC_GetClockConfig+0x60>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0207 	and.w	r2, r3, #7
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	601a      	str	r2, [r3, #0]
}
 8003042:	bf00      	nop
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	40022000 	.word	0x40022000

08003058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003064:	4b2a      	ldr	r3, [pc, #168]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003070:	f7ff f996 	bl	80023a0 <HAL_PWREx_GetVoltageRange>
 8003074:	6178      	str	r0, [r7, #20]
 8003076:	e014      	b.n	80030a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003078:	4b25      	ldr	r3, [pc, #148]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	4a24      	ldr	r2, [pc, #144]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003082:	6593      	str	r3, [r2, #88]	; 0x58
 8003084:	4b22      	ldr	r3, [pc, #136]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003090:	f7ff f986 	bl	80023a0 <HAL_PWREx_GetVoltageRange>
 8003094:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	4a1d      	ldr	r2, [pc, #116]	; (8003110 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a8:	d10b      	bne.n	80030c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b80      	cmp	r3, #128	; 0x80
 80030ae:	d919      	bls.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2ba0      	cmp	r3, #160	; 0xa0
 80030b4:	d902      	bls.n	80030bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030b6:	2302      	movs	r3, #2
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	e013      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
 80030c0:	e010      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d902      	bls.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030c8:	2303      	movs	r3, #3
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e00a      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d102      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030d4:	2302      	movs	r3, #2
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e004      	b.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b70      	cmp	r3, #112	; 0x70
 80030de:	d101      	bne.n	80030e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030e0:	2301      	movs	r3, #1
 80030e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030e4:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 0207 	bic.w	r2, r3, #7
 80030ec:	4909      	ldr	r1, [pc, #36]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	40022000 	.word	0x40022000

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003120:	2300      	movs	r3, #0
 8003122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003124:	2300      	movs	r3, #0
 8003126:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003130:	2b00      	cmp	r3, #0
 8003132:	d031      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800313c:	d01a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800313e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003142:	d814      	bhi.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003144:	2b00      	cmp	r3, #0
 8003146:	d009      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003148:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800314c:	d10f      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800314e:	4bac      	ldr	r3, [pc, #688]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	4aab      	ldr	r2, [pc, #684]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003158:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800315a:	e00c      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3304      	adds	r3, #4
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f9dc 	bl	8003520 <RCCEx_PLLSAI1_Config>
 8003168:	4603      	mov	r3, r0
 800316a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800316c:	e003      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	74fb      	strb	r3, [r7, #19]
      break;
 8003172:	e000      	b.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003174:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003176:	7cfb      	ldrb	r3, [r7, #19]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800317c:	4ba0      	ldr	r3, [pc, #640]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003182:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318a:	499d      	ldr	r1, [pc, #628]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800318c:	4313      	orrs	r3, r2
 800318e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003192:	e001      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8099 	beq.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a6:	2300      	movs	r3, #0
 80031a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031aa:	4b95      	ldr	r3, [pc, #596]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00d      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c0:	4b8f      	ldr	r3, [pc, #572]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c4:	4a8e      	ldr	r2, [pc, #568]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ca:	6593      	str	r3, [r2, #88]	; 0x58
 80031cc:	4b8c      	ldr	r3, [pc, #560]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80031ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031d8:	2301      	movs	r3, #1
 80031da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031dc:	4b89      	ldr	r3, [pc, #548]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a88      	ldr	r2, [pc, #544]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80031e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031e8:	f7fe f822 	bl	8001230 <HAL_GetTick>
 80031ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ee:	e009      	b.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031f0:	f7fe f81e 	bl	8001230 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d902      	bls.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	74fb      	strb	r3, [r7, #19]
        break;
 8003202:	e005      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003204:	4b7f      	ldr	r3, [pc, #508]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ef      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d155      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003216:	4b7a      	ldr	r3, [pc, #488]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003220:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d01e      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	429a      	cmp	r2, r3
 8003230:	d019      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003232:	4b73      	ldr	r3, [pc, #460]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003238:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800323c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800323e:	4b70      	ldr	r3, [pc, #448]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	4a6e      	ldr	r2, [pc, #440]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003246:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800324e:	4b6c      	ldr	r3, [pc, #432]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	4a6a      	ldr	r2, [pc, #424]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800325e:	4a68      	ldr	r2, [pc, #416]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	2b00      	cmp	r3, #0
 800326e:	d016      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003270:	f7fd ffde 	bl	8001230 <HAL_GetTick>
 8003274:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003276:	e00b      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fd ffda 	bl	8001230 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	; 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d902      	bls.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	74fb      	strb	r3, [r7, #19]
            break;
 800328e:	e006      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003290:	4b5b      	ldr	r3, [pc, #364]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0ec      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800329e:	7cfb      	ldrb	r3, [r7, #19]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d10b      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a4:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b2:	4953      	ldr	r1, [pc, #332]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80032ba:	e004      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032bc:	7cfb      	ldrb	r3, [r7, #19]
 80032be:	74bb      	strb	r3, [r7, #18]
 80032c0:	e001      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	7cfb      	ldrb	r3, [r7, #19]
 80032c4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032c6:	7c7b      	ldrb	r3, [r7, #17]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d105      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032cc:	4b4c      	ldr	r3, [pc, #304]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d0:	4a4b      	ldr	r2, [pc, #300]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e4:	4b46      	ldr	r3, [pc, #280]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ea:	f023 0203 	bic.w	r2, r3, #3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	4943      	ldr	r1, [pc, #268]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003306:	4b3e      	ldr	r3, [pc, #248]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330c:	f023 020c 	bic.w	r2, r3, #12
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	493a      	ldr	r1, [pc, #232]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003328:	4b35      	ldr	r3, [pc, #212]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003336:	4932      	ldr	r1, [pc, #200]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800334a:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800334c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003350:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003358:	4929      	ldr	r1, [pc, #164]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	4921      	ldr	r1, [pc, #132]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800338e:	4b1c      	ldr	r3, [pc, #112]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003394:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339c:	4918      	ldr	r1, [pc, #96]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00a      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033b0:	4b13      	ldr	r3, [pc, #76]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	4910      	ldr	r1, [pc, #64]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d02c      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033d2:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e0:	4907      	ldr	r1, [pc, #28]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f0:	d10a      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033f2:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	4a02      	ldr	r2, [pc, #8]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033fc:	60d3      	str	r3, [r2, #12]
 80033fe:	e015      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003400:	40021000 	.word	0x40021000
 8003404:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f881 	bl	8003520 <RCCEx_PLLSAI1_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d028      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003438:	4b30      	ldr	r3, [pc, #192]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	492d      	ldr	r1, [pc, #180]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003456:	d106      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003458:	4b28      	ldr	r3, [pc, #160]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a27      	ldr	r2, [pc, #156]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800345e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003462:	60d3      	str	r3, [r2, #12]
 8003464:	e011      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800346e:	d10c      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2101      	movs	r1, #1
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f852 	bl	8003520 <RCCEx_PLLSAI1_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01c      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003496:	4b19      	ldr	r3, [pc, #100]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034a4:	4915      	ldr	r1, [pc, #84]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2102      	movs	r1, #2
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f82f 	bl	8003520 <RCCEx_PLLSAI1_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034c6:	7cfb      	ldrb	r3, [r7, #19]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80034dc:	4b07      	ldr	r3, [pc, #28]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ea:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80034f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3718      	adds	r7, #24
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	40021000 	.word	0x40021000

08003500 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003504:	4b05      	ldr	r3, [pc, #20]	; (800351c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a04      	ldr	r2, [pc, #16]	; (800351c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800350a:	f043 0304 	orr.w	r3, r3, #4
 800350e:	6013      	str	r3, [r2, #0]
}
 8003510:	bf00      	nop
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000

08003520 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800352a:	2300      	movs	r3, #0
 800352c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800352e:	4b74      	ldr	r3, [pc, #464]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d018      	beq.n	800356c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800353a:	4b71      	ldr	r3, [pc, #452]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0203 	and.w	r2, r3, #3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d10d      	bne.n	8003566 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
       ||
 800354e:	2b00      	cmp	r3, #0
 8003550:	d009      	beq.n	8003566 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003552:	4b6b      	ldr	r3, [pc, #428]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	091b      	lsrs	r3, r3, #4
 8003558:	f003 0307 	and.w	r3, r3, #7
 800355c:	1c5a      	adds	r2, r3, #1
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
       ||
 8003562:	429a      	cmp	r2, r3
 8003564:	d047      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	73fb      	strb	r3, [r7, #15]
 800356a:	e044      	b.n	80035f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b03      	cmp	r3, #3
 8003572:	d018      	beq.n	80035a6 <RCCEx_PLLSAI1_Config+0x86>
 8003574:	2b03      	cmp	r3, #3
 8003576:	d825      	bhi.n	80035c4 <RCCEx_PLLSAI1_Config+0xa4>
 8003578:	2b01      	cmp	r3, #1
 800357a:	d002      	beq.n	8003582 <RCCEx_PLLSAI1_Config+0x62>
 800357c:	2b02      	cmp	r3, #2
 800357e:	d009      	beq.n	8003594 <RCCEx_PLLSAI1_Config+0x74>
 8003580:	e020      	b.n	80035c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003582:	4b5f      	ldr	r3, [pc, #380]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d11d      	bne.n	80035ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003592:	e01a      	b.n	80035ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003594:	4b5a      	ldr	r3, [pc, #360]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359c:	2b00      	cmp	r3, #0
 800359e:	d116      	bne.n	80035ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035a4:	e013      	b.n	80035ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035a6:	4b56      	ldr	r3, [pc, #344]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10f      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b2:	4b53      	ldr	r3, [pc, #332]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035c2:	e006      	b.n	80035d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	73fb      	strb	r3, [r7, #15]
      break;
 80035c8:	e004      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80035d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10d      	bne.n	80035f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035da:	4b49      	ldr	r3, [pc, #292]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6819      	ldr	r1, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	430b      	orrs	r3, r1
 80035f0:	4943      	ldr	r1, [pc, #268]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d17c      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80035fc:	4b40      	ldr	r3, [pc, #256]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a3f      	ldr	r2, [pc, #252]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003602:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003608:	f7fd fe12 	bl	8001230 <HAL_GetTick>
 800360c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800360e:	e009      	b.n	8003624 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003610:	f7fd fe0e 	bl	8001230 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d902      	bls.n	8003624 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	73fb      	strb	r3, [r7, #15]
        break;
 8003622:	e005      	b.n	8003630 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003624:	4b36      	ldr	r3, [pc, #216]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d1ef      	bne.n	8003610 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d15f      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d110      	bne.n	800365e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800363c:	4b30      	ldr	r3, [pc, #192]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003644:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6892      	ldr	r2, [r2, #8]
 800364c:	0211      	lsls	r1, r2, #8
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68d2      	ldr	r2, [r2, #12]
 8003652:	06d2      	lsls	r2, r2, #27
 8003654:	430a      	orrs	r2, r1
 8003656:	492a      	ldr	r1, [pc, #168]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	610b      	str	r3, [r1, #16]
 800365c:	e027      	b.n	80036ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d112      	bne.n	800368a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003664:	4b26      	ldr	r3, [pc, #152]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800366c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6892      	ldr	r2, [r2, #8]
 8003674:	0211      	lsls	r1, r2, #8
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6912      	ldr	r2, [r2, #16]
 800367a:	0852      	lsrs	r2, r2, #1
 800367c:	3a01      	subs	r2, #1
 800367e:	0552      	lsls	r2, r2, #21
 8003680:	430a      	orrs	r2, r1
 8003682:	491f      	ldr	r1, [pc, #124]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003684:	4313      	orrs	r3, r2
 8003686:	610b      	str	r3, [r1, #16]
 8003688:	e011      	b.n	80036ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003692:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	6892      	ldr	r2, [r2, #8]
 800369a:	0211      	lsls	r1, r2, #8
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6952      	ldr	r2, [r2, #20]
 80036a0:	0852      	lsrs	r2, r2, #1
 80036a2:	3a01      	subs	r2, #1
 80036a4:	0652      	lsls	r2, r2, #25
 80036a6:	430a      	orrs	r2, r1
 80036a8:	4915      	ldr	r1, [pc, #84]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a13      	ldr	r2, [pc, #76]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fd fdb9 	bl	8001230 <HAL_GetTick>
 80036be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036c0:	e009      	b.n	80036d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036c2:	f7fd fdb5 	bl	8001230 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d902      	bls.n	80036d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	73fb      	strb	r3, [r7, #15]
          break;
 80036d4:	e005      	b.n	80036e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036d6:	4b0a      	ldr	r3, [pc, #40]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0ef      	beq.n	80036c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d106      	bne.n	80036f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4903      	ldr	r1, [pc, #12]	; (8003700 <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80036f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000

08003704 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e095      	b.n	8003842 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	2b00      	cmp	r3, #0
 800371c:	d108      	bne.n	8003730 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003726:	d009      	beq.n	800373c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	61da      	str	r2, [r3, #28]
 800372e:	e005      	b.n	800373c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d106      	bne.n	800375c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f7fd fb36 	bl	8000dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003772:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800377c:	d902      	bls.n	8003784 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
 8003782:	e002      	b.n	800378a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003788:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003792:	d007      	beq.n	80037a4 <HAL_SPI_Init+0xa0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800379c:	d002      	beq.n	80037a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	431a      	orrs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a1b      	ldr	r3, [r3, #32]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	ea42 0103 	orr.w	r1, r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	0c1b      	lsrs	r3, r3, #16
 8003800:	f003 0204 	and.w	r2, r3, #4
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003820:	ea42 0103 	orr.w	r1, r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b08a      	sub	sp, #40	; 0x28
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003858:	2301      	movs	r3, #1
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800385c:	2300      	movs	r3, #0
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003868:	2b01      	cmp	r3, #1
 800386a:	d101      	bne.n	8003870 <HAL_SPI_TransmitReceive+0x26>
 800386c:	2302      	movs	r3, #2
 800386e:	e1fb      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x41e>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003878:	f7fd fcda 	bl	8001230 <HAL_GetTick>
 800387c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003884:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003890:	887b      	ldrh	r3, [r7, #2]
 8003892:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003894:	7efb      	ldrb	r3, [r7, #27]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d00e      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x6e>
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a0:	d106      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_SPI_TransmitReceive+0x66>
 80038aa:	7efb      	ldrb	r3, [r7, #27]
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	d003      	beq.n	80038b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80038b6:	e1cd      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_SPI_TransmitReceive+0x80>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d002      	beq.n	80038ca <HAL_SPI_TransmitReceive+0x80>
 80038c4:	887b      	ldrh	r3, [r7, #2]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80038d0:	e1c0      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d003      	beq.n	80038e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2205      	movs	r2, #5
 80038e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	887a      	ldrh	r2, [r7, #2]
 80038f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	887a      	ldrh	r2, [r7, #2]
 80038fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	887a      	ldrh	r2, [r7, #2]
 800390c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	887a      	ldrh	r2, [r7, #2]
 8003912:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003928:	d802      	bhi.n	8003930 <HAL_SPI_TransmitReceive+0xe6>
 800392a:	8a3b      	ldrh	r3, [r7, #16]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d908      	bls.n	8003942 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	e007      	b.n	8003952 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003950:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395c:	2b40      	cmp	r3, #64	; 0x40
 800395e:	d007      	beq.n	8003970 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800396e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003978:	d97c      	bls.n	8003a74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_SPI_TransmitReceive+0x13e>
 8003982:	8a7b      	ldrh	r3, [r7, #18]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d169      	bne.n	8003a5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	881a      	ldrh	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	1c9a      	adds	r2, r3, #2
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3b01      	subs	r3, #1
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ac:	e056      	b.n	8003a5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d11b      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x1aa>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d016      	beq.n	80039f4 <HAL_SPI_TransmitReceive+0x1aa>
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d113      	bne.n	80039f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	881a      	ldrh	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039dc:	1c9a      	adds	r2, r3, #2
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d11c      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x1f2>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29a      	uxth	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a3c:	f7fd fbf8 	bl	8001230 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d807      	bhi.n	8003a5c <HAL_SPI_TransmitReceive+0x212>
 8003a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a52:	d003      	beq.n	8003a5c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003a5a:	e0fb      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1a3      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x164>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d19d      	bne.n	80039ae <HAL_SPI_TransmitReceive+0x164>
 8003a72:	e0df      	b.n	8003c34 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x23a>
 8003a7c:	8a7b      	ldrh	r3, [r7, #18]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	f040 80cb 	bne.w	8003c1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d912      	bls.n	8003ab4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a92:	881a      	ldrh	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9e:	1c9a      	adds	r2, r3, #2
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b02      	subs	r3, #2
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ab2:	e0b2      	b.n	8003c1a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	7812      	ldrb	r2, [r2, #0]
 8003ac0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ada:	e09e      	b.n	8003c1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d134      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x30a>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d02f      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x30a>
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d12c      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d912      	bls.n	8003b2a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	881a      	ldrh	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b14:	1c9a      	adds	r2, r3, #2
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3b02      	subs	r3, #2
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b28:	e012      	b.n	8003b50 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	330c      	adds	r3, #12
 8003b34:	7812      	ldrb	r2, [r2, #0]
 8003b36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b50:	2300      	movs	r3, #0
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d148      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x3aa>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d042      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d923      	bls.n	8003bc2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68da      	ldr	r2, [r3, #12]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	b292      	uxth	r2, r2
 8003b86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b02      	subs	r3, #2
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d81f      	bhi.n	8003bf0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003bbe:	605a      	str	r2, [r3, #4]
 8003bc0:	e016      	b.n	8003bf0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f103 020c 	add.w	r2, r3, #12
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	7812      	ldrb	r2, [r2, #0]
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bf4:	f7fd fb1c 	bl	8001230 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d803      	bhi.n	8003c0c <HAL_SPI_TransmitReceive+0x3c2>
 8003c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c0a:	d102      	bne.n	8003c12 <HAL_SPI_TransmitReceive+0x3c8>
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003c18:	e01c      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f47f af5b 	bne.w	8003adc <HAL_SPI_TransmitReceive+0x292>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f47f af54 	bne.w	8003adc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f933 	bl	8003ea4 <SPI_EndRxTxTransaction>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	661a      	str	r2, [r3, #96]	; 0x60
 8003c50:	e000      	b.n	8003c54 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003c52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003c64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3728      	adds	r7, #40	; 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b088      	sub	sp, #32
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c80:	f7fd fad6 	bl	8001230 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c90:	f7fd face 	bl	8001230 <HAL_GetTick>
 8003c94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c96:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	015b      	lsls	r3, r3, #5
 8003c9c:	0d1b      	lsrs	r3, r3, #20
 8003c9e:	69fa      	ldr	r2, [r7, #28]
 8003ca0:	fb02 f303 	mul.w	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ca6:	e054      	b.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cae:	d050      	beq.n	8003d52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003cb0:	f7fd fabe 	bl	8001230 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d902      	bls.n	8003cc6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d13d      	bne.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003cd4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cde:	d111      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce8:	d004      	beq.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf2:	d107      	bne.n	8003d04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	d10f      	bne.n	8003d2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e017      	b.n	8003d72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d19b      	bne.n	8003ca8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3720      	adds	r7, #32
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000000 	.word	0x20000000

08003d80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d8e:	f7fd fa4f 	bl	8001230 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d9e:	f7fd fa47 	bl	8001230 <HAL_GetTick>
 8003da2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003da4:	4b3e      	ldr	r3, [pc, #248]	; (8003ea0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00da      	lsls	r2, r3, #3
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	0d1b      	lsrs	r3, r3, #20
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	fb02 f303 	mul.w	r3, r2, r3
 8003dba:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8003dbc:	e062      	b.n	8003e84 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003dc4:	d109      	bne.n	8003dda <SPI_WaitFifoStateUntilTimeout+0x5a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d106      	bne.n	8003dda <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	330c      	adds	r3, #12
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003dd8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de0:	d050      	beq.n	8003e84 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003de2:	f7fd fa25 	bl	8001230 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d902      	bls.n	8003df8 <SPI_WaitFifoStateUntilTimeout+0x78>
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d13d      	bne.n	8003e74 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e10:	d111      	bne.n	8003e36 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d004      	beq.n	8003e26 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e24:	d107      	bne.n	8003e36 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e3e:	d10f      	bne.n	8003e60 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e010      	b.n	8003e96 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d194      	bne.n	8003dbe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000000 	.word	0x20000000

08003ea4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ff5f 	bl	8003d80 <SPI_WaitFifoStateUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d007      	beq.n	8003ed8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ecc:	f043 0220 	orr.w	r2, r3, #32
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e027      	b.n	8003f28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2180      	movs	r1, #128	; 0x80
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f7ff fec4 	bl	8003c70 <SPI_WaitFlagStateUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef2:	f043 0220 	orr.w	r2, r3, #32
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e014      	b.n	8003f28 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff ff38 	bl	8003d80 <SPI_WaitFifoStateUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1a:	f043 0220 	orr.w	r2, r3, #32
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e000      	b.n	8003f28 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e049      	b.n	8003fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f841 	bl	8003fde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3304      	adds	r3, #4
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4610      	mov	r0, r2
 8003f70:	f000 f9dc 	bl	800432c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
	...

08003ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b085      	sub	sp, #20
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b01      	cmp	r3, #1
 8004006:	d001      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e03b      	b.n	8004084 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2202      	movs	r2, #2
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f042 0201 	orr.w	r2, r2, #1
 8004022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a19      	ldr	r2, [pc, #100]	; (8004090 <HAL_TIM_Base_Start_IT+0x9c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d009      	beq.n	8004042 <HAL_TIM_Base_Start_IT+0x4e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004036:	d004      	beq.n	8004042 <HAL_TIM_Base_Start_IT+0x4e>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a15      	ldr	r2, [pc, #84]	; (8004094 <HAL_TIM_Base_Start_IT+0xa0>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d115      	bne.n	800406e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	4b13      	ldr	r3, [pc, #76]	; (8004098 <HAL_TIM_Base_Start_IT+0xa4>)
 800404a:	4013      	ands	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b06      	cmp	r3, #6
 8004052:	d015      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x8c>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800405a:	d011      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406c:	e008      	b.n	8004080 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e000      	b.n	8004082 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004080:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	40012c00 	.word	0x40012c00
 8004094:	40014000 	.word	0x40014000
 8004098:	00010007 	.word	0x00010007

0800409c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d122      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d11b      	bne.n	80040f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0202 	mvn.w	r2, #2
 80040c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f905 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 80040e4:	e005      	b.n	80040f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8f7 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 f908 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b04      	cmp	r3, #4
 8004104:	d122      	bne.n	800414c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b04      	cmp	r3, #4
 8004112:	d11b      	bne.n	800414c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f06f 0204 	mvn.w	r2, #4
 800411c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8db 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 8004138:	e005      	b.n	8004146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f8cd 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f8de 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b08      	cmp	r3, #8
 8004158:	d122      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	f003 0308 	and.w	r3, r3, #8
 8004164:	2b08      	cmp	r3, #8
 8004166:	d11b      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0208 	mvn.w	r2, #8
 8004170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2204      	movs	r2, #4
 8004176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	f003 0303 	and.w	r3, r3, #3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f8b1 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8a3 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f8b4 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	2b10      	cmp	r3, #16
 80041ac:	d122      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0310 	and.w	r3, r3, #16
 80041b8:	2b10      	cmp	r3, #16
 80041ba:	d11b      	bne.n	80041f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0210 	mvn.w	r2, #16
 80041c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2208      	movs	r2, #8
 80041ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f887 	bl	80042ee <HAL_TIM_IC_CaptureCallback>
 80041e0:	e005      	b.n	80041ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f879 	bl	80042da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f88a 	bl	8004302 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d10e      	bne.n	8004220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b01      	cmp	r3, #1
 800420e:	d107      	bne.n	8004220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f06f 0201 	mvn.w	r2, #1
 8004218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fc fb7e 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	691b      	ldr	r3, [r3, #16]
 8004226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422a:	2b80      	cmp	r3, #128	; 0x80
 800422c:	d10e      	bne.n	800424c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004238:	2b80      	cmp	r3, #128	; 0x80
 800423a:	d107      	bne.n	800424c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f000 f8de 	bl	8004408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425a:	d10e      	bne.n	800427a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b80      	cmp	r3, #128	; 0x80
 8004268:	d107      	bne.n	800427a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f8d1 	bl	800441c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d10e      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b40      	cmp	r3, #64	; 0x40
 8004294:	d107      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800429e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f838 	bl	8004316 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d10e      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0320 	and.w	r3, r3, #32
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d107      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f06f 0220 	mvn.w	r2, #32
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f891 	bl	80043f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004302:	b480      	push	{r7}
 8004304:	b083      	sub	sp, #12
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004316:	b480      	push	{r7}
 8004318:	b083      	sub	sp, #12
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a2a      	ldr	r2, [pc, #168]	; (80043e8 <TIM_Base_SetConfig+0xbc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d003      	beq.n	800434c <TIM_Base_SetConfig+0x20>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434a:	d108      	bne.n	800435e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <TIM_Base_SetConfig+0xbc>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d00b      	beq.n	800437e <TIM_Base_SetConfig+0x52>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436c:	d007      	beq.n	800437e <TIM_Base_SetConfig+0x52>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <TIM_Base_SetConfig+0xc0>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d003      	beq.n	800437e <TIM_Base_SetConfig+0x52>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <TIM_Base_SetConfig+0xc4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d108      	bne.n	8004390 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a0c      	ldr	r2, [pc, #48]	; (80043e8 <TIM_Base_SetConfig+0xbc>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0xa0>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0b      	ldr	r2, [pc, #44]	; (80043ec <TIM_Base_SetConfig+0xc0>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0xa0>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <TIM_Base_SetConfig+0xc4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d103      	bne.n	80043d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	615a      	str	r2, [r3, #20]
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	40012c00 	.word	0x40012c00
 80043ec:	40014000 	.word	0x40014000
 80043f0:	40014400 	.word	0x40014400

080043f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e040      	b.n	80044c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004446:	2b00      	cmp	r3, #0
 8004448:	d106      	bne.n	8004458 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fc fe42 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2224      	movs	r2, #36	; 0x24
 800445c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f8c0 	bl	80045f4 <UART_SetConfig>
 8004474:	4603      	mov	r3, r0
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e022      	b.n	80044c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fac0 	bl	8004a0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800449a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fb47 	bl	8004b50 <UART_CheckIdleState>
 80044c2:	4603      	mov	r3, r0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b08a      	sub	sp, #40	; 0x28
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	4613      	mov	r3, r2
 80044da:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044e0:	2b20      	cmp	r3, #32
 80044e2:	f040 8082 	bne.w	80045ea <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <HAL_UART_Transmit+0x26>
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e07a      	b.n	80045ec <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_UART_Transmit+0x38>
 8004500:	2302      	movs	r3, #2
 8004502:	e073      	b.n	80045ec <HAL_UART_Transmit+0x120>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2221      	movs	r2, #33	; 0x21
 8004518:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800451a:	f7fc fe89 	bl	8001230 <HAL_GetTick>
 800451e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	88fa      	ldrh	r2, [r7, #6]
 8004524:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	88fa      	ldrh	r2, [r7, #6]
 800452c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004538:	d108      	bne.n	800454c <HAL_UART_Transmit+0x80>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004542:	2300      	movs	r3, #0
 8004544:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61bb      	str	r3, [r7, #24]
 800454a:	e003      	b.n	8004554 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800455c:	e02d      	b.n	80045ba <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2200      	movs	r2, #0
 8004566:	2180      	movs	r1, #128	; 0x80
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fb3a 	bl	8004be2 <UART_WaitOnFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e039      	b.n	80045ec <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10b      	bne.n	8004596 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	881a      	ldrh	r2, [r3, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458a:	b292      	uxth	r2, r2
 800458c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	3302      	adds	r3, #2
 8004592:	61bb      	str	r3, [r7, #24]
 8004594:	e008      	b.n	80045a8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	781a      	ldrb	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	b292      	uxth	r2, r2
 80045a0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1cb      	bne.n	800455e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	9300      	str	r3, [sp, #0]
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	2200      	movs	r2, #0
 80045ce:	2140      	movs	r1, #64	; 0x40
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fb06 	bl	8004be2 <UART_WaitOnFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e005      	b.n	80045ec <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2220      	movs	r2, #32
 80045e4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045ea:	2302      	movs	r3, #2
  }
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	b088      	sub	sp, #32
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	4313      	orrs	r3, r2
 8004616:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4baf      	ldr	r3, [pc, #700]	; (80048dc <UART_SetConfig+0x2e8>)
 8004620:	4013      	ands	r3, r2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	69f9      	ldr	r1, [r7, #28]
 8004628:	430b      	orrs	r3, r1
 800462a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4aa4      	ldr	r2, [pc, #656]	; (80048e0 <UART_SetConfig+0x2ec>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d004      	beq.n	800465c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	4313      	orrs	r3, r2
 800465a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	430a      	orrs	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a9b      	ldr	r2, [pc, #620]	; (80048e4 <UART_SetConfig+0x2f0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d121      	bne.n	80046be <UART_SetConfig+0xca>
 800467a:	4b9b      	ldr	r3, [pc, #620]	; (80048e8 <UART_SetConfig+0x2f4>)
 800467c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	2b03      	cmp	r3, #3
 8004686:	d817      	bhi.n	80046b8 <UART_SetConfig+0xc4>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <UART_SetConfig+0x9c>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046a1 	.word	0x080046a1
 8004694:	080046ad 	.word	0x080046ad
 8004698:	080046a7 	.word	0x080046a7
 800469c:	080046b3 	.word	0x080046b3
 80046a0:	2301      	movs	r3, #1
 80046a2:	76fb      	strb	r3, [r7, #27]
 80046a4:	e070      	b.n	8004788 <UART_SetConfig+0x194>
 80046a6:	2302      	movs	r3, #2
 80046a8:	76fb      	strb	r3, [r7, #27]
 80046aa:	e06d      	b.n	8004788 <UART_SetConfig+0x194>
 80046ac:	2304      	movs	r3, #4
 80046ae:	76fb      	strb	r3, [r7, #27]
 80046b0:	e06a      	b.n	8004788 <UART_SetConfig+0x194>
 80046b2:	2308      	movs	r3, #8
 80046b4:	76fb      	strb	r3, [r7, #27]
 80046b6:	e067      	b.n	8004788 <UART_SetConfig+0x194>
 80046b8:	2310      	movs	r3, #16
 80046ba:	76fb      	strb	r3, [r7, #27]
 80046bc:	e064      	b.n	8004788 <UART_SetConfig+0x194>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a8a      	ldr	r2, [pc, #552]	; (80048ec <UART_SetConfig+0x2f8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d132      	bne.n	800472e <UART_SetConfig+0x13a>
 80046c8:	4b87      	ldr	r3, [pc, #540]	; (80048e8 <UART_SetConfig+0x2f4>)
 80046ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ce:	f003 030c 	and.w	r3, r3, #12
 80046d2:	2b0c      	cmp	r3, #12
 80046d4:	d828      	bhi.n	8004728 <UART_SetConfig+0x134>
 80046d6:	a201      	add	r2, pc, #4	; (adr r2, 80046dc <UART_SetConfig+0xe8>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	08004711 	.word	0x08004711
 80046e0:	08004729 	.word	0x08004729
 80046e4:	08004729 	.word	0x08004729
 80046e8:	08004729 	.word	0x08004729
 80046ec:	0800471d 	.word	0x0800471d
 80046f0:	08004729 	.word	0x08004729
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004729 	.word	0x08004729
 80046fc:	08004717 	.word	0x08004717
 8004700:	08004729 	.word	0x08004729
 8004704:	08004729 	.word	0x08004729
 8004708:	08004729 	.word	0x08004729
 800470c:	08004723 	.word	0x08004723
 8004710:	2300      	movs	r3, #0
 8004712:	76fb      	strb	r3, [r7, #27]
 8004714:	e038      	b.n	8004788 <UART_SetConfig+0x194>
 8004716:	2302      	movs	r3, #2
 8004718:	76fb      	strb	r3, [r7, #27]
 800471a:	e035      	b.n	8004788 <UART_SetConfig+0x194>
 800471c:	2304      	movs	r3, #4
 800471e:	76fb      	strb	r3, [r7, #27]
 8004720:	e032      	b.n	8004788 <UART_SetConfig+0x194>
 8004722:	2308      	movs	r3, #8
 8004724:	76fb      	strb	r3, [r7, #27]
 8004726:	e02f      	b.n	8004788 <UART_SetConfig+0x194>
 8004728:	2310      	movs	r3, #16
 800472a:	76fb      	strb	r3, [r7, #27]
 800472c:	e02c      	b.n	8004788 <UART_SetConfig+0x194>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6b      	ldr	r2, [pc, #428]	; (80048e0 <UART_SetConfig+0x2ec>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d125      	bne.n	8004784 <UART_SetConfig+0x190>
 8004738:	4b6b      	ldr	r3, [pc, #428]	; (80048e8 <UART_SetConfig+0x2f4>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004742:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004746:	d017      	beq.n	8004778 <UART_SetConfig+0x184>
 8004748:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800474c:	d817      	bhi.n	800477e <UART_SetConfig+0x18a>
 800474e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004752:	d00b      	beq.n	800476c <UART_SetConfig+0x178>
 8004754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004758:	d811      	bhi.n	800477e <UART_SetConfig+0x18a>
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <UART_SetConfig+0x172>
 800475e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004762:	d006      	beq.n	8004772 <UART_SetConfig+0x17e>
 8004764:	e00b      	b.n	800477e <UART_SetConfig+0x18a>
 8004766:	2300      	movs	r3, #0
 8004768:	76fb      	strb	r3, [r7, #27]
 800476a:	e00d      	b.n	8004788 <UART_SetConfig+0x194>
 800476c:	2302      	movs	r3, #2
 800476e:	76fb      	strb	r3, [r7, #27]
 8004770:	e00a      	b.n	8004788 <UART_SetConfig+0x194>
 8004772:	2304      	movs	r3, #4
 8004774:	76fb      	strb	r3, [r7, #27]
 8004776:	e007      	b.n	8004788 <UART_SetConfig+0x194>
 8004778:	2308      	movs	r3, #8
 800477a:	76fb      	strb	r3, [r7, #27]
 800477c:	e004      	b.n	8004788 <UART_SetConfig+0x194>
 800477e:	2310      	movs	r3, #16
 8004780:	76fb      	strb	r3, [r7, #27]
 8004782:	e001      	b.n	8004788 <UART_SetConfig+0x194>
 8004784:	2310      	movs	r3, #16
 8004786:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a54      	ldr	r2, [pc, #336]	; (80048e0 <UART_SetConfig+0x2ec>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d173      	bne.n	800487a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004792:	7efb      	ldrb	r3, [r7, #27]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d824      	bhi.n	80047e2 <UART_SetConfig+0x1ee>
 8004798:	a201      	add	r2, pc, #4	; (adr r2, 80047a0 <UART_SetConfig+0x1ac>)
 800479a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479e:	bf00      	nop
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047e3 	.word	0x080047e3
 80047a8:	080047cd 	.word	0x080047cd
 80047ac:	080047e3 	.word	0x080047e3
 80047b0:	080047d3 	.word	0x080047d3
 80047b4:	080047e3 	.word	0x080047e3
 80047b8:	080047e3 	.word	0x080047e3
 80047bc:	080047e3 	.word	0x080047e3
 80047c0:	080047db 	.word	0x080047db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c4:	f7fe fbea 	bl	8002f9c <HAL_RCC_GetPCLK1Freq>
 80047c8:	6178      	str	r0, [r7, #20]
        break;
 80047ca:	e00f      	b.n	80047ec <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047cc:	4b48      	ldr	r3, [pc, #288]	; (80048f0 <UART_SetConfig+0x2fc>)
 80047ce:	617b      	str	r3, [r7, #20]
        break;
 80047d0:	e00c      	b.n	80047ec <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047d2:	f7fe fb4b 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 80047d6:	6178      	str	r0, [r7, #20]
        break;
 80047d8:	e008      	b.n	80047ec <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047de:	617b      	str	r3, [r7, #20]
        break;
 80047e0:	e004      	b.n	80047ec <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	76bb      	strb	r3, [r7, #26]
        break;
 80047ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 80fe 	beq.w	80049f0 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	4413      	add	r3, r2
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	429a      	cmp	r2, r3
 8004802:	d305      	bcc.n	8004810 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	429a      	cmp	r2, r3
 800480e:	d902      	bls.n	8004816 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	76bb      	strb	r3, [r7, #26]
 8004814:	e0ec      	b.n	80049f0 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	4618      	mov	r0, r3
 800481a:	f04f 0100 	mov.w	r1, #0
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	020b      	lsls	r3, r1, #8
 8004828:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800482c:	0202      	lsls	r2, r0, #8
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	6849      	ldr	r1, [r1, #4]
 8004832:	0849      	lsrs	r1, r1, #1
 8004834:	4608      	mov	r0, r1
 8004836:	f04f 0100 	mov.w	r1, #0
 800483a:	1814      	adds	r4, r2, r0
 800483c:	eb43 0501 	adc.w	r5, r3, r1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	461a      	mov	r2, r3
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	4620      	mov	r0, r4
 800484c:	4629      	mov	r1, r5
 800484e:	f7fb fd0f 	bl	8000270 <__aeabi_uldivmod>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4613      	mov	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004860:	d308      	bcc.n	8004874 <UART_SetConfig+0x280>
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004868:	d204      	bcs.n	8004874 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	60da      	str	r2, [r3, #12]
 8004872:	e0bd      	b.n	80049f0 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	76bb      	strb	r3, [r7, #26]
 8004878:	e0ba      	b.n	80049f0 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004882:	d168      	bne.n	8004956 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8004884:	7efb      	ldrb	r3, [r7, #27]
 8004886:	2b08      	cmp	r3, #8
 8004888:	d834      	bhi.n	80048f4 <UART_SetConfig+0x300>
 800488a:	a201      	add	r2, pc, #4	; (adr r2, 8004890 <UART_SetConfig+0x29c>)
 800488c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004890:	080048b5 	.word	0x080048b5
 8004894:	080048bd 	.word	0x080048bd
 8004898:	080048c5 	.word	0x080048c5
 800489c:	080048f5 	.word	0x080048f5
 80048a0:	080048cb 	.word	0x080048cb
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	080048f5 	.word	0x080048f5
 80048ac:	080048f5 	.word	0x080048f5
 80048b0:	080048d3 	.word	0x080048d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b4:	f7fe fb72 	bl	8002f9c <HAL_RCC_GetPCLK1Freq>
 80048b8:	6178      	str	r0, [r7, #20]
        break;
 80048ba:	e020      	b.n	80048fe <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048bc:	f7fe fb84 	bl	8002fc8 <HAL_RCC_GetPCLK2Freq>
 80048c0:	6178      	str	r0, [r7, #20]
        break;
 80048c2:	e01c      	b.n	80048fe <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c4:	4b0a      	ldr	r3, [pc, #40]	; (80048f0 <UART_SetConfig+0x2fc>)
 80048c6:	617b      	str	r3, [r7, #20]
        break;
 80048c8:	e019      	b.n	80048fe <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ca:	f7fe facf 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 80048ce:	6178      	str	r0, [r7, #20]
        break;
 80048d0:	e015      	b.n	80048fe <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048d6:	617b      	str	r3, [r7, #20]
        break;
 80048d8:	e011      	b.n	80048fe <UART_SetConfig+0x30a>
 80048da:	bf00      	nop
 80048dc:	efff69f3 	.word	0xefff69f3
 80048e0:	40008000 	.word	0x40008000
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40004400 	.word	0x40004400
 80048f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	76bb      	strb	r3, [r7, #26]
        break;
 80048fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d075      	beq.n	80049f0 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	005a      	lsls	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	085b      	lsrs	r3, r3, #1
 800490e:	441a      	add	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	fbb2 f3f3 	udiv	r3, r2, r3
 8004918:	b29b      	uxth	r3, r3
 800491a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	d916      	bls.n	8004950 <UART_SetConfig+0x35c>
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004928:	d212      	bcs.n	8004950 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	b29b      	uxth	r3, r3
 800492e:	f023 030f 	bic.w	r3, r3, #15
 8004932:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	b29b      	uxth	r3, r3
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	b29a      	uxth	r2, r3
 8004940:	89fb      	ldrh	r3, [r7, #14]
 8004942:	4313      	orrs	r3, r2
 8004944:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	89fa      	ldrh	r2, [r7, #14]
 800494c:	60da      	str	r2, [r3, #12]
 800494e:	e04f      	b.n	80049f0 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	76bb      	strb	r3, [r7, #26]
 8004954:	e04c      	b.n	80049f0 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004956:	7efb      	ldrb	r3, [r7, #27]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d828      	bhi.n	80049ae <UART_SetConfig+0x3ba>
 800495c:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <UART_SetConfig+0x370>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004989 	.word	0x08004989
 8004968:	08004991 	.word	0x08004991
 800496c:	08004999 	.word	0x08004999
 8004970:	080049af 	.word	0x080049af
 8004974:	0800499f 	.word	0x0800499f
 8004978:	080049af 	.word	0x080049af
 800497c:	080049af 	.word	0x080049af
 8004980:	080049af 	.word	0x080049af
 8004984:	080049a7 	.word	0x080049a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004988:	f7fe fb08 	bl	8002f9c <HAL_RCC_GetPCLK1Freq>
 800498c:	6178      	str	r0, [r7, #20]
        break;
 800498e:	e013      	b.n	80049b8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004990:	f7fe fb1a 	bl	8002fc8 <HAL_RCC_GetPCLK2Freq>
 8004994:	6178      	str	r0, [r7, #20]
        break;
 8004996:	e00f      	b.n	80049b8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <UART_SetConfig+0x414>)
 800499a:	617b      	str	r3, [r7, #20]
        break;
 800499c:	e00c      	b.n	80049b8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499e:	f7fe fa65 	bl	8002e6c <HAL_RCC_GetSysClockFreq>
 80049a2:	6178      	str	r0, [r7, #20]
        break;
 80049a4:	e008      	b.n	80049b8 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049aa:	617b      	str	r3, [r7, #20]
        break;
 80049ac:	e004      	b.n	80049b8 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	76bb      	strb	r3, [r7, #26]
        break;
 80049b6:	bf00      	nop
    }

    if (pclk != 0U)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d018      	beq.n	80049f0 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	085a      	lsrs	r2, r3, #1
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	441a      	add	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	d908      	bls.n	80049ec <UART_SetConfig+0x3f8>
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e0:	d204      	bcs.n	80049ec <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	60da      	str	r2, [r3, #12]
 80049ea:	e001      	b.n	80049f0 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80049fc:	7ebb      	ldrb	r3, [r7, #26]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bdb0      	pop	{r4, r5, r7, pc}
 8004a06:	bf00      	nop
 8004a08:	00f42400 	.word	0x00f42400

08004a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0304 	and.w	r3, r3, #4
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b0a:	d10a      	bne.n	8004b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b60:	f7fc fb66 	bl	8001230 <HAL_GetTick>
 8004b64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d10e      	bne.n	8004b92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f82d 	bl	8004be2 <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e023      	b.n	8004bda <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d10e      	bne.n	8004bbe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f817 	bl	8004be2 <UART_WaitOnFlagUntilTimeout>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e00d      	b.n	8004bda <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b084      	sub	sp, #16
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	60f8      	str	r0, [r7, #12]
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf2:	e05e      	b.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bfa:	d05a      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfc:	f7fc fb18 	bl	8001230 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d302      	bcc.n	8004c12 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11b      	bne.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c20:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0201 	bic.w	r2, r2, #1
 8004c30:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e043      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0304 	and.w	r3, r3, #4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d02c      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c66:	d124      	bne.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c70:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004c80:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0201 	bic.w	r2, r2, #1
 8004c90:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2220      	movs	r2, #32
 8004c96:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2220      	movs	r2, #32
 8004ca2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e00f      	b.n	8004cd2 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	69da      	ldr	r2, [r3, #28]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	bf0c      	ite	eq
 8004cc2:	2301      	moveq	r3, #1
 8004cc4:	2300      	movne	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	461a      	mov	r2, r3
 8004cca:	79fb      	ldrb	r3, [r7, #7]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d091      	beq.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
	...

08004cdc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004ce0:	4904      	ldr	r1, [pc, #16]	; (8004cf4 <MX_FATFS_Init+0x18>)
 8004ce2:	4805      	ldr	r0, [pc, #20]	; (8004cf8 <MX_FATFS_Init+0x1c>)
 8004ce4:	f000 fd78 	bl	80057d8 <FATFS_LinkDriver>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <MX_FATFS_Init+0x20>)
 8004cee:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004cf0:	bf00      	nop
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000498 	.word	0x20000498
 8004cf8:	2000000c 	.word	0x2000000c
 8004cfc:	2000049c 	.word	0x2000049c

08004d00 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	4603      	mov	r3, r0
 8004d08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f9d9 	bl	80050c4 <USER_SPI_initialize>
 8004d12:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3708      	adds	r7, #8
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 faa1 	bl	8005270 <USER_SPI_status>
 8004d2e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60b9      	str	r1, [r7, #8]
 8004d40:	607a      	str	r2, [r7, #4]
 8004d42:	603b      	str	r3, [r7, #0]
 8004d44:	4603      	mov	r3, r0
 8004d46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004d48:	7bf8      	ldrb	r0, [r7, #15]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	f000 faa4 	bl	800529c <USER_SPI_read>
 8004d54:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004d6e:	7bf8      	ldrb	r0, [r7, #15]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	68b9      	ldr	r1, [r7, #8]
 8004d76:	f000 faf7 	bl	8005368 <USER_SPI_write>
 8004d7a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	603a      	str	r2, [r7, #0]
 8004d8e:	71fb      	strb	r3, [r7, #7]
 8004d90:	460b      	mov	r3, r1
 8004d92:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004d94:	79b9      	ldrb	r1, [r7, #6]
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fb60 	bl	8005460 <USER_SPI_ioctl>
 8004da0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b082      	sub	sp, #8
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8004db4:	f7fc fa3c 	bl	8001230 <HAL_GetTick>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <SPI_Timer_On+0x20>)
 8004dbc:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8004dbe:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <SPI_Timer_On+0x24>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6013      	str	r3, [r2, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	20000900 	.word	0x20000900
 8004dd0:	20000904 	.word	0x20000904

08004dd4 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8004dd8:	f7fc fa2a 	bl	8001230 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <SPI_Timer_Status+0x24>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <SPI_Timer_Status+0x28>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	bf34      	ite	cc
 8004dec:	2301      	movcc	r3, #1
 8004dee:	2300      	movcs	r3, #0
 8004df0:	b2db      	uxtb	r3, r3
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20000900 	.word	0x20000900
 8004dfc:	20000904 	.word	0x20000904

08004e00 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	4603      	mov	r3, r0
 8004e08:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 8004e0a:	f107 020f 	add.w	r2, r7, #15
 8004e0e:	1df9      	adds	r1, r7, #7
 8004e10:	2332      	movs	r3, #50	; 0x32
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2301      	movs	r3, #1
 8004e16:	4804      	ldr	r0, [pc, #16]	; (8004e28 <xchg_spi+0x28>)
 8004e18:	f7fe fd17 	bl	800384a <HAL_SPI_TransmitReceive>
    return rxDat;
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000360 	.word	0x20000360

08004e2c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e00a      	b.n	8004e52 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	18d4      	adds	r4, r2, r3
 8004e42:	20ff      	movs	r0, #255	; 0xff
 8004e44:	f7ff ffdc 	bl	8004e00 <xchg_spi>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d3f0      	bcc.n	8004e3c <rcvr_spi_multi+0x10>
	}
}
 8004e5a:	bf00      	nop
 8004e5c:	bf00      	nop
 8004e5e:	3714      	adds	r7, #20
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd90      	pop	{r4, r7, pc}

08004e64 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8004e6e:	2300      	movs	r3, #0
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	e009      	b.n	8004e88 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff ffbf 	bl	8004e00 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3301      	adds	r3, #1
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d3f1      	bcc.n	8004e74 <xmit_spi_multi+0x10>
	}
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8004ea2:	f7fc f9c5 	bl	8001230 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8004eac:	20ff      	movs	r0, #255	; 0xff
 8004eae:	f7ff ffa7 	bl	8004e00 <xchg_spi>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2bff      	cmp	r3, #255	; 0xff
 8004eba:	d007      	beq.n	8004ecc <wait_ready+0x32>
 8004ebc:	f7fc f9b8 	bl	8001230 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d8ef      	bhi.n	8004eac <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2bff      	cmp	r3, #255	; 0xff
 8004ed0:	bf0c      	ite	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	2300      	movne	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	2102      	movs	r1, #2
 8004ee8:	4803      	ldr	r0, [pc, #12]	; (8004ef8 <despiselect+0x18>)
 8004eea:	f7fc fc1d 	bl	8001728 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8004eee:	20ff      	movs	r0, #255	; 0xff
 8004ef0:	f7ff ff86 	bl	8004e00 <xchg_spi>

}
 8004ef4:	bf00      	nop
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	48000400 	.word	0x48000400

08004efc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8004f00:	2200      	movs	r2, #0
 8004f02:	2102      	movs	r1, #2
 8004f04:	4809      	ldr	r0, [pc, #36]	; (8004f2c <spiselect+0x30>)
 8004f06:	f7fc fc0f 	bl	8001728 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8004f0a:	20ff      	movs	r0, #255	; 0xff
 8004f0c:	f7ff ff78 	bl	8004e00 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8004f10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f14:	f7ff ffc1 	bl	8004e9a <wait_ready>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <spiselect+0x26>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e002      	b.n	8004f28 <spiselect+0x2c>

	despiselect();
 8004f22:	f7ff ffdd 	bl	8004ee0 <despiselect>
	return 0;	/* Timeout */
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	48000400 	.word	0x48000400

08004f30 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8004f3a:	20c8      	movs	r0, #200	; 0xc8
 8004f3c:	f7ff ff36 	bl	8004dac <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8004f40:	20ff      	movs	r0, #255	; 0xff
 8004f42:	f7ff ff5d 	bl	8004e00 <xchg_spi>
 8004f46:	4603      	mov	r3, r0
 8004f48:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
 8004f4c:	2bff      	cmp	r3, #255	; 0xff
 8004f4e:	d104      	bne.n	8004f5a <rcvr_datablock+0x2a>
 8004f50:	f7ff ff40 	bl	8004dd4 <SPI_Timer_Status>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f2      	bne.n	8004f40 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	2bfe      	cmp	r3, #254	; 0xfe
 8004f5e:	d001      	beq.n	8004f64 <rcvr_datablock+0x34>
 8004f60:	2300      	movs	r3, #0
 8004f62:	e00a      	b.n	8004f7a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7ff ff60 	bl	8004e2c <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8004f6c:	20ff      	movs	r0, #255	; 0xff
 8004f6e:	f7ff ff47 	bl	8004e00 <xchg_spi>
 8004f72:	20ff      	movs	r0, #255	; 0xff
 8004f74:	f7ff ff44 	bl	8004e00 <xchg_spi>

	return 1;						/* Function succeeded */
 8004f78:	2301      	movs	r3, #1
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	b084      	sub	sp, #16
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8004f8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f92:	f7ff ff82 	bl	8004e9a <wait_ready>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <xmit_datablock+0x1e>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e01e      	b.n	8004fde <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8004fa0:	78fb      	ldrb	r3, [r7, #3]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7ff ff2c 	bl	8004e00 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	2bfd      	cmp	r3, #253	; 0xfd
 8004fac:	d016      	beq.n	8004fdc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8004fae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ff56 	bl	8004e64 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8004fb8:	20ff      	movs	r0, #255	; 0xff
 8004fba:	f7ff ff21 	bl	8004e00 <xchg_spi>
 8004fbe:	20ff      	movs	r0, #255	; 0xff
 8004fc0:	f7ff ff1e 	bl	8004e00 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8004fc4:	20ff      	movs	r0, #255	; 0xff
 8004fc6:	f7ff ff1b 	bl	8004e00 <xchg_spi>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2b05      	cmp	r3, #5
 8004fd6:	d001      	beq.n	8004fdc <xmit_datablock+0x5a>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e000      	b.n	8004fde <xmit_datablock+0x5c>
	}
	return 1;
 8004fdc:	2301      	movs	r3, #1
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	4603      	mov	r3, r0
 8004fee:	6039      	str	r1, [r7, #0]
 8004ff0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8004ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	da0e      	bge.n	8005018 <send_cmd+0x32>
		cmd &= 0x7F;
 8004ffa:	79fb      	ldrb	r3, [r7, #7]
 8004ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005000:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8005002:	2100      	movs	r1, #0
 8005004:	2037      	movs	r0, #55	; 0x37
 8005006:	f7ff ffee 	bl	8004fe6 <send_cmd>
 800500a:	4603      	mov	r3, r0
 800500c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800500e:	7bbb      	ldrb	r3, [r7, #14]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d901      	bls.n	8005018 <send_cmd+0x32>
 8005014:	7bbb      	ldrb	r3, [r7, #14]
 8005016:	e051      	b.n	80050bc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8005018:	79fb      	ldrb	r3, [r7, #7]
 800501a:	2b0c      	cmp	r3, #12
 800501c:	d008      	beq.n	8005030 <send_cmd+0x4a>
		despiselect();
 800501e:	f7ff ff5f 	bl	8004ee0 <despiselect>
		if (!spiselect()) return 0xFF;
 8005022:	f7ff ff6b 	bl	8004efc <spiselect>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <send_cmd+0x4a>
 800502c:	23ff      	movs	r3, #255	; 0xff
 800502e:	e045      	b.n	80050bc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005036:	b2db      	uxtb	r3, r3
 8005038:	4618      	mov	r0, r3
 800503a:	f7ff fee1 	bl	8004e00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	0e1b      	lsrs	r3, r3, #24
 8005042:	b2db      	uxtb	r3, r3
 8005044:	4618      	mov	r0, r3
 8005046:	f7ff fedb 	bl	8004e00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	0c1b      	lsrs	r3, r3, #16
 800504e:	b2db      	uxtb	r3, r3
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff fed5 	bl	8004e00 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	b2db      	uxtb	r3, r3
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff fecf 	bl	8004e00 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	b2db      	uxtb	r3, r3
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff feca 	bl	8004e00 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <send_cmd+0x94>
 8005076:	2395      	movs	r3, #149	; 0x95
 8005078:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d101      	bne.n	8005084 <send_cmd+0x9e>
 8005080:	2387      	movs	r3, #135	; 0x87
 8005082:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff feba 	bl	8004e00 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	2b0c      	cmp	r3, #12
 8005090:	d102      	bne.n	8005098 <send_cmd+0xb2>
 8005092:	20ff      	movs	r0, #255	; 0xff
 8005094:	f7ff feb4 	bl	8004e00 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8005098:	230a      	movs	r3, #10
 800509a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800509c:	20ff      	movs	r0, #255	; 0xff
 800509e:	f7ff feaf 	bl	8004e00 <xchg_spi>
 80050a2:	4603      	mov	r3, r0
 80050a4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80050a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	da05      	bge.n	80050ba <send_cmd+0xd4>
 80050ae:	7bfb      	ldrb	r3, [r7, #15]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	73fb      	strb	r3, [r7, #15]
 80050b4:	7bfb      	ldrb	r3, [r7, #15]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1f0      	bne.n	800509c <send_cmd+0xb6>

	return res;							/* Return received response */
 80050ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80050c4:	b590      	push	{r4, r7, lr}
 80050c6:	b085      	sub	sp, #20
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80050ce:	79fb      	ldrb	r3, [r7, #7]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <USER_SPI_initialize+0x14>
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0c2      	b.n	800525e <USER_SPI_initialize+0x19a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80050d8:	4b63      	ldr	r3, [pc, #396]	; (8005268 <USER_SPI_initialize+0x1a4>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <USER_SPI_initialize+0x2a>
 80050e6:	4b60      	ldr	r3, [pc, #384]	; (8005268 <USER_SPI_initialize+0x1a4>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	e0b7      	b.n	800525e <USER_SPI_initialize+0x19a>

	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 80050ee:	230a      	movs	r3, #10
 80050f0:	73fb      	strb	r3, [r7, #15]
 80050f2:	e005      	b.n	8005100 <USER_SPI_initialize+0x3c>
 80050f4:	20ff      	movs	r0, #255	; 0xff
 80050f6:	f7ff fe83 	bl	8004e00 <xchg_spi>
 80050fa:	7bfb      	ldrb	r3, [r7, #15]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
 8005100:	7bfb      	ldrb	r3, [r7, #15]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f6      	bne.n	80050f4 <USER_SPI_initialize+0x30>

	ty = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800510a:	2100      	movs	r1, #0
 800510c:	2000      	movs	r0, #0
 800510e:	f7ff ff6a 	bl	8004fe6 <send_cmd>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	f040 808b 	bne.w	8005230 <USER_SPI_initialize+0x16c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800511a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800511e:	f7ff fe45 	bl	8004dac <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8005122:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005126:	2008      	movs	r0, #8
 8005128:	f7ff ff5d 	bl	8004fe6 <send_cmd>
 800512c:	4603      	mov	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d151      	bne.n	80051d6 <USER_SPI_initialize+0x112>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	e00d      	b.n	8005154 <USER_SPI_initialize+0x90>
 8005138:	7bfc      	ldrb	r4, [r7, #15]
 800513a:	20ff      	movs	r0, #255	; 0xff
 800513c:	f7ff fe60 	bl	8004e00 <xchg_spi>
 8005140:	4603      	mov	r3, r0
 8005142:	461a      	mov	r2, r3
 8005144:	f107 0310 	add.w	r3, r7, #16
 8005148:	4423      	add	r3, r4
 800514a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	3301      	adds	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d9ee      	bls.n	8005138 <USER_SPI_initialize+0x74>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800515a:	7abb      	ldrb	r3, [r7, #10]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d167      	bne.n	8005230 <USER_SPI_initialize+0x16c>
 8005160:	7afb      	ldrb	r3, [r7, #11]
 8005162:	2baa      	cmp	r3, #170	; 0xaa
 8005164:	d164      	bne.n	8005230 <USER_SPI_initialize+0x16c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8005166:	bf00      	nop
 8005168:	f7ff fe34 	bl	8004dd4 <SPI_Timer_Status>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d007      	beq.n	8005182 <USER_SPI_initialize+0xbe>
 8005172:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005176:	20a9      	movs	r0, #169	; 0xa9
 8005178:	f7ff ff35 	bl	8004fe6 <send_cmd>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f2      	bne.n	8005168 <USER_SPI_initialize+0xa4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8005182:	f7ff fe27 	bl	8004dd4 <SPI_Timer_Status>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d051      	beq.n	8005230 <USER_SPI_initialize+0x16c>
 800518c:	2100      	movs	r1, #0
 800518e:	203a      	movs	r0, #58	; 0x3a
 8005190:	f7ff ff29 	bl	8004fe6 <send_cmd>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d14a      	bne.n	8005230 <USER_SPI_initialize+0x16c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800519a:	2300      	movs	r3, #0
 800519c:	73fb      	strb	r3, [r7, #15]
 800519e:	e00d      	b.n	80051bc <USER_SPI_initialize+0xf8>
 80051a0:	7bfc      	ldrb	r4, [r7, #15]
 80051a2:	20ff      	movs	r0, #255	; 0xff
 80051a4:	f7ff fe2c 	bl	8004e00 <xchg_spi>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	f107 0310 	add.w	r3, r7, #16
 80051b0:	4423      	add	r3, r4
 80051b2:	f803 2c08 	strb.w	r2, [r3, #-8]
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
 80051b8:	3301      	adds	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d9ee      	bls.n	80051a0 <USER_SPI_initialize+0xdc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80051c2:	7a3b      	ldrb	r3, [r7, #8]
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <USER_SPI_initialize+0x10c>
 80051cc:	230c      	movs	r3, #12
 80051ce:	e000      	b.n	80051d2 <USER_SPI_initialize+0x10e>
 80051d0:	2304      	movs	r3, #4
 80051d2:	737b      	strb	r3, [r7, #13]
 80051d4:	e02c      	b.n	8005230 <USER_SPI_initialize+0x16c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 80051d6:	2100      	movs	r1, #0
 80051d8:	20a9      	movs	r0, #169	; 0xa9
 80051da:	f7ff ff04 	bl	8004fe6 <send_cmd>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d804      	bhi.n	80051ee <USER_SPI_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 80051e4:	2302      	movs	r3, #2
 80051e6:	737b      	strb	r3, [r7, #13]
 80051e8:	23a9      	movs	r3, #169	; 0xa9
 80051ea:	73bb      	strb	r3, [r7, #14]
 80051ec:	e003      	b.n	80051f6 <USER_SPI_initialize+0x132>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 80051ee:	2301      	movs	r3, #1
 80051f0:	737b      	strb	r3, [r7, #13]
 80051f2:	2301      	movs	r3, #1
 80051f4:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 80051f6:	bf00      	nop
 80051f8:	f7ff fdec 	bl	8004dd4 <SPI_Timer_Status>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <USER_SPI_initialize+0x14e>
 8005202:	7bbb      	ldrb	r3, [r7, #14]
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff feed 	bl	8004fe6 <send_cmd>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f2      	bne.n	80051f8 <USER_SPI_initialize+0x134>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8005212:	f7ff fddf 	bl	8004dd4 <SPI_Timer_Status>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <USER_SPI_initialize+0x168>
 800521c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005220:	2010      	movs	r0, #16
 8005222:	f7ff fee0 	bl	8004fe6 <send_cmd>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <USER_SPI_initialize+0x16c>
				ty = 0;
 800522c:	2300      	movs	r3, #0
 800522e:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8005230:	4a0e      	ldr	r2, [pc, #56]	; (800526c <USER_SPI_initialize+0x1a8>)
 8005232:	7b7b      	ldrb	r3, [r7, #13]
 8005234:	7013      	strb	r3, [r2, #0]
	despiselect();
 8005236:	f7ff fe53 	bl	8004ee0 <despiselect>

	if (ty) {			/* OK */
 800523a:	7b7b      	ldrb	r3, [r7, #13]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d008      	beq.n	8005252 <USER_SPI_initialize+0x18e>
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8005240:	4b09      	ldr	r3, [pc, #36]	; (8005268 <USER_SPI_initialize+0x1a4>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b2db      	uxtb	r3, r3
 8005246:	f023 0301 	bic.w	r3, r3, #1
 800524a:	b2da      	uxtb	r2, r3
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <USER_SPI_initialize+0x1a4>)
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	e002      	b.n	8005258 <USER_SPI_initialize+0x194>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <USER_SPI_initialize+0x1a4>)
 8005254:	2201      	movs	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8005258:	4b03      	ldr	r3, [pc, #12]	; (8005268 <USER_SPI_initialize+0x1a4>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	b2db      	uxtb	r3, r3
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	bd90      	pop	{r4, r7, pc}
 8005266:	bf00      	nop
 8005268:	20000020 	.word	0x20000020
 800526c:	200000a8 	.word	0x200000a8

08005270 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	4603      	mov	r3, r0
 8005278:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <USER_SPI_status+0x14>
 8005280:	2301      	movs	r3, #1
 8005282:	e002      	b.n	800528a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8005284:	4b04      	ldr	r3, [pc, #16]	; (8005298 <USER_SPI_status+0x28>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	b2db      	uxtb	r3, r3
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000020 	.word	0x20000020

0800529c <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <USER_SPI_read+0x1c>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <USER_SPI_read+0x20>
 80052b8:	2304      	movs	r3, #4
 80052ba:	e04d      	b.n	8005358 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80052bc:	4b28      	ldr	r3, [pc, #160]	; (8005360 <USER_SPI_read+0xc4>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 0301 	and.w	r3, r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <USER_SPI_read+0x32>
 80052ca:	2303      	movs	r3, #3
 80052cc:	e044      	b.n	8005358 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80052ce:	4b25      	ldr	r3, [pc, #148]	; (8005364 <USER_SPI_read+0xc8>)
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	f003 0308 	and.w	r3, r3, #8
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d102      	bne.n	80052e0 <USER_SPI_read+0x44>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	025b      	lsls	r3, r3, #9
 80052de:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d111      	bne.n	800530a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80052e6:	6879      	ldr	r1, [r7, #4]
 80052e8:	2011      	movs	r0, #17
 80052ea:	f7ff fe7c 	bl	8004fe6 <send_cmd>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d129      	bne.n	8005348 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 80052f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052f8:	68b8      	ldr	r0, [r7, #8]
 80052fa:	f7ff fe19 	bl	8004f30 <rcvr_datablock>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d021      	beq.n	8005348 <USER_SPI_read+0xac>
			count = 0;
 8005304:	2300      	movs	r3, #0
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	e01e      	b.n	8005348 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	2012      	movs	r0, #18
 800530e:	f7ff fe6a 	bl	8004fe6 <send_cmd>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d117      	bne.n	8005348 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8005318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800531c:	68b8      	ldr	r0, [r7, #8]
 800531e:	f7ff fe07 	bl	8004f30 <rcvr_datablock>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00a      	beq.n	800533e <USER_SPI_read+0xa2>
				buff += 512;
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800532e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	3b01      	subs	r3, #1
 8005334:	603b      	str	r3, [r7, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1ed      	bne.n	8005318 <USER_SPI_read+0x7c>
 800533c:	e000      	b.n	8005340 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800533e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8005340:	2100      	movs	r1, #0
 8005342:	200c      	movs	r0, #12
 8005344:	f7ff fe4f 	bl	8004fe6 <send_cmd>
		}
	}
	despiselect();
 8005348:	f7ff fdca 	bl	8004ee0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2db      	uxtb	r3, r3
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	20000020 	.word	0x20000020
 8005364:	200000a8 	.word	0x200000a8

08005368 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	60b9      	str	r1, [r7, #8]
 8005370:	607a      	str	r2, [r7, #4]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	4603      	mov	r3, r0
 8005376:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d102      	bne.n	8005384 <USER_SPI_write+0x1c>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <USER_SPI_write+0x20>
 8005384:	2304      	movs	r3, #4
 8005386:	e063      	b.n	8005450 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8005388:	4b33      	ldr	r3, [pc, #204]	; (8005458 <USER_SPI_write+0xf0>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <USER_SPI_write+0x32>
 8005396:	2303      	movs	r3, #3
 8005398:	e05a      	b.n	8005450 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800539a:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <USER_SPI_write+0xf0>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <USER_SPI_write+0x44>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e051      	b.n	8005450 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80053ac:	4b2b      	ldr	r3, [pc, #172]	; (800545c <USER_SPI_write+0xf4>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d102      	bne.n	80053be <USER_SPI_write+0x56>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	025b      	lsls	r3, r3, #9
 80053bc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d110      	bne.n	80053e6 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	2018      	movs	r0, #24
 80053c8:	f7ff fe0d 	bl	8004fe6 <send_cmd>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d136      	bne.n	8005440 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 80053d2:	21fe      	movs	r1, #254	; 0xfe
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f7ff fdd4 	bl	8004f82 <xmit_datablock>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d02f      	beq.n	8005440 <USER_SPI_write+0xd8>
			count = 0;
 80053e0:	2300      	movs	r3, #0
 80053e2:	603b      	str	r3, [r7, #0]
 80053e4:	e02c      	b.n	8005440 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80053e6:	4b1d      	ldr	r3, [pc, #116]	; (800545c <USER_SPI_write+0xf4>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	f003 0306 	and.w	r3, r3, #6
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <USER_SPI_write+0x92>
 80053f2:	6839      	ldr	r1, [r7, #0]
 80053f4:	2097      	movs	r0, #151	; 0x97
 80053f6:	f7ff fdf6 	bl	8004fe6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80053fa:	6879      	ldr	r1, [r7, #4]
 80053fc:	2019      	movs	r0, #25
 80053fe:	f7ff fdf2 	bl	8004fe6 <send_cmd>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d11b      	bne.n	8005440 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8005408:	21fc      	movs	r1, #252	; 0xfc
 800540a:	68b8      	ldr	r0, [r7, #8]
 800540c:	f7ff fdb9 	bl	8004f82 <xmit_datablock>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <USER_SPI_write+0xc4>
				buff += 512;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800541c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	3b01      	subs	r3, #1
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1ee      	bne.n	8005408 <USER_SPI_write+0xa0>
 800542a:	e000      	b.n	800542e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800542c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800542e:	21fd      	movs	r1, #253	; 0xfd
 8005430:	2000      	movs	r0, #0
 8005432:	f7ff fda6 	bl	8004f82 <xmit_datablock>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <USER_SPI_write+0xd8>
 800543c:	2301      	movs	r3, #1
 800543e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8005440:	f7ff fd4e 	bl	8004ee0 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	bf14      	ite	ne
 800544a:	2301      	movne	r3, #1
 800544c:	2300      	moveq	r3, #0
 800544e:	b2db      	uxtb	r3, r3
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000020 	.word	0x20000020
 800545c:	200000a8 	.word	0x200000a8

08005460 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08c      	sub	sp, #48	; 0x30
 8005464:	af00      	add	r7, sp, #0
 8005466:	4603      	mov	r3, r0
 8005468:	603a      	str	r2, [r7, #0]
 800546a:	71fb      	strb	r3, [r7, #7]
 800546c:	460b      	mov	r3, r1
 800546e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d001      	beq.n	800547a <USER_SPI_ioctl+0x1a>
 8005476:	2304      	movs	r3, #4
 8005478:	e15a      	b.n	8005730 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800547a:	4baf      	ldr	r3, [pc, #700]	; (8005738 <USER_SPI_ioctl+0x2d8>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <USER_SPI_ioctl+0x2c>
 8005488:	2303      	movs	r3, #3
 800548a:	e151      	b.n	8005730 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8005492:	79bb      	ldrb	r3, [r7, #6]
 8005494:	2b04      	cmp	r3, #4
 8005496:	f200 8136 	bhi.w	8005706 <USER_SPI_ioctl+0x2a6>
 800549a:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <USER_SPI_ioctl+0x40>)
 800549c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a0:	080054b5 	.word	0x080054b5
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	08005707 	.word	0x08005707
 80054ac:	08005575 	.word	0x08005575
 80054b0:	0800566b 	.word	0x0800566b
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80054b4:	f7ff fd22 	bl	8004efc <spiselect>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 8127 	beq.w	800570e <USER_SPI_ioctl+0x2ae>
 80054c0:	2300      	movs	r3, #0
 80054c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80054c6:	e122      	b.n	800570e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80054c8:	2100      	movs	r1, #0
 80054ca:	2009      	movs	r0, #9
 80054cc:	f7ff fd8b 	bl	8004fe6 <send_cmd>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	f040 811d 	bne.w	8005712 <USER_SPI_ioctl+0x2b2>
 80054d8:	f107 030c 	add.w	r3, r7, #12
 80054dc:	2110      	movs	r1, #16
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff fd26 	bl	8004f30 <rcvr_datablock>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 8113 	beq.w	8005712 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 80054ec:	7b3b      	ldrb	r3, [r7, #12]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d111      	bne.n	800551a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 80054f6:	7d7b      	ldrb	r3, [r7, #21]
 80054f8:	461a      	mov	r2, r3
 80054fa:	7d3b      	ldrb	r3, [r7, #20]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	4413      	add	r3, r2
 8005500:	461a      	mov	r2, r3
 8005502:	7cfb      	ldrb	r3, [r7, #19]
 8005504:	041b      	lsls	r3, r3, #16
 8005506:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800550a:	4413      	add	r3, r2
 800550c:	3301      	adds	r3, #1
 800550e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	029a      	lsls	r2, r3, #10
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	601a      	str	r2, [r3, #0]
 8005518:	e028      	b.n	800556c <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800551a:	7c7b      	ldrb	r3, [r7, #17]
 800551c:	f003 030f 	and.w	r3, r3, #15
 8005520:	b2da      	uxtb	r2, r3
 8005522:	7dbb      	ldrb	r3, [r7, #22]
 8005524:	09db      	lsrs	r3, r3, #7
 8005526:	b2db      	uxtb	r3, r3
 8005528:	4413      	add	r3, r2
 800552a:	b2da      	uxtb	r2, r3
 800552c:	7d7b      	ldrb	r3, [r7, #21]
 800552e:	005b      	lsls	r3, r3, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0306 	and.w	r3, r3, #6
 8005536:	b2db      	uxtb	r3, r3
 8005538:	4413      	add	r3, r2
 800553a:	b2db      	uxtb	r3, r3
 800553c:	3302      	adds	r3, #2
 800553e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8005542:	7d3b      	ldrb	r3, [r7, #20]
 8005544:	099b      	lsrs	r3, r3, #6
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	7cfb      	ldrb	r3, [r7, #19]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	7cbb      	ldrb	r3, [r7, #18]
 8005552:	029b      	lsls	r3, r3, #10
 8005554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005558:	4413      	add	r3, r2
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800555e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005562:	3b09      	subs	r3, #9
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	409a      	lsls	r2, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005572:	e0ce      	b.n	8005712 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8005574:	4b71      	ldr	r3, [pc, #452]	; (800573c <USER_SPI_ioctl+0x2dc>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d031      	beq.n	80055e4 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8005580:	2100      	movs	r1, #0
 8005582:	208d      	movs	r0, #141	; 0x8d
 8005584:	f7ff fd2f 	bl	8004fe6 <send_cmd>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	f040 80c3 	bne.w	8005716 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8005590:	20ff      	movs	r0, #255	; 0xff
 8005592:	f7ff fc35 	bl	8004e00 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8005596:	f107 030c 	add.w	r3, r7, #12
 800559a:	2110      	movs	r1, #16
 800559c:	4618      	mov	r0, r3
 800559e:	f7ff fcc7 	bl	8004f30 <rcvr_datablock>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80b6 	beq.w	8005716 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80055aa:	2330      	movs	r3, #48	; 0x30
 80055ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80055b0:	e007      	b.n	80055c2 <USER_SPI_ioctl+0x162>
 80055b2:	20ff      	movs	r0, #255	; 0xff
 80055b4:	f7ff fc24 	bl	8004e00 <xchg_spi>
 80055b8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055bc:	3b01      	subs	r3, #1
 80055be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80055c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f3      	bne.n	80055b2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80055ca:	7dbb      	ldrb	r3, [r7, #22]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	461a      	mov	r2, r3
 80055d2:	2310      	movs	r3, #16
 80055d4:	fa03 f202 	lsl.w	r2, r3, r2
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80055e2:	e098      	b.n	8005716 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80055e4:	2100      	movs	r1, #0
 80055e6:	2009      	movs	r0, #9
 80055e8:	f7ff fcfd 	bl	8004fe6 <send_cmd>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f040 8091 	bne.w	8005716 <USER_SPI_ioctl+0x2b6>
 80055f4:	f107 030c 	add.w	r3, r7, #12
 80055f8:	2110      	movs	r1, #16
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fc98 	bl	8004f30 <rcvr_datablock>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 8087 	beq.w	8005716 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8005608:	4b4c      	ldr	r3, [pc, #304]	; (800573c <USER_SPI_ioctl+0x2dc>)
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d012      	beq.n	800563a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8005614:	7dbb      	ldrb	r3, [r7, #22]
 8005616:	005b      	lsls	r3, r3, #1
 8005618:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800561c:	7dfa      	ldrb	r2, [r7, #23]
 800561e:	09d2      	lsrs	r2, r2, #7
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	4413      	add	r3, r2
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	7e7b      	ldrb	r3, [r7, #25]
 8005628:	099b      	lsrs	r3, r3, #6
 800562a:	b2db      	uxtb	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	461a      	mov	r2, r3
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e013      	b.n	8005662 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800563a:	7dbb      	ldrb	r3, [r7, #22]
 800563c:	109b      	asrs	r3, r3, #2
 800563e:	b29b      	uxth	r3, r3
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	3301      	adds	r3, #1
 8005646:	7dfa      	ldrb	r2, [r7, #23]
 8005648:	00d2      	lsls	r2, r2, #3
 800564a:	f002 0218 	and.w	r2, r2, #24
 800564e:	7df9      	ldrb	r1, [r7, #23]
 8005650:	0949      	lsrs	r1, r1, #5
 8005652:	b2c9      	uxtb	r1, r1
 8005654:	440a      	add	r2, r1
 8005656:	3201      	adds	r2, #1
 8005658:	fb02 f303 	mul.w	r3, r2, r3
 800565c:	461a      	mov	r2, r3
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8005668:	e055      	b.n	8005716 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <USER_SPI_ioctl+0x2dc>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	f003 0306 	and.w	r3, r3, #6
 8005672:	2b00      	cmp	r3, #0
 8005674:	d051      	beq.n	800571a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8005676:	f107 020c 	add.w	r2, r7, #12
 800567a:	79fb      	ldrb	r3, [r7, #7]
 800567c:	210b      	movs	r1, #11
 800567e:	4618      	mov	r0, r3
 8005680:	f7ff feee 	bl	8005460 <USER_SPI_ioctl>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d149      	bne.n	800571e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800568a:	7b3b      	ldrb	r3, [r7, #12]
 800568c:	099b      	lsrs	r3, r3, #6
 800568e:	b2db      	uxtb	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <USER_SPI_ioctl+0x23e>
 8005694:	7dbb      	ldrb	r3, [r7, #22]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d041      	beq.n	8005722 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	623b      	str	r3, [r7, #32]
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80056ae:	4b23      	ldr	r3, [pc, #140]	; (800573c <USER_SPI_ioctl+0x2dc>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f003 0308 	and.w	r3, r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80056ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056bc:	025b      	lsls	r3, r3, #9
 80056be:	62bb      	str	r3, [r7, #40]	; 0x28
 80056c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c2:	025b      	lsls	r3, r3, #9
 80056c4:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80056c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056c8:	2020      	movs	r0, #32
 80056ca:	f7ff fc8c 	bl	8004fe6 <send_cmd>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d128      	bne.n	8005726 <USER_SPI_ioctl+0x2c6>
 80056d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056d6:	2021      	movs	r0, #33	; 0x21
 80056d8:	f7ff fc85 	bl	8004fe6 <send_cmd>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d121      	bne.n	8005726 <USER_SPI_ioctl+0x2c6>
 80056e2:	2100      	movs	r1, #0
 80056e4:	2026      	movs	r0, #38	; 0x26
 80056e6:	f7ff fc7e 	bl	8004fe6 <send_cmd>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11a      	bne.n	8005726 <USER_SPI_ioctl+0x2c6>
 80056f0:	f247 5030 	movw	r0, #30000	; 0x7530
 80056f4:	f7ff fbd1 	bl	8004e9a <wait_ready>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d013      	beq.n	8005726 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8005704:	e00f      	b.n	8005726 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8005706:	2304      	movs	r3, #4
 8005708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800570c:	e00c      	b.n	8005728 <USER_SPI_ioctl+0x2c8>
		break;
 800570e:	bf00      	nop
 8005710:	e00a      	b.n	8005728 <USER_SPI_ioctl+0x2c8>
		break;
 8005712:	bf00      	nop
 8005714:	e008      	b.n	8005728 <USER_SPI_ioctl+0x2c8>
		break;
 8005716:	bf00      	nop
 8005718:	e006      	b.n	8005728 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800571a:	bf00      	nop
 800571c:	e004      	b.n	8005728 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800571e:	bf00      	nop
 8005720:	e002      	b.n	8005728 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8005722:	bf00      	nop
 8005724:	e000      	b.n	8005728 <USER_SPI_ioctl+0x2c8>
		break;
 8005726:	bf00      	nop
	}

	despiselect();
 8005728:	f7ff fbda 	bl	8004ee0 <despiselect>

	return res;
 800572c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005730:	4618      	mov	r0, r3
 8005732:	3730      	adds	r7, #48	; 0x30
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20000020 	.word	0x20000020
 800573c:	200000a8 	.word	0x200000a8

08005740 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	4613      	mov	r3, r2
 800574c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800574e:	2301      	movs	r3, #1
 8005750:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005756:	4b1f      	ldr	r3, [pc, #124]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 8005758:	7a5b      	ldrb	r3, [r3, #9]
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d131      	bne.n	80057c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005760:	4b1c      	ldr	r3, [pc, #112]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 8005762:	7a5b      	ldrb	r3, [r3, #9]
 8005764:	b2db      	uxtb	r3, r3
 8005766:	461a      	mov	r2, r3
 8005768:	4b1a      	ldr	r3, [pc, #104]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 800576a:	2100      	movs	r1, #0
 800576c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800576e:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 8005770:	7a5b      	ldrb	r3, [r3, #9]
 8005772:	b2db      	uxtb	r3, r3
 8005774:	4a17      	ldr	r2, [pc, #92]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800577e:	4b15      	ldr	r3, [pc, #84]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 8005780:	7a5b      	ldrb	r3, [r3, #9]
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 8005788:	4413      	add	r3, r2
 800578a:	79fa      	ldrb	r2, [r7, #7]
 800578c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800578e:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 8005790:	7a5b      	ldrb	r3, [r3, #9]
 8005792:	b2db      	uxtb	r3, r3
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	b2d1      	uxtb	r1, r2
 8005798:	4a0e      	ldr	r2, [pc, #56]	; (80057d4 <FATFS_LinkDriverEx+0x94>)
 800579a:	7251      	strb	r1, [r2, #9]
 800579c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800579e:	7dbb      	ldrb	r3, [r7, #22]
 80057a0:	3330      	adds	r3, #48	; 0x30
 80057a2:	b2da      	uxtb	r2, r3
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	3301      	adds	r3, #1
 80057ac:	223a      	movs	r2, #58	; 0x3a
 80057ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	3302      	adds	r3, #2
 80057b4:	222f      	movs	r2, #47	; 0x2f
 80057b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	3303      	adds	r3, #3
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	200000ac 	.word	0x200000ac

080057d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80057e2:	2200      	movs	r2, #0
 80057e4:	6839      	ldr	r1, [r7, #0]
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff ffaa 	bl	8005740 <FATFS_LinkDriverEx>
 80057ec:	4603      	mov	r3, r0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <__errno>:
 80057f8:	4b01      	ldr	r3, [pc, #4]	; (8005800 <__errno+0x8>)
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000024 	.word	0x20000024

08005804 <__libc_init_array>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	4d0d      	ldr	r5, [pc, #52]	; (800583c <__libc_init_array+0x38>)
 8005808:	4c0d      	ldr	r4, [pc, #52]	; (8005840 <__libc_init_array+0x3c>)
 800580a:	1b64      	subs	r4, r4, r5
 800580c:	10a4      	asrs	r4, r4, #2
 800580e:	2600      	movs	r6, #0
 8005810:	42a6      	cmp	r6, r4
 8005812:	d109      	bne.n	8005828 <__libc_init_array+0x24>
 8005814:	4d0b      	ldr	r5, [pc, #44]	; (8005844 <__libc_init_array+0x40>)
 8005816:	4c0c      	ldr	r4, [pc, #48]	; (8005848 <__libc_init_array+0x44>)
 8005818:	f000 fc62 	bl	80060e0 <_init>
 800581c:	1b64      	subs	r4, r4, r5
 800581e:	10a4      	asrs	r4, r4, #2
 8005820:	2600      	movs	r6, #0
 8005822:	42a6      	cmp	r6, r4
 8005824:	d105      	bne.n	8005832 <__libc_init_array+0x2e>
 8005826:	bd70      	pop	{r4, r5, r6, pc}
 8005828:	f855 3b04 	ldr.w	r3, [r5], #4
 800582c:	4798      	blx	r3
 800582e:	3601      	adds	r6, #1
 8005830:	e7ee      	b.n	8005810 <__libc_init_array+0xc>
 8005832:	f855 3b04 	ldr.w	r3, [r5], #4
 8005836:	4798      	blx	r3
 8005838:	3601      	adds	r6, #1
 800583a:	e7f2      	b.n	8005822 <__libc_init_array+0x1e>
 800583c:	08006194 	.word	0x08006194
 8005840:	08006194 	.word	0x08006194
 8005844:	08006194 	.word	0x08006194
 8005848:	08006198 	.word	0x08006198

0800584c <memset>:
 800584c:	4402      	add	r2, r0
 800584e:	4603      	mov	r3, r0
 8005850:	4293      	cmp	r3, r2
 8005852:	d100      	bne.n	8005856 <memset+0xa>
 8005854:	4770      	bx	lr
 8005856:	f803 1b01 	strb.w	r1, [r3], #1
 800585a:	e7f9      	b.n	8005850 <memset+0x4>

0800585c <sniprintf>:
 800585c:	b40c      	push	{r2, r3}
 800585e:	b530      	push	{r4, r5, lr}
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <sniprintf+0x64>)
 8005862:	1e0c      	subs	r4, r1, #0
 8005864:	681d      	ldr	r5, [r3, #0]
 8005866:	b09d      	sub	sp, #116	; 0x74
 8005868:	da08      	bge.n	800587c <sniprintf+0x20>
 800586a:	238b      	movs	r3, #139	; 0x8b
 800586c:	602b      	str	r3, [r5, #0]
 800586e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005872:	b01d      	add	sp, #116	; 0x74
 8005874:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005878:	b002      	add	sp, #8
 800587a:	4770      	bx	lr
 800587c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005880:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005884:	bf14      	ite	ne
 8005886:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800588a:	4623      	moveq	r3, r4
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	9307      	str	r3, [sp, #28]
 8005890:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005894:	9002      	str	r0, [sp, #8]
 8005896:	9006      	str	r0, [sp, #24]
 8005898:	f8ad 3016 	strh.w	r3, [sp, #22]
 800589c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800589e:	ab21      	add	r3, sp, #132	; 0x84
 80058a0:	a902      	add	r1, sp, #8
 80058a2:	4628      	mov	r0, r5
 80058a4:	9301      	str	r3, [sp, #4]
 80058a6:	f000 f869 	bl	800597c <_svfiprintf_r>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	bfbc      	itt	lt
 80058ae:	238b      	movlt	r3, #139	; 0x8b
 80058b0:	602b      	strlt	r3, [r5, #0]
 80058b2:	2c00      	cmp	r4, #0
 80058b4:	d0dd      	beq.n	8005872 <sniprintf+0x16>
 80058b6:	9b02      	ldr	r3, [sp, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	701a      	strb	r2, [r3, #0]
 80058bc:	e7d9      	b.n	8005872 <sniprintf+0x16>
 80058be:	bf00      	nop
 80058c0:	20000024 	.word	0x20000024

080058c4 <__ssputs_r>:
 80058c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058c8:	688e      	ldr	r6, [r1, #8]
 80058ca:	429e      	cmp	r6, r3
 80058cc:	4682      	mov	sl, r0
 80058ce:	460c      	mov	r4, r1
 80058d0:	4690      	mov	r8, r2
 80058d2:	461f      	mov	r7, r3
 80058d4:	d838      	bhi.n	8005948 <__ssputs_r+0x84>
 80058d6:	898a      	ldrh	r2, [r1, #12]
 80058d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058dc:	d032      	beq.n	8005944 <__ssputs_r+0x80>
 80058de:	6825      	ldr	r5, [r4, #0]
 80058e0:	6909      	ldr	r1, [r1, #16]
 80058e2:	eba5 0901 	sub.w	r9, r5, r1
 80058e6:	6965      	ldr	r5, [r4, #20]
 80058e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058f0:	3301      	adds	r3, #1
 80058f2:	444b      	add	r3, r9
 80058f4:	106d      	asrs	r5, r5, #1
 80058f6:	429d      	cmp	r5, r3
 80058f8:	bf38      	it	cc
 80058fa:	461d      	movcc	r5, r3
 80058fc:	0553      	lsls	r3, r2, #21
 80058fe:	d531      	bpl.n	8005964 <__ssputs_r+0xa0>
 8005900:	4629      	mov	r1, r5
 8005902:	f000 fb47 	bl	8005f94 <_malloc_r>
 8005906:	4606      	mov	r6, r0
 8005908:	b950      	cbnz	r0, 8005920 <__ssputs_r+0x5c>
 800590a:	230c      	movs	r3, #12
 800590c:	f8ca 3000 	str.w	r3, [sl]
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005916:	81a3      	strh	r3, [r4, #12]
 8005918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	6921      	ldr	r1, [r4, #16]
 8005922:	464a      	mov	r2, r9
 8005924:	f000 fabe 	bl	8005ea4 <memcpy>
 8005928:	89a3      	ldrh	r3, [r4, #12]
 800592a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	6126      	str	r6, [r4, #16]
 8005936:	6165      	str	r5, [r4, #20]
 8005938:	444e      	add	r6, r9
 800593a:	eba5 0509 	sub.w	r5, r5, r9
 800593e:	6026      	str	r6, [r4, #0]
 8005940:	60a5      	str	r5, [r4, #8]
 8005942:	463e      	mov	r6, r7
 8005944:	42be      	cmp	r6, r7
 8005946:	d900      	bls.n	800594a <__ssputs_r+0x86>
 8005948:	463e      	mov	r6, r7
 800594a:	4632      	mov	r2, r6
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	4641      	mov	r1, r8
 8005950:	f000 fab6 	bl	8005ec0 <memmove>
 8005954:	68a3      	ldr	r3, [r4, #8]
 8005956:	6822      	ldr	r2, [r4, #0]
 8005958:	1b9b      	subs	r3, r3, r6
 800595a:	4432      	add	r2, r6
 800595c:	60a3      	str	r3, [r4, #8]
 800595e:	6022      	str	r2, [r4, #0]
 8005960:	2000      	movs	r0, #0
 8005962:	e7db      	b.n	800591c <__ssputs_r+0x58>
 8005964:	462a      	mov	r2, r5
 8005966:	f000 fb6f 	bl	8006048 <_realloc_r>
 800596a:	4606      	mov	r6, r0
 800596c:	2800      	cmp	r0, #0
 800596e:	d1e1      	bne.n	8005934 <__ssputs_r+0x70>
 8005970:	6921      	ldr	r1, [r4, #16]
 8005972:	4650      	mov	r0, sl
 8005974:	f000 fabe 	bl	8005ef4 <_free_r>
 8005978:	e7c7      	b.n	800590a <__ssputs_r+0x46>
	...

0800597c <_svfiprintf_r>:
 800597c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005980:	4698      	mov	r8, r3
 8005982:	898b      	ldrh	r3, [r1, #12]
 8005984:	061b      	lsls	r3, r3, #24
 8005986:	b09d      	sub	sp, #116	; 0x74
 8005988:	4607      	mov	r7, r0
 800598a:	460d      	mov	r5, r1
 800598c:	4614      	mov	r4, r2
 800598e:	d50e      	bpl.n	80059ae <_svfiprintf_r+0x32>
 8005990:	690b      	ldr	r3, [r1, #16]
 8005992:	b963      	cbnz	r3, 80059ae <_svfiprintf_r+0x32>
 8005994:	2140      	movs	r1, #64	; 0x40
 8005996:	f000 fafd 	bl	8005f94 <_malloc_r>
 800599a:	6028      	str	r0, [r5, #0]
 800599c:	6128      	str	r0, [r5, #16]
 800599e:	b920      	cbnz	r0, 80059aa <_svfiprintf_r+0x2e>
 80059a0:	230c      	movs	r3, #12
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059a8:	e0d1      	b.n	8005b4e <_svfiprintf_r+0x1d2>
 80059aa:	2340      	movs	r3, #64	; 0x40
 80059ac:	616b      	str	r3, [r5, #20]
 80059ae:	2300      	movs	r3, #0
 80059b0:	9309      	str	r3, [sp, #36]	; 0x24
 80059b2:	2320      	movs	r3, #32
 80059b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80059bc:	2330      	movs	r3, #48	; 0x30
 80059be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b68 <_svfiprintf_r+0x1ec>
 80059c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059c6:	f04f 0901 	mov.w	r9, #1
 80059ca:	4623      	mov	r3, r4
 80059cc:	469a      	mov	sl, r3
 80059ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059d2:	b10a      	cbz	r2, 80059d8 <_svfiprintf_r+0x5c>
 80059d4:	2a25      	cmp	r2, #37	; 0x25
 80059d6:	d1f9      	bne.n	80059cc <_svfiprintf_r+0x50>
 80059d8:	ebba 0b04 	subs.w	fp, sl, r4
 80059dc:	d00b      	beq.n	80059f6 <_svfiprintf_r+0x7a>
 80059de:	465b      	mov	r3, fp
 80059e0:	4622      	mov	r2, r4
 80059e2:	4629      	mov	r1, r5
 80059e4:	4638      	mov	r0, r7
 80059e6:	f7ff ff6d 	bl	80058c4 <__ssputs_r>
 80059ea:	3001      	adds	r0, #1
 80059ec:	f000 80aa 	beq.w	8005b44 <_svfiprintf_r+0x1c8>
 80059f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059f2:	445a      	add	r2, fp
 80059f4:	9209      	str	r2, [sp, #36]	; 0x24
 80059f6:	f89a 3000 	ldrb.w	r3, [sl]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	f000 80a2 	beq.w	8005b44 <_svfiprintf_r+0x1c8>
 8005a00:	2300      	movs	r3, #0
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a0a:	f10a 0a01 	add.w	sl, sl, #1
 8005a0e:	9304      	str	r3, [sp, #16]
 8005a10:	9307      	str	r3, [sp, #28]
 8005a12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a16:	931a      	str	r3, [sp, #104]	; 0x68
 8005a18:	4654      	mov	r4, sl
 8005a1a:	2205      	movs	r2, #5
 8005a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a20:	4851      	ldr	r0, [pc, #324]	; (8005b68 <_svfiprintf_r+0x1ec>)
 8005a22:	f7fa fbd5 	bl	80001d0 <memchr>
 8005a26:	9a04      	ldr	r2, [sp, #16]
 8005a28:	b9d8      	cbnz	r0, 8005a62 <_svfiprintf_r+0xe6>
 8005a2a:	06d0      	lsls	r0, r2, #27
 8005a2c:	bf44      	itt	mi
 8005a2e:	2320      	movmi	r3, #32
 8005a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a34:	0711      	lsls	r1, r2, #28
 8005a36:	bf44      	itt	mi
 8005a38:	232b      	movmi	r3, #43	; 0x2b
 8005a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a42:	2b2a      	cmp	r3, #42	; 0x2a
 8005a44:	d015      	beq.n	8005a72 <_svfiprintf_r+0xf6>
 8005a46:	9a07      	ldr	r2, [sp, #28]
 8005a48:	4654      	mov	r4, sl
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	f04f 0c0a 	mov.w	ip, #10
 8005a50:	4621      	mov	r1, r4
 8005a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a56:	3b30      	subs	r3, #48	; 0x30
 8005a58:	2b09      	cmp	r3, #9
 8005a5a:	d94e      	bls.n	8005afa <_svfiprintf_r+0x17e>
 8005a5c:	b1b0      	cbz	r0, 8005a8c <_svfiprintf_r+0x110>
 8005a5e:	9207      	str	r2, [sp, #28]
 8005a60:	e014      	b.n	8005a8c <_svfiprintf_r+0x110>
 8005a62:	eba0 0308 	sub.w	r3, r0, r8
 8005a66:	fa09 f303 	lsl.w	r3, r9, r3
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	9304      	str	r3, [sp, #16]
 8005a6e:	46a2      	mov	sl, r4
 8005a70:	e7d2      	b.n	8005a18 <_svfiprintf_r+0x9c>
 8005a72:	9b03      	ldr	r3, [sp, #12]
 8005a74:	1d19      	adds	r1, r3, #4
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	9103      	str	r1, [sp, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	bfbb      	ittet	lt
 8005a7e:	425b      	neglt	r3, r3
 8005a80:	f042 0202 	orrlt.w	r2, r2, #2
 8005a84:	9307      	strge	r3, [sp, #28]
 8005a86:	9307      	strlt	r3, [sp, #28]
 8005a88:	bfb8      	it	lt
 8005a8a:	9204      	strlt	r2, [sp, #16]
 8005a8c:	7823      	ldrb	r3, [r4, #0]
 8005a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a90:	d10c      	bne.n	8005aac <_svfiprintf_r+0x130>
 8005a92:	7863      	ldrb	r3, [r4, #1]
 8005a94:	2b2a      	cmp	r3, #42	; 0x2a
 8005a96:	d135      	bne.n	8005b04 <_svfiprintf_r+0x188>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	1d1a      	adds	r2, r3, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	9203      	str	r2, [sp, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bfb8      	it	lt
 8005aa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005aa8:	3402      	adds	r4, #2
 8005aaa:	9305      	str	r3, [sp, #20]
 8005aac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b78 <_svfiprintf_r+0x1fc>
 8005ab0:	7821      	ldrb	r1, [r4, #0]
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	4650      	mov	r0, sl
 8005ab6:	f7fa fb8b 	bl	80001d0 <memchr>
 8005aba:	b140      	cbz	r0, 8005ace <_svfiprintf_r+0x152>
 8005abc:	2340      	movs	r3, #64	; 0x40
 8005abe:	eba0 000a 	sub.w	r0, r0, sl
 8005ac2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ac6:	9b04      	ldr	r3, [sp, #16]
 8005ac8:	4303      	orrs	r3, r0
 8005aca:	3401      	adds	r4, #1
 8005acc:	9304      	str	r3, [sp, #16]
 8005ace:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ad2:	4826      	ldr	r0, [pc, #152]	; (8005b6c <_svfiprintf_r+0x1f0>)
 8005ad4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ad8:	2206      	movs	r2, #6
 8005ada:	f7fa fb79 	bl	80001d0 <memchr>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d038      	beq.n	8005b54 <_svfiprintf_r+0x1d8>
 8005ae2:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <_svfiprintf_r+0x1f4>)
 8005ae4:	bb1b      	cbnz	r3, 8005b2e <_svfiprintf_r+0x1b2>
 8005ae6:	9b03      	ldr	r3, [sp, #12]
 8005ae8:	3307      	adds	r3, #7
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	3308      	adds	r3, #8
 8005af0:	9303      	str	r3, [sp, #12]
 8005af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005af4:	4433      	add	r3, r6
 8005af6:	9309      	str	r3, [sp, #36]	; 0x24
 8005af8:	e767      	b.n	80059ca <_svfiprintf_r+0x4e>
 8005afa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005afe:	460c      	mov	r4, r1
 8005b00:	2001      	movs	r0, #1
 8005b02:	e7a5      	b.n	8005a50 <_svfiprintf_r+0xd4>
 8005b04:	2300      	movs	r3, #0
 8005b06:	3401      	adds	r4, #1
 8005b08:	9305      	str	r3, [sp, #20]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	f04f 0c0a 	mov.w	ip, #10
 8005b10:	4620      	mov	r0, r4
 8005b12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b16:	3a30      	subs	r2, #48	; 0x30
 8005b18:	2a09      	cmp	r2, #9
 8005b1a:	d903      	bls.n	8005b24 <_svfiprintf_r+0x1a8>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0c5      	beq.n	8005aac <_svfiprintf_r+0x130>
 8005b20:	9105      	str	r1, [sp, #20]
 8005b22:	e7c3      	b.n	8005aac <_svfiprintf_r+0x130>
 8005b24:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b28:	4604      	mov	r4, r0
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e7f0      	b.n	8005b10 <_svfiprintf_r+0x194>
 8005b2e:	ab03      	add	r3, sp, #12
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	462a      	mov	r2, r5
 8005b34:	4b0f      	ldr	r3, [pc, #60]	; (8005b74 <_svfiprintf_r+0x1f8>)
 8005b36:	a904      	add	r1, sp, #16
 8005b38:	4638      	mov	r0, r7
 8005b3a:	f3af 8000 	nop.w
 8005b3e:	1c42      	adds	r2, r0, #1
 8005b40:	4606      	mov	r6, r0
 8005b42:	d1d6      	bne.n	8005af2 <_svfiprintf_r+0x176>
 8005b44:	89ab      	ldrh	r3, [r5, #12]
 8005b46:	065b      	lsls	r3, r3, #25
 8005b48:	f53f af2c 	bmi.w	80059a4 <_svfiprintf_r+0x28>
 8005b4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b4e:	b01d      	add	sp, #116	; 0x74
 8005b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b54:	ab03      	add	r3, sp, #12
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	462a      	mov	r2, r5
 8005b5a:	4b06      	ldr	r3, [pc, #24]	; (8005b74 <_svfiprintf_r+0x1f8>)
 8005b5c:	a904      	add	r1, sp, #16
 8005b5e:	4638      	mov	r0, r7
 8005b60:	f000 f87a 	bl	8005c58 <_printf_i>
 8005b64:	e7eb      	b.n	8005b3e <_svfiprintf_r+0x1c2>
 8005b66:	bf00      	nop
 8005b68:	08006158 	.word	0x08006158
 8005b6c:	08006162 	.word	0x08006162
 8005b70:	00000000 	.word	0x00000000
 8005b74:	080058c5 	.word	0x080058c5
 8005b78:	0800615e 	.word	0x0800615e

08005b7c <_printf_common>:
 8005b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b80:	4616      	mov	r6, r2
 8005b82:	4699      	mov	r9, r3
 8005b84:	688a      	ldr	r2, [r1, #8]
 8005b86:	690b      	ldr	r3, [r1, #16]
 8005b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	bfb8      	it	lt
 8005b90:	4613      	movlt	r3, r2
 8005b92:	6033      	str	r3, [r6, #0]
 8005b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b98:	4607      	mov	r7, r0
 8005b9a:	460c      	mov	r4, r1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_printf_common+0x26>
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	6033      	str	r3, [r6, #0]
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	0699      	lsls	r1, r3, #26
 8005ba6:	bf42      	ittt	mi
 8005ba8:	6833      	ldrmi	r3, [r6, #0]
 8005baa:	3302      	addmi	r3, #2
 8005bac:	6033      	strmi	r3, [r6, #0]
 8005bae:	6825      	ldr	r5, [r4, #0]
 8005bb0:	f015 0506 	ands.w	r5, r5, #6
 8005bb4:	d106      	bne.n	8005bc4 <_printf_common+0x48>
 8005bb6:	f104 0a19 	add.w	sl, r4, #25
 8005bba:	68e3      	ldr	r3, [r4, #12]
 8005bbc:	6832      	ldr	r2, [r6, #0]
 8005bbe:	1a9b      	subs	r3, r3, r2
 8005bc0:	42ab      	cmp	r3, r5
 8005bc2:	dc26      	bgt.n	8005c12 <_printf_common+0x96>
 8005bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005bc8:	1e13      	subs	r3, r2, #0
 8005bca:	6822      	ldr	r2, [r4, #0]
 8005bcc:	bf18      	it	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	0692      	lsls	r2, r2, #26
 8005bd2:	d42b      	bmi.n	8005c2c <_printf_common+0xb0>
 8005bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bd8:	4649      	mov	r1, r9
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c0      	blx	r8
 8005bde:	3001      	adds	r0, #1
 8005be0:	d01e      	beq.n	8005c20 <_printf_common+0xa4>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	68e5      	ldr	r5, [r4, #12]
 8005be6:	6832      	ldr	r2, [r6, #0]
 8005be8:	f003 0306 	and.w	r3, r3, #6
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	bf08      	it	eq
 8005bf0:	1aad      	subeq	r5, r5, r2
 8005bf2:	68a3      	ldr	r3, [r4, #8]
 8005bf4:	6922      	ldr	r2, [r4, #16]
 8005bf6:	bf0c      	ite	eq
 8005bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005bfc:	2500      	movne	r5, #0
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	bfc4      	itt	gt
 8005c02:	1a9b      	subgt	r3, r3, r2
 8005c04:	18ed      	addgt	r5, r5, r3
 8005c06:	2600      	movs	r6, #0
 8005c08:	341a      	adds	r4, #26
 8005c0a:	42b5      	cmp	r5, r6
 8005c0c:	d11a      	bne.n	8005c44 <_printf_common+0xc8>
 8005c0e:	2000      	movs	r0, #0
 8005c10:	e008      	b.n	8005c24 <_printf_common+0xa8>
 8005c12:	2301      	movs	r3, #1
 8005c14:	4652      	mov	r2, sl
 8005c16:	4649      	mov	r1, r9
 8005c18:	4638      	mov	r0, r7
 8005c1a:	47c0      	blx	r8
 8005c1c:	3001      	adds	r0, #1
 8005c1e:	d103      	bne.n	8005c28 <_printf_common+0xac>
 8005c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c28:	3501      	adds	r5, #1
 8005c2a:	e7c6      	b.n	8005bba <_printf_common+0x3e>
 8005c2c:	18e1      	adds	r1, r4, r3
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	2030      	movs	r0, #48	; 0x30
 8005c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c36:	4422      	add	r2, r4
 8005c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c40:	3302      	adds	r3, #2
 8005c42:	e7c7      	b.n	8005bd4 <_printf_common+0x58>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4622      	mov	r2, r4
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4638      	mov	r0, r7
 8005c4c:	47c0      	blx	r8
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d0e6      	beq.n	8005c20 <_printf_common+0xa4>
 8005c52:	3601      	adds	r6, #1
 8005c54:	e7d9      	b.n	8005c0a <_printf_common+0x8e>
	...

08005c58 <_printf_i>:
 8005c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	4691      	mov	r9, r2
 8005c60:	7e27      	ldrb	r7, [r4, #24]
 8005c62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005c64:	2f78      	cmp	r7, #120	; 0x78
 8005c66:	4680      	mov	r8, r0
 8005c68:	469a      	mov	sl, r3
 8005c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c6e:	d807      	bhi.n	8005c80 <_printf_i+0x28>
 8005c70:	2f62      	cmp	r7, #98	; 0x62
 8005c72:	d80a      	bhi.n	8005c8a <_printf_i+0x32>
 8005c74:	2f00      	cmp	r7, #0
 8005c76:	f000 80d8 	beq.w	8005e2a <_printf_i+0x1d2>
 8005c7a:	2f58      	cmp	r7, #88	; 0x58
 8005c7c:	f000 80a3 	beq.w	8005dc6 <_printf_i+0x16e>
 8005c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c88:	e03a      	b.n	8005d00 <_printf_i+0xa8>
 8005c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c8e:	2b15      	cmp	r3, #21
 8005c90:	d8f6      	bhi.n	8005c80 <_printf_i+0x28>
 8005c92:	a001      	add	r0, pc, #4	; (adr r0, 8005c98 <_printf_i+0x40>)
 8005c94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005c98:	08005cf1 	.word	0x08005cf1
 8005c9c:	08005d05 	.word	0x08005d05
 8005ca0:	08005c81 	.word	0x08005c81
 8005ca4:	08005c81 	.word	0x08005c81
 8005ca8:	08005c81 	.word	0x08005c81
 8005cac:	08005c81 	.word	0x08005c81
 8005cb0:	08005d05 	.word	0x08005d05
 8005cb4:	08005c81 	.word	0x08005c81
 8005cb8:	08005c81 	.word	0x08005c81
 8005cbc:	08005c81 	.word	0x08005c81
 8005cc0:	08005c81 	.word	0x08005c81
 8005cc4:	08005e11 	.word	0x08005e11
 8005cc8:	08005d35 	.word	0x08005d35
 8005ccc:	08005df3 	.word	0x08005df3
 8005cd0:	08005c81 	.word	0x08005c81
 8005cd4:	08005c81 	.word	0x08005c81
 8005cd8:	08005e33 	.word	0x08005e33
 8005cdc:	08005c81 	.word	0x08005c81
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005c81 	.word	0x08005c81
 8005ce8:	08005c81 	.word	0x08005c81
 8005cec:	08005dfb 	.word	0x08005dfb
 8005cf0:	680b      	ldr	r3, [r1, #0]
 8005cf2:	1d1a      	adds	r2, r3, #4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	600a      	str	r2, [r1, #0]
 8005cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0a3      	b.n	8005e4c <_printf_i+0x1f4>
 8005d04:	6825      	ldr	r5, [r4, #0]
 8005d06:	6808      	ldr	r0, [r1, #0]
 8005d08:	062e      	lsls	r6, r5, #24
 8005d0a:	f100 0304 	add.w	r3, r0, #4
 8005d0e:	d50a      	bpl.n	8005d26 <_printf_i+0xce>
 8005d10:	6805      	ldr	r5, [r0, #0]
 8005d12:	600b      	str	r3, [r1, #0]
 8005d14:	2d00      	cmp	r5, #0
 8005d16:	da03      	bge.n	8005d20 <_printf_i+0xc8>
 8005d18:	232d      	movs	r3, #45	; 0x2d
 8005d1a:	426d      	negs	r5, r5
 8005d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d20:	485e      	ldr	r0, [pc, #376]	; (8005e9c <_printf_i+0x244>)
 8005d22:	230a      	movs	r3, #10
 8005d24:	e019      	b.n	8005d5a <_printf_i+0x102>
 8005d26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005d2a:	6805      	ldr	r5, [r0, #0]
 8005d2c:	600b      	str	r3, [r1, #0]
 8005d2e:	bf18      	it	ne
 8005d30:	b22d      	sxthne	r5, r5
 8005d32:	e7ef      	b.n	8005d14 <_printf_i+0xbc>
 8005d34:	680b      	ldr	r3, [r1, #0]
 8005d36:	6825      	ldr	r5, [r4, #0]
 8005d38:	1d18      	adds	r0, r3, #4
 8005d3a:	6008      	str	r0, [r1, #0]
 8005d3c:	0628      	lsls	r0, r5, #24
 8005d3e:	d501      	bpl.n	8005d44 <_printf_i+0xec>
 8005d40:	681d      	ldr	r5, [r3, #0]
 8005d42:	e002      	b.n	8005d4a <_printf_i+0xf2>
 8005d44:	0669      	lsls	r1, r5, #25
 8005d46:	d5fb      	bpl.n	8005d40 <_printf_i+0xe8>
 8005d48:	881d      	ldrh	r5, [r3, #0]
 8005d4a:	4854      	ldr	r0, [pc, #336]	; (8005e9c <_printf_i+0x244>)
 8005d4c:	2f6f      	cmp	r7, #111	; 0x6f
 8005d4e:	bf0c      	ite	eq
 8005d50:	2308      	moveq	r3, #8
 8005d52:	230a      	movne	r3, #10
 8005d54:	2100      	movs	r1, #0
 8005d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d5a:	6866      	ldr	r6, [r4, #4]
 8005d5c:	60a6      	str	r6, [r4, #8]
 8005d5e:	2e00      	cmp	r6, #0
 8005d60:	bfa2      	ittt	ge
 8005d62:	6821      	ldrge	r1, [r4, #0]
 8005d64:	f021 0104 	bicge.w	r1, r1, #4
 8005d68:	6021      	strge	r1, [r4, #0]
 8005d6a:	b90d      	cbnz	r5, 8005d70 <_printf_i+0x118>
 8005d6c:	2e00      	cmp	r6, #0
 8005d6e:	d04d      	beq.n	8005e0c <_printf_i+0x1b4>
 8005d70:	4616      	mov	r6, r2
 8005d72:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d76:	fb03 5711 	mls	r7, r3, r1, r5
 8005d7a:	5dc7      	ldrb	r7, [r0, r7]
 8005d7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005d80:	462f      	mov	r7, r5
 8005d82:	42bb      	cmp	r3, r7
 8005d84:	460d      	mov	r5, r1
 8005d86:	d9f4      	bls.n	8005d72 <_printf_i+0x11a>
 8005d88:	2b08      	cmp	r3, #8
 8005d8a:	d10b      	bne.n	8005da4 <_printf_i+0x14c>
 8005d8c:	6823      	ldr	r3, [r4, #0]
 8005d8e:	07df      	lsls	r7, r3, #31
 8005d90:	d508      	bpl.n	8005da4 <_printf_i+0x14c>
 8005d92:	6923      	ldr	r3, [r4, #16]
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	4299      	cmp	r1, r3
 8005d98:	bfde      	ittt	le
 8005d9a:	2330      	movle	r3, #48	; 0x30
 8005d9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005da0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8005da4:	1b92      	subs	r2, r2, r6
 8005da6:	6122      	str	r2, [r4, #16]
 8005da8:	f8cd a000 	str.w	sl, [sp]
 8005dac:	464b      	mov	r3, r9
 8005dae:	aa03      	add	r2, sp, #12
 8005db0:	4621      	mov	r1, r4
 8005db2:	4640      	mov	r0, r8
 8005db4:	f7ff fee2 	bl	8005b7c <_printf_common>
 8005db8:	3001      	adds	r0, #1
 8005dba:	d14c      	bne.n	8005e56 <_printf_i+0x1fe>
 8005dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dc0:	b004      	add	sp, #16
 8005dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dc6:	4835      	ldr	r0, [pc, #212]	; (8005e9c <_printf_i+0x244>)
 8005dc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005dcc:	6823      	ldr	r3, [r4, #0]
 8005dce:	680e      	ldr	r6, [r1, #0]
 8005dd0:	061f      	lsls	r7, r3, #24
 8005dd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8005dd6:	600e      	str	r6, [r1, #0]
 8005dd8:	d514      	bpl.n	8005e04 <_printf_i+0x1ac>
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	bf44      	itt	mi
 8005dde:	f043 0320 	orrmi.w	r3, r3, #32
 8005de2:	6023      	strmi	r3, [r4, #0]
 8005de4:	b91d      	cbnz	r5, 8005dee <_printf_i+0x196>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	f023 0320 	bic.w	r3, r3, #32
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	2310      	movs	r3, #16
 8005df0:	e7b0      	b.n	8005d54 <_printf_i+0xfc>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	f043 0320 	orr.w	r3, r3, #32
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	2378      	movs	r3, #120	; 0x78
 8005dfc:	4828      	ldr	r0, [pc, #160]	; (8005ea0 <_printf_i+0x248>)
 8005dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e02:	e7e3      	b.n	8005dcc <_printf_i+0x174>
 8005e04:	065e      	lsls	r6, r3, #25
 8005e06:	bf48      	it	mi
 8005e08:	b2ad      	uxthmi	r5, r5
 8005e0a:	e7e6      	b.n	8005dda <_printf_i+0x182>
 8005e0c:	4616      	mov	r6, r2
 8005e0e:	e7bb      	b.n	8005d88 <_printf_i+0x130>
 8005e10:	680b      	ldr	r3, [r1, #0]
 8005e12:	6826      	ldr	r6, [r4, #0]
 8005e14:	6960      	ldr	r0, [r4, #20]
 8005e16:	1d1d      	adds	r5, r3, #4
 8005e18:	600d      	str	r5, [r1, #0]
 8005e1a:	0635      	lsls	r5, r6, #24
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	d501      	bpl.n	8005e24 <_printf_i+0x1cc>
 8005e20:	6018      	str	r0, [r3, #0]
 8005e22:	e002      	b.n	8005e2a <_printf_i+0x1d2>
 8005e24:	0671      	lsls	r1, r6, #25
 8005e26:	d5fb      	bpl.n	8005e20 <_printf_i+0x1c8>
 8005e28:	8018      	strh	r0, [r3, #0]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	6123      	str	r3, [r4, #16]
 8005e2e:	4616      	mov	r6, r2
 8005e30:	e7ba      	b.n	8005da8 <_printf_i+0x150>
 8005e32:	680b      	ldr	r3, [r1, #0]
 8005e34:	1d1a      	adds	r2, r3, #4
 8005e36:	600a      	str	r2, [r1, #0]
 8005e38:	681e      	ldr	r6, [r3, #0]
 8005e3a:	6862      	ldr	r2, [r4, #4]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4630      	mov	r0, r6
 8005e40:	f7fa f9c6 	bl	80001d0 <memchr>
 8005e44:	b108      	cbz	r0, 8005e4a <_printf_i+0x1f2>
 8005e46:	1b80      	subs	r0, r0, r6
 8005e48:	6060      	str	r0, [r4, #4]
 8005e4a:	6863      	ldr	r3, [r4, #4]
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e54:	e7a8      	b.n	8005da8 <_printf_i+0x150>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	4632      	mov	r2, r6
 8005e5a:	4649      	mov	r1, r9
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	47d0      	blx	sl
 8005e60:	3001      	adds	r0, #1
 8005e62:	d0ab      	beq.n	8005dbc <_printf_i+0x164>
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	079b      	lsls	r3, r3, #30
 8005e68:	d413      	bmi.n	8005e92 <_printf_i+0x23a>
 8005e6a:	68e0      	ldr	r0, [r4, #12]
 8005e6c:	9b03      	ldr	r3, [sp, #12]
 8005e6e:	4298      	cmp	r0, r3
 8005e70:	bfb8      	it	lt
 8005e72:	4618      	movlt	r0, r3
 8005e74:	e7a4      	b.n	8005dc0 <_printf_i+0x168>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4632      	mov	r2, r6
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	47d0      	blx	sl
 8005e80:	3001      	adds	r0, #1
 8005e82:	d09b      	beq.n	8005dbc <_printf_i+0x164>
 8005e84:	3501      	adds	r5, #1
 8005e86:	68e3      	ldr	r3, [r4, #12]
 8005e88:	9903      	ldr	r1, [sp, #12]
 8005e8a:	1a5b      	subs	r3, r3, r1
 8005e8c:	42ab      	cmp	r3, r5
 8005e8e:	dcf2      	bgt.n	8005e76 <_printf_i+0x21e>
 8005e90:	e7eb      	b.n	8005e6a <_printf_i+0x212>
 8005e92:	2500      	movs	r5, #0
 8005e94:	f104 0619 	add.w	r6, r4, #25
 8005e98:	e7f5      	b.n	8005e86 <_printf_i+0x22e>
 8005e9a:	bf00      	nop
 8005e9c:	08006169 	.word	0x08006169
 8005ea0:	0800617a 	.word	0x0800617a

08005ea4 <memcpy>:
 8005ea4:	440a      	add	r2, r1
 8005ea6:	4291      	cmp	r1, r2
 8005ea8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005eac:	d100      	bne.n	8005eb0 <memcpy+0xc>
 8005eae:	4770      	bx	lr
 8005eb0:	b510      	push	{r4, lr}
 8005eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eba:	4291      	cmp	r1, r2
 8005ebc:	d1f9      	bne.n	8005eb2 <memcpy+0xe>
 8005ebe:	bd10      	pop	{r4, pc}

08005ec0 <memmove>:
 8005ec0:	4288      	cmp	r0, r1
 8005ec2:	b510      	push	{r4, lr}
 8005ec4:	eb01 0402 	add.w	r4, r1, r2
 8005ec8:	d902      	bls.n	8005ed0 <memmove+0x10>
 8005eca:	4284      	cmp	r4, r0
 8005ecc:	4623      	mov	r3, r4
 8005ece:	d807      	bhi.n	8005ee0 <memmove+0x20>
 8005ed0:	1e43      	subs	r3, r0, #1
 8005ed2:	42a1      	cmp	r1, r4
 8005ed4:	d008      	beq.n	8005ee8 <memmove+0x28>
 8005ed6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005eda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005ede:	e7f8      	b.n	8005ed2 <memmove+0x12>
 8005ee0:	4402      	add	r2, r0
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	428a      	cmp	r2, r1
 8005ee6:	d100      	bne.n	8005eea <memmove+0x2a>
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005ef2:	e7f7      	b.n	8005ee4 <memmove+0x24>

08005ef4 <_free_r>:
 8005ef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ef6:	2900      	cmp	r1, #0
 8005ef8:	d048      	beq.n	8005f8c <_free_r+0x98>
 8005efa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005efe:	9001      	str	r0, [sp, #4]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f1a1 0404 	sub.w	r4, r1, #4
 8005f06:	bfb8      	it	lt
 8005f08:	18e4      	addlt	r4, r4, r3
 8005f0a:	f000 f8d3 	bl	80060b4 <__malloc_lock>
 8005f0e:	4a20      	ldr	r2, [pc, #128]	; (8005f90 <_free_r+0x9c>)
 8005f10:	9801      	ldr	r0, [sp, #4]
 8005f12:	6813      	ldr	r3, [r2, #0]
 8005f14:	4615      	mov	r5, r2
 8005f16:	b933      	cbnz	r3, 8005f26 <_free_r+0x32>
 8005f18:	6063      	str	r3, [r4, #4]
 8005f1a:	6014      	str	r4, [r2, #0]
 8005f1c:	b003      	add	sp, #12
 8005f1e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f22:	f000 b8cd 	b.w	80060c0 <__malloc_unlock>
 8005f26:	42a3      	cmp	r3, r4
 8005f28:	d90b      	bls.n	8005f42 <_free_r+0x4e>
 8005f2a:	6821      	ldr	r1, [r4, #0]
 8005f2c:	1862      	adds	r2, r4, r1
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	bf04      	itt	eq
 8005f32:	681a      	ldreq	r2, [r3, #0]
 8005f34:	685b      	ldreq	r3, [r3, #4]
 8005f36:	6063      	str	r3, [r4, #4]
 8005f38:	bf04      	itt	eq
 8005f3a:	1852      	addeq	r2, r2, r1
 8005f3c:	6022      	streq	r2, [r4, #0]
 8005f3e:	602c      	str	r4, [r5, #0]
 8005f40:	e7ec      	b.n	8005f1c <_free_r+0x28>
 8005f42:	461a      	mov	r2, r3
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	b10b      	cbz	r3, 8005f4c <_free_r+0x58>
 8005f48:	42a3      	cmp	r3, r4
 8005f4a:	d9fa      	bls.n	8005f42 <_free_r+0x4e>
 8005f4c:	6811      	ldr	r1, [r2, #0]
 8005f4e:	1855      	adds	r5, r2, r1
 8005f50:	42a5      	cmp	r5, r4
 8005f52:	d10b      	bne.n	8005f6c <_free_r+0x78>
 8005f54:	6824      	ldr	r4, [r4, #0]
 8005f56:	4421      	add	r1, r4
 8005f58:	1854      	adds	r4, r2, r1
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	6011      	str	r1, [r2, #0]
 8005f5e:	d1dd      	bne.n	8005f1c <_free_r+0x28>
 8005f60:	681c      	ldr	r4, [r3, #0]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	6053      	str	r3, [r2, #4]
 8005f66:	4421      	add	r1, r4
 8005f68:	6011      	str	r1, [r2, #0]
 8005f6a:	e7d7      	b.n	8005f1c <_free_r+0x28>
 8005f6c:	d902      	bls.n	8005f74 <_free_r+0x80>
 8005f6e:	230c      	movs	r3, #12
 8005f70:	6003      	str	r3, [r0, #0]
 8005f72:	e7d3      	b.n	8005f1c <_free_r+0x28>
 8005f74:	6825      	ldr	r5, [r4, #0]
 8005f76:	1961      	adds	r1, r4, r5
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	bf04      	itt	eq
 8005f7c:	6819      	ldreq	r1, [r3, #0]
 8005f7e:	685b      	ldreq	r3, [r3, #4]
 8005f80:	6063      	str	r3, [r4, #4]
 8005f82:	bf04      	itt	eq
 8005f84:	1949      	addeq	r1, r1, r5
 8005f86:	6021      	streq	r1, [r4, #0]
 8005f88:	6054      	str	r4, [r2, #4]
 8005f8a:	e7c7      	b.n	8005f1c <_free_r+0x28>
 8005f8c:	b003      	add	sp, #12
 8005f8e:	bd30      	pop	{r4, r5, pc}
 8005f90:	200000b8 	.word	0x200000b8

08005f94 <_malloc_r>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	1ccd      	adds	r5, r1, #3
 8005f98:	f025 0503 	bic.w	r5, r5, #3
 8005f9c:	3508      	adds	r5, #8
 8005f9e:	2d0c      	cmp	r5, #12
 8005fa0:	bf38      	it	cc
 8005fa2:	250c      	movcc	r5, #12
 8005fa4:	2d00      	cmp	r5, #0
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	db01      	blt.n	8005fae <_malloc_r+0x1a>
 8005faa:	42a9      	cmp	r1, r5
 8005fac:	d903      	bls.n	8005fb6 <_malloc_r+0x22>
 8005fae:	230c      	movs	r3, #12
 8005fb0:	6033      	str	r3, [r6, #0]
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb6:	f000 f87d 	bl	80060b4 <__malloc_lock>
 8005fba:	4921      	ldr	r1, [pc, #132]	; (8006040 <_malloc_r+0xac>)
 8005fbc:	680a      	ldr	r2, [r1, #0]
 8005fbe:	4614      	mov	r4, r2
 8005fc0:	b99c      	cbnz	r4, 8005fea <_malloc_r+0x56>
 8005fc2:	4f20      	ldr	r7, [pc, #128]	; (8006044 <_malloc_r+0xb0>)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	b923      	cbnz	r3, 8005fd2 <_malloc_r+0x3e>
 8005fc8:	4621      	mov	r1, r4
 8005fca:	4630      	mov	r0, r6
 8005fcc:	f000 f862 	bl	8006094 <_sbrk_r>
 8005fd0:	6038      	str	r0, [r7, #0]
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f000 f85d 	bl	8006094 <_sbrk_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d123      	bne.n	8006026 <_malloc_r+0x92>
 8005fde:	230c      	movs	r3, #12
 8005fe0:	6033      	str	r3, [r6, #0]
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f000 f86c 	bl	80060c0 <__malloc_unlock>
 8005fe8:	e7e3      	b.n	8005fb2 <_malloc_r+0x1e>
 8005fea:	6823      	ldr	r3, [r4, #0]
 8005fec:	1b5b      	subs	r3, r3, r5
 8005fee:	d417      	bmi.n	8006020 <_malloc_r+0x8c>
 8005ff0:	2b0b      	cmp	r3, #11
 8005ff2:	d903      	bls.n	8005ffc <_malloc_r+0x68>
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	441c      	add	r4, r3
 8005ff8:	6025      	str	r5, [r4, #0]
 8005ffa:	e004      	b.n	8006006 <_malloc_r+0x72>
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	42a2      	cmp	r2, r4
 8006000:	bf0c      	ite	eq
 8006002:	600b      	streq	r3, [r1, #0]
 8006004:	6053      	strne	r3, [r2, #4]
 8006006:	4630      	mov	r0, r6
 8006008:	f000 f85a 	bl	80060c0 <__malloc_unlock>
 800600c:	f104 000b 	add.w	r0, r4, #11
 8006010:	1d23      	adds	r3, r4, #4
 8006012:	f020 0007 	bic.w	r0, r0, #7
 8006016:	1ac2      	subs	r2, r0, r3
 8006018:	d0cc      	beq.n	8005fb4 <_malloc_r+0x20>
 800601a:	1a1b      	subs	r3, r3, r0
 800601c:	50a3      	str	r3, [r4, r2]
 800601e:	e7c9      	b.n	8005fb4 <_malloc_r+0x20>
 8006020:	4622      	mov	r2, r4
 8006022:	6864      	ldr	r4, [r4, #4]
 8006024:	e7cc      	b.n	8005fc0 <_malloc_r+0x2c>
 8006026:	1cc4      	adds	r4, r0, #3
 8006028:	f024 0403 	bic.w	r4, r4, #3
 800602c:	42a0      	cmp	r0, r4
 800602e:	d0e3      	beq.n	8005ff8 <_malloc_r+0x64>
 8006030:	1a21      	subs	r1, r4, r0
 8006032:	4630      	mov	r0, r6
 8006034:	f000 f82e 	bl	8006094 <_sbrk_r>
 8006038:	3001      	adds	r0, #1
 800603a:	d1dd      	bne.n	8005ff8 <_malloc_r+0x64>
 800603c:	e7cf      	b.n	8005fde <_malloc_r+0x4a>
 800603e:	bf00      	nop
 8006040:	200000b8 	.word	0x200000b8
 8006044:	200000bc 	.word	0x200000bc

08006048 <_realloc_r>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	4607      	mov	r7, r0
 800604c:	4614      	mov	r4, r2
 800604e:	460e      	mov	r6, r1
 8006050:	b921      	cbnz	r1, 800605c <_realloc_r+0x14>
 8006052:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006056:	4611      	mov	r1, r2
 8006058:	f7ff bf9c 	b.w	8005f94 <_malloc_r>
 800605c:	b922      	cbnz	r2, 8006068 <_realloc_r+0x20>
 800605e:	f7ff ff49 	bl	8005ef4 <_free_r>
 8006062:	4625      	mov	r5, r4
 8006064:	4628      	mov	r0, r5
 8006066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006068:	f000 f830 	bl	80060cc <_malloc_usable_size_r>
 800606c:	42a0      	cmp	r0, r4
 800606e:	d20f      	bcs.n	8006090 <_realloc_r+0x48>
 8006070:	4621      	mov	r1, r4
 8006072:	4638      	mov	r0, r7
 8006074:	f7ff ff8e 	bl	8005f94 <_malloc_r>
 8006078:	4605      	mov	r5, r0
 800607a:	2800      	cmp	r0, #0
 800607c:	d0f2      	beq.n	8006064 <_realloc_r+0x1c>
 800607e:	4631      	mov	r1, r6
 8006080:	4622      	mov	r2, r4
 8006082:	f7ff ff0f 	bl	8005ea4 <memcpy>
 8006086:	4631      	mov	r1, r6
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff ff33 	bl	8005ef4 <_free_r>
 800608e:	e7e9      	b.n	8006064 <_realloc_r+0x1c>
 8006090:	4635      	mov	r5, r6
 8006092:	e7e7      	b.n	8006064 <_realloc_r+0x1c>

08006094 <_sbrk_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d06      	ldr	r5, [pc, #24]	; (80060b0 <_sbrk_r+0x1c>)
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	f7fa ff84 	bl	8000fac <_sbrk>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_sbrk_r+0x1a>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_sbrk_r+0x1a>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20000908 	.word	0x20000908

080060b4 <__malloc_lock>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__malloc_lock+0x8>)
 80060b6:	f000 b811 	b.w	80060dc <__retarget_lock_acquire_recursive>
 80060ba:	bf00      	nop
 80060bc:	20000910 	.word	0x20000910

080060c0 <__malloc_unlock>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__malloc_unlock+0x8>)
 80060c2:	f000 b80c 	b.w	80060de <__retarget_lock_release_recursive>
 80060c6:	bf00      	nop
 80060c8:	20000910 	.word	0x20000910

080060cc <_malloc_usable_size_r>:
 80060cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d0:	1f18      	subs	r0, r3, #4
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	bfbc      	itt	lt
 80060d6:	580b      	ldrlt	r3, [r1, r0]
 80060d8:	18c0      	addlt	r0, r0, r3
 80060da:	4770      	bx	lr

080060dc <__retarget_lock_acquire_recursive>:
 80060dc:	4770      	bx	lr

080060de <__retarget_lock_release_recursive>:
 80060de:	4770      	bx	lr

080060e0 <_init>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	bf00      	nop
 80060e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060e6:	bc08      	pop	{r3}
 80060e8:	469e      	mov	lr, r3
 80060ea:	4770      	bx	lr

080060ec <_fini>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr
