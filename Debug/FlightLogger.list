
FlightLogger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08009b90  08009b90  00019b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d10  08009d10  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08009d10  08009d10  00019d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d18  08009d18  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d18  08009d18  00019d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d1c  08009d1c  00019d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08009d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb0  20000088  08009da8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d38  08009da8  00020d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025039  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045be  00000000  00000000  000450f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  000496b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  0004afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024bd8  00000000  00000000  0004c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021099  00000000  00000000  00071280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0b1f  00000000  00000000  00092319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00162e38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b30  00000000  00000000  00162e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009b78 	.word	0x08009b78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08009b78 	.word	0x08009b78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800028e:	f000 b9b9 	b.w	8000604 <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000320:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000324:	f000 b96e 	b.w	8000604 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468c      	mov	ip, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8083 	bne.w	8000456 <__udivmoddi4+0x116>
 8000350:	428a      	cmp	r2, r1
 8000352:	4617      	mov	r7, r2
 8000354:	d947      	bls.n	80003e6 <__udivmoddi4+0xa6>
 8000356:	fab2 f282 	clz	r2, r2
 800035a:	b142      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035c:	f1c2 0020 	rsb	r0, r2, #32
 8000360:	fa24 f000 	lsr.w	r0, r4, r0
 8000364:	4091      	lsls	r1, r2
 8000366:	4097      	lsls	r7, r2
 8000368:	ea40 0c01 	orr.w	ip, r0, r1
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbbc f6f8 	udiv	r6, ip, r8
 8000378:	fa1f fe87 	uxth.w	lr, r7
 800037c:	fb08 c116 	mls	r1, r8, r6, ip
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f10e 	mul.w	r1, r6, lr
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000392:	f080 8119 	bcs.w	80005c8 <__udivmoddi4+0x288>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8116 	bls.w	80005c8 <__udivmoddi4+0x288>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003a8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003be:	f080 8105 	bcs.w	80005cc <__udivmoddi4+0x28c>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8102 	bls.w	80005cc <__udivmoddi4+0x28c>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d0:	eba4 040e 	sub.w	r4, r4, lr
 80003d4:	2600      	movs	r6, #0
 80003d6:	b11d      	cbz	r5, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c5 4300 	strd	r4, r3, [r5]
 80003e0:	4631      	mov	r1, r6
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	b902      	cbnz	r2, 80003ea <__udivmoddi4+0xaa>
 80003e8:	deff      	udf	#255	; 0xff
 80003ea:	fab2 f282 	clz	r2, r2
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	d150      	bne.n	8000494 <__udivmoddi4+0x154>
 80003f2:	1bcb      	subs	r3, r1, r7
 80003f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f8:	fa1f f887 	uxth.w	r8, r7
 80003fc:	2601      	movs	r6, #1
 80003fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000402:	0c21      	lsrs	r1, r4, #16
 8000404:	fb0e 331c 	mls	r3, lr, ip, r3
 8000408:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800040c:	fb08 f30c 	mul.w	r3, r8, ip
 8000410:	428b      	cmp	r3, r1
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000414:	1879      	adds	r1, r7, r1
 8000416:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0xe2>
 800041c:	428b      	cmp	r3, r1
 800041e:	f200 80e9 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 8000422:	4684      	mov	ip, r0
 8000424:	1ac9      	subs	r1, r1, r3
 8000426:	b2a3      	uxth	r3, r4
 8000428:	fbb1 f0fe 	udiv	r0, r1, lr
 800042c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000430:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000434:	fb08 f800 	mul.w	r8, r8, r0
 8000438:	45a0      	cmp	r8, r4
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x10c>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x10a>
 8000444:	45a0      	cmp	r8, r4
 8000446:	f200 80d9 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 800044a:	4618      	mov	r0, r3
 800044c:	eba4 0408 	sub.w	r4, r4, r8
 8000450:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000454:	e7bf      	b.n	80003d6 <__udivmoddi4+0x96>
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x12e>
 800045a:	2d00      	cmp	r5, #0
 800045c:	f000 80b1 	beq.w	80005c2 <__udivmoddi4+0x282>
 8000460:	2600      	movs	r6, #0
 8000462:	e9c5 0100 	strd	r0, r1, [r5]
 8000466:	4630      	mov	r0, r6
 8000468:	4631      	mov	r1, r6
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f683 	clz	r6, r3
 8000472:	2e00      	cmp	r6, #0
 8000474:	d14a      	bne.n	800050c <__udivmoddi4+0x1cc>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0x140>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80b8 	bhi.w	80005f0 <__udivmoddi4+0x2b0>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0103 	sbc.w	r1, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	468c      	mov	ip, r1
 800048a:	2d00      	cmp	r5, #0
 800048c:	d0a8      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800048e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000492:	e7a5      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000494:	f1c2 0320 	rsb	r3, r2, #32
 8000498:	fa20 f603 	lsr.w	r6, r0, r3
 800049c:	4097      	lsls	r7, r2
 800049e:	fa01 f002 	lsl.w	r0, r1, r2
 80004a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a6:	40d9      	lsrs	r1, r3
 80004a8:	4330      	orrs	r0, r6
 80004aa:	0c03      	lsrs	r3, r0, #16
 80004ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80004b0:	fa1f f887 	uxth.w	r8, r7
 80004b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb06 f108 	mul.w	r1, r6, r8
 80004c0:	4299      	cmp	r1, r3
 80004c2:	fa04 f402 	lsl.w	r4, r4, r2
 80004c6:	d909      	bls.n	80004dc <__udivmoddi4+0x19c>
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80004ce:	f080 808d 	bcs.w	80005ec <__udivmoddi4+0x2ac>
 80004d2:	4299      	cmp	r1, r3
 80004d4:	f240 808a 	bls.w	80005ec <__udivmoddi4+0x2ac>
 80004d8:	3e02      	subs	r6, #2
 80004da:	443b      	add	r3, r7
 80004dc:	1a5b      	subs	r3, r3, r1
 80004de:	b281      	uxth	r1, r0
 80004e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ec:	fb00 f308 	mul.w	r3, r0, r8
 80004f0:	428b      	cmp	r3, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x1c4>
 80004f4:	1879      	adds	r1, r7, r1
 80004f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004fa:	d273      	bcs.n	80005e4 <__udivmoddi4+0x2a4>
 80004fc:	428b      	cmp	r3, r1
 80004fe:	d971      	bls.n	80005e4 <__udivmoddi4+0x2a4>
 8000500:	3802      	subs	r0, #2
 8000502:	4439      	add	r1, r7
 8000504:	1acb      	subs	r3, r1, r3
 8000506:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800050a:	e778      	b.n	80003fe <__udivmoddi4+0xbe>
 800050c:	f1c6 0c20 	rsb	ip, r6, #32
 8000510:	fa03 f406 	lsl.w	r4, r3, r6
 8000514:	fa22 f30c 	lsr.w	r3, r2, ip
 8000518:	431c      	orrs	r4, r3
 800051a:	fa20 f70c 	lsr.w	r7, r0, ip
 800051e:	fa01 f306 	lsl.w	r3, r1, r6
 8000522:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000526:	fa21 f10c 	lsr.w	r1, r1, ip
 800052a:	431f      	orrs	r7, r3
 800052c:	0c3b      	lsrs	r3, r7, #16
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fa1f f884 	uxth.w	r8, r4
 8000536:	fb0e 1119 	mls	r1, lr, r9, r1
 800053a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800053e:	fb09 fa08 	mul.w	sl, r9, r8
 8000542:	458a      	cmp	sl, r1
 8000544:	fa02 f206 	lsl.w	r2, r2, r6
 8000548:	fa00 f306 	lsl.w	r3, r0, r6
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x220>
 800054e:	1861      	adds	r1, r4, r1
 8000550:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000554:	d248      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 8000556:	458a      	cmp	sl, r1
 8000558:	d946      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4421      	add	r1, r4
 8000560:	eba1 010a 	sub.w	r1, r1, sl
 8000564:	b2bf      	uxth	r7, r7
 8000566:	fbb1 f0fe 	udiv	r0, r1, lr
 800056a:	fb0e 1110 	mls	r1, lr, r0, r1
 800056e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000572:	fb00 f808 	mul.w	r8, r0, r8
 8000576:	45b8      	cmp	r8, r7
 8000578:	d907      	bls.n	800058a <__udivmoddi4+0x24a>
 800057a:	19e7      	adds	r7, r4, r7
 800057c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000580:	d22e      	bcs.n	80005e0 <__udivmoddi4+0x2a0>
 8000582:	45b8      	cmp	r8, r7
 8000584:	d92c      	bls.n	80005e0 <__udivmoddi4+0x2a0>
 8000586:	3802      	subs	r0, #2
 8000588:	4427      	add	r7, r4
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	eba7 0708 	sub.w	r7, r7, r8
 8000592:	fba0 8902 	umull	r8, r9, r0, r2
 8000596:	454f      	cmp	r7, r9
 8000598:	46c6      	mov	lr, r8
 800059a:	4649      	mov	r1, r9
 800059c:	d31a      	bcc.n	80005d4 <__udivmoddi4+0x294>
 800059e:	d017      	beq.n	80005d0 <__udivmoddi4+0x290>
 80005a0:	b15d      	cbz	r5, 80005ba <__udivmoddi4+0x27a>
 80005a2:	ebb3 020e 	subs.w	r2, r3, lr
 80005a6:	eb67 0701 	sbc.w	r7, r7, r1
 80005aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80005ae:	40f2      	lsrs	r2, r6
 80005b0:	ea4c 0202 	orr.w	r2, ip, r2
 80005b4:	40f7      	lsrs	r7, r6
 80005b6:	e9c5 2700 	strd	r2, r7, [r5]
 80005ba:	2600      	movs	r6, #0
 80005bc:	4631      	mov	r1, r6
 80005be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c2:	462e      	mov	r6, r5
 80005c4:	4628      	mov	r0, r5
 80005c6:	e70b      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005c8:	4606      	mov	r6, r0
 80005ca:	e6e9      	b.n	80003a0 <__udivmoddi4+0x60>
 80005cc:	4618      	mov	r0, r3
 80005ce:	e6fd      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d0:	4543      	cmp	r3, r8
 80005d2:	d2e5      	bcs.n	80005a0 <__udivmoddi4+0x260>
 80005d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005d8:	eb69 0104 	sbc.w	r1, r9, r4
 80005dc:	3801      	subs	r0, #1
 80005de:	e7df      	b.n	80005a0 <__udivmoddi4+0x260>
 80005e0:	4608      	mov	r0, r1
 80005e2:	e7d2      	b.n	800058a <__udivmoddi4+0x24a>
 80005e4:	4660      	mov	r0, ip
 80005e6:	e78d      	b.n	8000504 <__udivmoddi4+0x1c4>
 80005e8:	4681      	mov	r9, r0
 80005ea:	e7b9      	b.n	8000560 <__udivmoddi4+0x220>
 80005ec:	4666      	mov	r6, ip
 80005ee:	e775      	b.n	80004dc <__udivmoddi4+0x19c>
 80005f0:	4630      	mov	r0, r6
 80005f2:	e74a      	b.n	800048a <__udivmoddi4+0x14a>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	4439      	add	r1, r7
 80005fa:	e713      	b.n	8000424 <__udivmoddi4+0xe4>
 80005fc:	3802      	subs	r0, #2
 80005fe:	443c      	add	r4, r7
 8000600:	e724      	b.n	800044c <__udivmoddi4+0x10c>
 8000602:	bf00      	nop

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <unmountSD>:
uint32_t u32Humidity;
bool bmpResult;

extern volatile uint32_t u32usTick;

void unmountSD() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	bSDPresent = false;
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <unmountSD+0x18>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	f_mount(NULL, "", 0);
 8000612:	2200      	movs	r2, #0
 8000614:	4903      	ldr	r1, [pc, #12]	; (8000624 <unmountSD+0x1c>)
 8000616:	2000      	movs	r0, #0
 8000618:	f008 f87c 	bl	8008714 <f_mount>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	200000a4 	.word	0x200000a4
 8000624:	08009b90 	.word	0x08009b90

08000628 <ApplicationInit>:

void ApplicationInit() {
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af02      	add	r7, sp, #8
	// Mount SD Card
	fResult = f_mount(&FatFs, "", 1);
 800062e:	2201      	movs	r2, #1
 8000630:	4948      	ldr	r1, [pc, #288]	; (8000754 <ApplicationInit+0x12c>)
 8000632:	4849      	ldr	r0, [pc, #292]	; (8000758 <ApplicationInit+0x130>)
 8000634:	f008 f86e 	bl	8008714 <f_mount>
 8000638:	4603      	mov	r3, r0
 800063a:	461a      	mov	r2, r3
 800063c:	4b47      	ldr	r3, [pc, #284]	; (800075c <ApplicationInit+0x134>)
 800063e:	701a      	strb	r2, [r3, #0]
	if(fResult == FR_OK) {
 8000640:	4b46      	ldr	r3, [pc, #280]	; (800075c <ApplicationInit+0x134>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10f      	bne.n	8000668 <ApplicationInit+0x40>
		bSDPresent = true;
 8000648:	4b45      	ldr	r3, [pc, #276]	; (8000760 <ApplicationInit+0x138>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
		return;
	}

	// Check if FlightLog folder exists, otherwise create it
	//fResult = f_opendir(&dir, "/log");
	fResult = f_stat("/log", &fInfo);
 800064e:	4945      	ldr	r1, [pc, #276]	; (8000764 <ApplicationInit+0x13c>)
 8000650:	4845      	ldr	r0, [pc, #276]	; (8000768 <ApplicationInit+0x140>)
 8000652:	f008 fc80 	bl	8008f56 <f_stat>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b40      	ldr	r3, [pc, #256]	; (800075c <ApplicationInit+0x134>)
 800065c:	701a      	strb	r2, [r3, #0]
	if(fResult == FR_NO_FILE) {
 800065e:	4b3f      	ldr	r3, [pc, #252]	; (800075c <ApplicationInit+0x134>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b04      	cmp	r3, #4
 8000664:	d140      	bne.n	80006e8 <ApplicationInit+0xc0>
 8000666:	e002      	b.n	800066e <ApplicationInit+0x46>
		unmountSD();
 8000668:	f7ff ffce 	bl	8000608 <unmountSD>
		return;
 800066c:	e070      	b.n	8000750 <ApplicationInit+0x128>
		// Create the directory
		fResult = f_mkdir("/log");
 800066e:	483e      	ldr	r0, [pc, #248]	; (8000768 <ApplicationInit+0x140>)
 8000670:	f008 fcaa 	bl	8008fc8 <f_mkdir>
 8000674:	4603      	mov	r3, r0
 8000676:	461a      	mov	r2, r3
 8000678:	4b38      	ldr	r3, [pc, #224]	; (800075c <ApplicationInit+0x134>)
 800067a:	701a      	strb	r2, [r3, #0]
		if(fResult != FR_OK) {
 800067c:	4b37      	ldr	r3, [pc, #220]	; (800075c <ApplicationInit+0x134>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d031      	beq.n	80006e8 <ApplicationInit+0xc0>
			// Error with SD card, cannot continue
			unmountSD();
 8000684:	f7ff ffc0 	bl	8000608 <unmountSD>
			return;
 8000688:	e062      	b.n	8000750 <ApplicationInit+0x128>
		}
	}

	// Check the highest XX folder for specific flight, create one XX + 1
	while(u8LogFolderIndex < 255) {
		iFolderPathlen = snprintf(u8FolderPath, sizeof(u8FolderPath), "/log/%d", u8LogFolderIndex);
 800068a:	4b38      	ldr	r3, [pc, #224]	; (800076c <ApplicationInit+0x144>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	4a38      	ldr	r2, [pc, #224]	; (8000770 <ApplicationInit+0x148>)
 8000690:	210a      	movs	r1, #10
 8000692:	4838      	ldr	r0, [pc, #224]	; (8000774 <ApplicationInit+0x14c>)
 8000694:	f008 fe2e 	bl	80092f4 <sniprintf>
 8000698:	4603      	mov	r3, r0
 800069a:	4a37      	ldr	r2, [pc, #220]	; (8000778 <ApplicationInit+0x150>)
 800069c:	6013      	str	r3, [r2, #0]
		fResult = f_stat(u8FolderPath, &fInfo);
 800069e:	4931      	ldr	r1, [pc, #196]	; (8000764 <ApplicationInit+0x13c>)
 80006a0:	4834      	ldr	r0, [pc, #208]	; (8000774 <ApplicationInit+0x14c>)
 80006a2:	f008 fc58 	bl	8008f56 <f_stat>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b2c      	ldr	r3, [pc, #176]	; (800075c <ApplicationInit+0x134>)
 80006ac:	701a      	strb	r2, [r3, #0]
		// The folder does not exist, we can create it
		if(fResult == FR_NO_FILE) {
 80006ae:	4b2b      	ldr	r3, [pc, #172]	; (800075c <ApplicationInit+0x134>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d112      	bne.n	80006dc <ApplicationInit+0xb4>
			// Create the directory
			fResult = f_mkdir(u8FolderPath);
 80006b6:	482f      	ldr	r0, [pc, #188]	; (8000774 <ApplicationInit+0x14c>)
 80006b8:	f008 fc86 	bl	8008fc8 <f_mkdir>
 80006bc:	4603      	mov	r3, r0
 80006be:	461a      	mov	r2, r3
 80006c0:	4b26      	ldr	r3, [pc, #152]	; (800075c <ApplicationInit+0x134>)
 80006c2:	701a      	strb	r2, [r3, #0]
			if(fResult != FR_OK) {
 80006c4:	4b25      	ldr	r3, [pc, #148]	; (800075c <ApplicationInit+0x134>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d002      	beq.n	80006d2 <ApplicationInit+0xaa>
				// Error with SD card, cannot continue
				unmountSD();
 80006cc:	f7ff ff9c 	bl	8000608 <unmountSD>
				return;
 80006d0:	e03e      	b.n	8000750 <ApplicationInit+0x128>
			} else if(fResult == FR_OK) {
 80006d2:	4b22      	ldr	r3, [pc, #136]	; (800075c <ApplicationInit+0x134>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d106      	bne.n	80006e8 <ApplicationInit+0xc0>
				// We found our new log folder
				break;
 80006da:	e009      	b.n	80006f0 <ApplicationInit+0xc8>
			}
		} else {
			u8LogFolderIndex++;
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <ApplicationInit+0x144>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	3301      	adds	r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <ApplicationInit+0x144>)
 80006e6:	701a      	strb	r2, [r3, #0]
	while(u8LogFolderIndex < 255) {
 80006e8:	4b20      	ldr	r3, [pc, #128]	; (800076c <ApplicationInit+0x144>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2bff      	cmp	r3, #255	; 0xff
 80006ee:	d1cc      	bne.n	800068a <ApplicationInit+0x62>
		}
	}
	if(u8LogFolderIndex == 255) {
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <ApplicationInit+0x144>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2bff      	cmp	r3, #255	; 0xff
 80006f6:	d102      	bne.n	80006fe <ApplicationInit+0xd6>
		// Needs to delete log folder before continuing
		unmountSD();
 80006f8:	f7ff ff86 	bl	8000608 <unmountSD>
		return;
 80006fc:	e028      	b.n	8000750 <ApplicationInit+0x128>
	}

	//Everything went right with the SD card, we can init the MPU6050
	mpuResult = SD_MPU6050_Init(&hi2c3, &mpu6050, SD_MPU6050_Device_0, SD_MPU6050_Accelerometer_16G, SD_MPU6050_Gyroscope_1000s);
 80006fe:	2302      	movs	r3, #2
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	2303      	movs	r3, #3
 8000704:	2200      	movs	r2, #0
 8000706:	491d      	ldr	r1, [pc, #116]	; (800077c <ApplicationInit+0x154>)
 8000708:	481d      	ldr	r0, [pc, #116]	; (8000780 <ApplicationInit+0x158>)
 800070a:	f001 f844 	bl	8001796 <SD_MPU6050_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	461a      	mov	r2, r3
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <ApplicationInit+0x15c>)
 8000714:	701a      	strb	r2, [r3, #0]
	SD_MPU6050_SetDataRate(&hi2c3, &mpu6050, SD_MPU6050_DataRate_1KHz);
 8000716:	2207      	movs	r2, #7
 8000718:	4918      	ldr	r1, [pc, #96]	; (800077c <ApplicationInit+0x154>)
 800071a:	4819      	ldr	r0, [pc, #100]	; (8000780 <ApplicationInit+0x158>)
 800071c:	f001 f8b0 	bl	8001880 <SD_MPU6050_SetDataRate>
	HAL_Delay(500); // Wait init
 8000720:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000724:	f001 fd3a 	bl	800219c <HAL_Delay>
	if(mpuResult != SD_MPU6050_Result_Ok) {
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <ApplicationInit+0x15c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <ApplicationInit+0x10e>
		unmountSD();
 8000730:	f7ff ff6a 	bl	8000608 <unmountSD>
		return;
 8000734:	e00c      	b.n	8000750 <ApplicationInit+0x128>
	}

	bmp280_init_default_params(&bmp280.params);
 8000736:	4814      	ldr	r0, [pc, #80]	; (8000788 <ApplicationInit+0x160>)
 8000738:	f000 f90e 	bl	8000958 <bmp280_init_default_params>
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 800073c:	4b13      	ldr	r3, [pc, #76]	; (800078c <ApplicationInit+0x164>)
 800073e:	2276      	movs	r2, #118	; 0x76
 8000740:	849a      	strh	r2, [r3, #36]	; 0x24
	bmp280.i2c = &hi2c1;
 8000742:	4b12      	ldr	r3, [pc, #72]	; (800078c <ApplicationInit+0x164>)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <ApplicationInit+0x168>)
 8000746:	629a      	str	r2, [r3, #40]	; 0x28
	bmp280_init(&bmp280, &bmp280.params);
 8000748:	490f      	ldr	r1, [pc, #60]	; (8000788 <ApplicationInit+0x160>)
 800074a:	4810      	ldr	r0, [pc, #64]	; (800078c <ApplicationInit+0x164>)
 800074c:	f000 fa7e 	bl	8000c4c <bmp280_init>

}
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	08009b90 	.word	0x08009b90
 8000758:	20000354 	.word	0x20000354
 800075c:	20000350 	.word	0x20000350
 8000760:	200000a4 	.word	0x200000a4
 8000764:	2000064c 	.word	0x2000064c
 8000768:	08009b94 	.word	0x08009b94
 800076c:	200000a6 	.word	0x200000a6
 8000770:	08009b9c 	.word	0x08009b9c
 8000774:	20000640 	.word	0x20000640
 8000778:	200000b4 	.word	0x200000b4
 800077c:	20000334 	.word	0x20000334
 8000780:	2000069c 	.word	0x2000069c
 8000784:	20000698 	.word	0x20000698
 8000788:	20000690 	.word	0x20000690
 800078c:	20000664 	.word	0x20000664
 8000790:	200006e8 	.word	0x200006e8

08000794 <ApplicationTask>:

void ApplicationTask() {
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000796:	b08f      	sub	sp, #60	; 0x3c
 8000798:	af0a      	add	r7, sp, #40	; 0x28

	}

#endif

	if(bSDPresent) {
 800079a:	4b59      	ldr	r3, [pc, #356]	; (8000900 <ApplicationTask+0x16c>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 80a3 	beq.w	80008ea <ApplicationTask+0x156>

		if(bFileIsOpen == false) {
 80007a4:	4b57      	ldr	r3, [pc, #348]	; (8000904 <ApplicationTask+0x170>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	f083 0301 	eor.w	r3, r3, #1
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d027      	beq.n	8000802 <ApplicationTask+0x6e>
			iBufferlen = snprintf(u8Buffer, sizeof(u8Buffer), "%s/%d.csv", u8FolderPath, u32LogFileIndex);
 80007b2:	4b55      	ldr	r3, [pc, #340]	; (8000908 <ApplicationTask+0x174>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	9300      	str	r3, [sp, #0]
 80007b8:	4b54      	ldr	r3, [pc, #336]	; (800090c <ApplicationTask+0x178>)
 80007ba:	4a55      	ldr	r2, [pc, #340]	; (8000910 <ApplicationTask+0x17c>)
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4855      	ldr	r0, [pc, #340]	; (8000914 <ApplicationTask+0x180>)
 80007c0:	f008 fd98 	bl	80092f4 <sniprintf>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a54      	ldr	r2, [pc, #336]	; (8000918 <ApplicationTask+0x184>)
 80007c8:	6013      	str	r3, [r2, #0]
			u32LogFileIndex++;
 80007ca:	4b4f      	ldr	r3, [pc, #316]	; (8000908 <ApplicationTask+0x174>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4a4d      	ldr	r2, [pc, #308]	; (8000908 <ApplicationTask+0x174>)
 80007d2:	6013      	str	r3, [r2, #0]
			u32LogFileLineCounter = 0;
 80007d4:	4b51      	ldr	r3, [pc, #324]	; (800091c <ApplicationTask+0x188>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
			fResult = f_open(&fp, u8Buffer, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80007da:	2213      	movs	r2, #19
 80007dc:	494d      	ldr	r1, [pc, #308]	; (8000914 <ApplicationTask+0x180>)
 80007de:	4850      	ldr	r0, [pc, #320]	; (8000920 <ApplicationTask+0x18c>)
 80007e0:	f007 ffde 	bl	80087a0 <f_open>
 80007e4:	4603      	mov	r3, r0
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b4e      	ldr	r3, [pc, #312]	; (8000924 <ApplicationTask+0x190>)
 80007ea:	701a      	strb	r2, [r3, #0]
			if(fResult != FR_OK) {
 80007ec:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <ApplicationTask+0x190>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d002      	beq.n	80007fa <ApplicationTask+0x66>
				unmountSD();
 80007f4:	f7ff ff08 	bl	8000608 <unmountSD>
				return;
 80007f8:	e07e      	b.n	80008f8 <ApplicationTask+0x164>
			}
			bFileIsOpen = true;
 80007fa:	4b42      	ldr	r3, [pc, #264]	; (8000904 <ApplicationTask+0x170>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
 8000800:	e07a      	b.n	80008f8 <ApplicationTask+0x164>
		} else {

			mpuResult = SD_MPU6050_ReadAll(&hi2c3, &mpu6050);
 8000802:	4949      	ldr	r1, [pc, #292]	; (8000928 <ApplicationTask+0x194>)
 8000804:	4849      	ldr	r0, [pc, #292]	; (800092c <ApplicationTask+0x198>)
 8000806:	f001 f943 	bl	8001a90 <SD_MPU6050_ReadAll>
 800080a:	4603      	mov	r3, r0
 800080c:	461a      	mov	r2, r3
 800080e:	4b48      	ldr	r3, [pc, #288]	; (8000930 <ApplicationTask+0x19c>)
 8000810:	701a      	strb	r2, [r3, #0]
			bmpResult = bmp280_read_fixed(&bmp280, &i32Temperature, &u32Pressure, &u32Humidity);
 8000812:	4b48      	ldr	r3, [pc, #288]	; (8000934 <ApplicationTask+0x1a0>)
 8000814:	4a48      	ldr	r2, [pc, #288]	; (8000938 <ApplicationTask+0x1a4>)
 8000816:	4949      	ldr	r1, [pc, #292]	; (800093c <ApplicationTask+0x1a8>)
 8000818:	4849      	ldr	r0, [pc, #292]	; (8000940 <ApplicationTask+0x1ac>)
 800081a:	f000 fd20 	bl	800125e <bmp280_read_fixed>
 800081e:	4603      	mov	r3, r0
 8000820:	461a      	mov	r2, r3
 8000822:	4b48      	ldr	r3, [pc, #288]	; (8000944 <ApplicationTask+0x1b0>)
 8000824:	701a      	strb	r2, [r3, #0]

			if(mpuResult == SD_MPU6050_Result_Ok && bmpResult == true) {
 8000826:	4b42      	ldr	r3, [pc, #264]	; (8000930 <ApplicationTask+0x19c>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d148      	bne.n	80008c0 <ApplicationTask+0x12c>
 800082e:	4b45      	ldr	r3, [pc, #276]	; (8000944 <ApplicationTask+0x1b0>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d044      	beq.n	80008c0 <ApplicationTask+0x12c>
				iBufferlen = snprintf(u8Buffer, sizeof(u8Buffer), "%lu,%d,%d,%d,%d,%d,%d,%d,%d,%d\n", HAL_GetTick(), mpu6050.Accelerometer_X, mpu6050.Accelerometer_Y, mpu6050.Accelerometer_Z, mpu6050.Gyroscope_X, mpu6050.Gyroscope_Y, mpu6050.Gyroscope_Z, i32Temperature, u32Pressure, u32Humidity);
 8000836:	f001 fca5 	bl	8002184 <HAL_GetTick>
 800083a:	4b3b      	ldr	r3, [pc, #236]	; (8000928 <ApplicationTask+0x194>)
 800083c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000840:	461c      	mov	r4, r3
 8000842:	4b39      	ldr	r3, [pc, #228]	; (8000928 <ApplicationTask+0x194>)
 8000844:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000848:	461d      	mov	r5, r3
 800084a:	4b37      	ldr	r3, [pc, #220]	; (8000928 <ApplicationTask+0x194>)
 800084c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000850:	461e      	mov	r6, r3
 8000852:	4b35      	ldr	r3, [pc, #212]	; (8000928 <ApplicationTask+0x194>)
 8000854:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b33      	ldr	r3, [pc, #204]	; (8000928 <ApplicationTask+0x194>)
 800085c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b31      	ldr	r3, [pc, #196]	; (8000928 <ApplicationTask+0x194>)
 8000864:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b34      	ldr	r3, [pc, #208]	; (800093c <ApplicationTask+0x1a8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a32      	ldr	r2, [pc, #200]	; (8000938 <ApplicationTask+0x1a4>)
 8000870:	6812      	ldr	r2, [r2, #0]
 8000872:	4930      	ldr	r1, [pc, #192]	; (8000934 <ApplicationTask+0x1a0>)
 8000874:	6809      	ldr	r1, [r1, #0]
 8000876:	9108      	str	r1, [sp, #32]
 8000878:	9207      	str	r2, [sp, #28]
 800087a:	9306      	str	r3, [sp, #24]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	9205      	str	r2, [sp, #20]
 8000880:	68ba      	ldr	r2, [r7, #8]
 8000882:	9204      	str	r2, [sp, #16]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	9303      	str	r3, [sp, #12]
 8000888:	9602      	str	r6, [sp, #8]
 800088a:	9501      	str	r5, [sp, #4]
 800088c:	9400      	str	r4, [sp, #0]
 800088e:	4603      	mov	r3, r0
 8000890:	4a2d      	ldr	r2, [pc, #180]	; (8000948 <ApplicationTask+0x1b4>)
 8000892:	2180      	movs	r1, #128	; 0x80
 8000894:	481f      	ldr	r0, [pc, #124]	; (8000914 <ApplicationTask+0x180>)
 8000896:	f008 fd2d 	bl	80092f4 <sniprintf>
 800089a:	4603      	mov	r3, r0
 800089c:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <ApplicationTask+0x184>)
 800089e:	6013      	str	r3, [r2, #0]
				fResult = f_write(&fp, u8Buffer, iBufferlen, &u8BytesWritten);
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <ApplicationTask+0x184>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b29      	ldr	r3, [pc, #164]	; (800094c <ApplicationTask+0x1b8>)
 80008a8:	491a      	ldr	r1, [pc, #104]	; (8000914 <ApplicationTask+0x180>)
 80008aa:	481d      	ldr	r0, [pc, #116]	; (8000920 <ApplicationTask+0x18c>)
 80008ac:	f008 f936 	bl	8008b1c <f_write>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <ApplicationTask+0x190>)
 80008b6:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80008b8:	2108      	movs	r1, #8
 80008ba:	4825      	ldr	r0, [pc, #148]	; (8000950 <ApplicationTask+0x1bc>)
 80008bc:	f001 fef6 	bl	80026ac <HAL_GPIO_TogglePin>
			}

			u32LogFileLineCounter++;
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <ApplicationTask+0x188>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a15      	ldr	r2, [pc, #84]	; (800091c <ApplicationTask+0x188>)
 80008c8:	6013      	str	r3, [r2, #0]
			if(u32LogFileLineCounter == MAX_LINE_PER_FILE) {
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <ApplicationTask+0x188>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a21      	ldr	r2, [pc, #132]	; (8000954 <ApplicationTask+0x1c0>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d111      	bne.n	80008f8 <ApplicationTask+0x164>
				bFileIsOpen = false;
 80008d4:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <ApplicationTask+0x170>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	701a      	strb	r2, [r3, #0]
				fResult = f_close(&fp);
 80008da:	4811      	ldr	r0, [pc, #68]	; (8000920 <ApplicationTask+0x18c>)
 80008dc:	f008 fb11 	bl	8008f02 <f_close>
 80008e0:	4603      	mov	r3, r0
 80008e2:	461a      	mov	r2, r3
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <ApplicationTask+0x190>)
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e006      	b.n	80008f8 <ApplicationTask+0x164>
			}
		}

	} else {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80008ea:	2108      	movs	r1, #8
 80008ec:	4818      	ldr	r0, [pc, #96]	; (8000950 <ApplicationTask+0x1bc>)
 80008ee:	f001 fedd 	bl	80026ac <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f001 fc52 	bl	800219c <HAL_Delay>
	}
}
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000a4 	.word	0x200000a4
 8000904:	200000a5 	.word	0x200000a5
 8000908:	200000a8 	.word	0x200000a8
 800090c:	20000640 	.word	0x20000640
 8000910:	08009ba4 	.word	0x08009ba4
 8000914:	20000584 	.word	0x20000584
 8000918:	200000b0 	.word	0x200000b0
 800091c:	200000ac 	.word	0x200000ac
 8000920:	20000104 	.word	0x20000104
 8000924:	20000350 	.word	0x20000350
 8000928:	20000334 	.word	0x20000334
 800092c:	2000069c 	.word	0x2000069c
 8000930:	20000698 	.word	0x20000698
 8000934:	20000604 	.word	0x20000604
 8000938:	20000608 	.word	0x20000608
 800093c:	2000060c 	.word	0x2000060c
 8000940:	20000664 	.word	0x20000664
 8000944:	20000699 	.word	0x20000699
 8000948:	08009bb0 	.word	0x08009bb0
 800094c:	200000b8 	.word	0x200000b8
 8000950:	48000400 	.word	0x48000400
 8000954:	000186a0 	.word	0x000186a0

08000958 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2203      	movs	r2, #3
 8000964:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2200      	movs	r2, #0
 800096a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2203      	movs	r2, #3
 8000970:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2203      	movs	r2, #3
 8000976:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2203      	movs	r2, #3
 800097c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2203      	movs	r2, #3
 8000982:	715a      	strb	r2, [r3, #5]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af04      	add	r7, sp, #16
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	460b      	mov	r3, r1
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80009aa:	7afb      	ldrb	r3, [r7, #11]
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	8af9      	ldrh	r1, [r7, #22]
 80009b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80009b4:	9302      	str	r3, [sp, #8]
 80009b6:	2302      	movs	r3, #2
 80009b8:	9301      	str	r3, [sp, #4]
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	9300      	str	r3, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	f002 fa1b 	bl	8002dfc <HAL_I2C_Mem_Read>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d10b      	bne.n	80009e4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80009cc:	7d7b      	ldrb	r3, [r7, #21]
 80009ce:	021b      	lsls	r3, r3, #8
 80009d0:	b21a      	sxth	r2, r3
 80009d2:	7d3b      	ldrb	r3, [r7, #20]
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b21b      	sxth	r3, r3
 80009da:	b29a      	uxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	801a      	strh	r2, [r3, #0]
		return true;
 80009e0:	2301      	movs	r3, #1
 80009e2:	e000      	b.n	80009e6 <read_register16+0x56>
	} else
		return false;
 80009e4:	2300      	movs	r3, #0

}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}

080009ee <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80009ee:	b590      	push	{r4, r7, lr}
 80009f0:	b08b      	sub	sp, #44	; 0x2c
 80009f2:	af04      	add	r7, sp, #16
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	461a      	mov	r2, r3
 80009fa:	460b      	mov	r3, r1
 80009fc:	72fb      	strb	r3, [r7, #11]
 80009fe:	4613      	mov	r3, r2
 8000a00:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	7abb      	ldrb	r3, [r7, #10]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	8af9      	ldrh	r1, [r7, #22]
 8000a18:	f241 3488 	movw	r4, #5000	; 0x1388
 8000a1c:	9402      	str	r4, [sp, #8]
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2301      	movs	r3, #1
 8000a26:	f002 f9e9 	bl	8002dfc <HAL_I2C_Mem_Read>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d101      	bne.n	8000a34 <read_data+0x46>
		return 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	e000      	b.n	8000a36 <read_data+0x48>
	else
		return 1;
 8000a34:	2301      	movs	r3, #1

}
 8000a36:	4618      	mov	r0, r3
 8000a38:	371c      	adds	r7, #28
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd90      	pop	{r4, r7, pc}

08000a3e <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	2188      	movs	r1, #136	; 0x88
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff9f 	bl	8000990 <read_register16>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d06f      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	3302      	adds	r3, #2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	218a      	movs	r1, #138	; 0x8a
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff95 	bl	8000990 <read_register16>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d065      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	461a      	mov	r2, r3
 8000a72:	218c      	movs	r1, #140	; 0x8c
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff8b 	bl	8000990 <read_register16>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d05b      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3306      	adds	r3, #6
 8000a84:	461a      	mov	r2, r3
 8000a86:	218e      	movs	r1, #142	; 0x8e
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff ff81 	bl	8000990 <read_register16>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d051      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	3308      	adds	r3, #8
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2190      	movs	r1, #144	; 0x90
 8000a9c:	6878      	ldr	r0, [r7, #4]
 8000a9e:	f7ff ff77 	bl	8000990 <read_register16>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d047      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	330a      	adds	r3, #10
 8000aac:	461a      	mov	r2, r3
 8000aae:	2192      	movs	r1, #146	; 0x92
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f7ff ff6d 	bl	8000990 <read_register16>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d03d      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	330c      	adds	r3, #12
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2194      	movs	r1, #148	; 0x94
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ff63 	bl	8000990 <read_register16>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d033      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	330e      	adds	r3, #14
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2196      	movs	r1, #150	; 0x96
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f7ff ff59 	bl	8000990 <read_register16>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d029      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	3310      	adds	r3, #16
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2198      	movs	r1, #152	; 0x98
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff4f 	bl	8000990 <read_register16>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d01f      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	3312      	adds	r3, #18
 8000afc:	461a      	mov	r2, r3
 8000afe:	219a      	movs	r1, #154	; 0x9a
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff45 	bl	8000990 <read_register16>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d015      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3314      	adds	r3, #20
 8000b10:	461a      	mov	r2, r3
 8000b12:	219c      	movs	r1, #156	; 0x9c
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff3b 	bl	8000990 <read_register16>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d00b      	beq.n	8000b38 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8000b24:	461a      	mov	r2, r3
 8000b26:	219e      	movs	r1, #158	; 0x9e
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f7ff ff31 	bl	8000990 <read_register16>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <read_calibration_data+0xfa>

		return true;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <read_calibration_data+0xfc>
	}

	return false;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8000b42:	b580      	push	{r7, lr}
 8000b44:	b084      	sub	sp, #16
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f103 0218 	add.w	r2, r3, #24
 8000b50:	2301      	movs	r3, #1
 8000b52:	21a1      	movs	r1, #161	; 0xa1
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff4a 	bl	80009ee <read_data>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d14b      	bne.n	8000bf8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	331a      	adds	r3, #26
 8000b64:	461a      	mov	r2, r3
 8000b66:	21e1      	movs	r1, #225	; 0xe1
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff11 	bl	8000990 <read_register16>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d041      	beq.n	8000bf8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f103 021c 	add.w	r2, r3, #28
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	21e3      	movs	r1, #227	; 0xe3
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ff35 	bl	80009ee <read_data>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d136      	bne.n	8000bf8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8000b8a:	f107 030e 	add.w	r3, r7, #14
 8000b8e:	461a      	mov	r2, r3
 8000b90:	21e4      	movs	r1, #228	; 0xe4
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff fefc 	bl	8000990 <read_register16>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d02c      	beq.n	8000bf8 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	21e5      	movs	r1, #229	; 0xe5
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f7ff fef2 	bl	8000990 <read_register16>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d022      	beq.n	8000bf8 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f103 0222 	add.w	r2, r3, #34	; 0x22
 8000bb8:	2301      	movs	r3, #1
 8000bba:	21e7      	movs	r1, #231	; 0xe7
 8000bbc:	6878      	ldr	r0, [r7, #4]
 8000bbe:	f7ff ff16 	bl	80009ee <read_data>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d117      	bne.n	8000bf8 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8000bc8:	89fb      	ldrh	r3, [r7, #14]
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	b21b      	sxth	r3, r3
 8000bce:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	89fb      	ldrh	r3, [r7, #14]
 8000bd6:	121b      	asrs	r3, r3, #8
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	4313      	orrs	r3, r2
 8000be2:	b21a      	sxth	r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8000be8:	89bb      	ldrh	r3, [r7, #12]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	b21a      	sxth	r2, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	841a      	strh	r2, [r3, #32]

		return true;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <read_hum_calibration_data+0xb8>
	}

	return false;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b088      	sub	sp, #32
 8000c06:	af04      	add	r7, sp, #16
 8000c08:	6078      	str	r0, [r7, #4]
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	70fb      	strb	r3, [r7, #3]
 8000c0e:	4613      	mov	r3, r2
 8000c10:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000c1e:	78fb      	ldrb	r3, [r7, #3]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	89f9      	ldrh	r1, [r7, #14]
 8000c24:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c28:	9302      	str	r3, [sp, #8]
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	9301      	str	r3, [sp, #4]
 8000c2e:	1cbb      	adds	r3, r7, #2
 8000c30:	9300      	str	r3, [sp, #0]
 8000c32:	2301      	movs	r3, #1
 8000c34:	f001 ffce 	bl	8002bd4 <HAL_I2C_Mem_Write>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <write_register8+0x40>
		return false;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <write_register8+0x42>
	else
		return true;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c5a:	2b76      	cmp	r3, #118	; 0x76
 8000c5c:	d005      	beq.n	8000c6a <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000c62:	2b77      	cmp	r3, #119	; 0x77
 8000c64:	d001      	beq.n	8000c6a <bmp280_init+0x1e>

		return false;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e099      	b.n	8000d9e <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8000c70:	2301      	movs	r3, #1
 8000c72:	21d0      	movs	r1, #208	; 0xd0
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff feba 	bl	80009ee <read_data>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <bmp280_init+0x38>
		return false;
 8000c80:	2300      	movs	r3, #0
 8000c82:	e08c      	b.n	8000d9e <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c8a:	2b58      	cmp	r3, #88	; 0x58
 8000c8c:	d006      	beq.n	8000c9c <bmp280_init+0x50>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000c94:	2b60      	cmp	r3, #96	; 0x60
 8000c96:	d001      	beq.n	8000c9c <bmp280_init+0x50>

		return false;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e080      	b.n	8000d9e <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8000c9c:	22b6      	movs	r2, #182	; 0xb6
 8000c9e:	21e0      	movs	r1, #224	; 0xe0
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ffae 	bl	8000c02 <write_register8>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <bmp280_init+0x64>
		return false;
 8000cac:	2300      	movs	r3, #0
 8000cae:	e076      	b.n	8000d9e <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8000cb0:	f107 020c 	add.w	r2, r7, #12
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	21f3      	movs	r1, #243	; 0xf3
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff fe98 	bl	80009ee <read_data>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d1f5      	bne.n	8000cb0 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8000cc4:	7b3b      	ldrb	r3, [r7, #12]
 8000cc6:	f003 0301 	and.w	r3, r3, #1
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f0      	bne.n	8000cb0 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff feb5 	bl	8000a3e <read_calibration_data>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f083 0301 	eor.w	r3, r3, #1
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d100      	bne.n	8000ce2 <bmp280_init+0x96>
 8000ce0:	e001      	b.n	8000ce6 <bmp280_init+0x9a>
		return false;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	e05b      	b.n	8000d9e <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000cec:	2b60      	cmp	r3, #96	; 0x60
 8000cee:	d10a      	bne.n	8000d06 <bmp280_init+0xba>
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff26 	bl	8000b42 <read_hum_calibration_data>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	f083 0301 	eor.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <bmp280_init+0xba>
		return false;
 8000d02:	2300      	movs	r3, #0
 8000d04:	e04b      	b.n	8000d9e <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	795b      	ldrb	r3, [r3, #5]
 8000d0a:	015b      	lsls	r3, r3, #5
 8000d0c:	b25a      	sxtb	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	785b      	ldrb	r3, [r3, #1]
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	b25b      	sxtb	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	21f5      	movs	r1, #245	; 0xf5
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff ff6d 	bl	8000c02 <write_register8>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <bmp280_init+0xe6>
		return false;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e035      	b.n	8000d9e <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d102      	bne.n	8000d40 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	78db      	ldrb	r3, [r3, #3]
 8000d44:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8000d46:	b25a      	sxtb	r2, r3
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	4313      	orrs	r3, r2
 8000d52:	b25a      	sxtb	r2, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8000d5e:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000d66:	2b60      	cmp	r3, #96	; 0x60
 8000d68:	d10d      	bne.n	8000d86 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	791b      	ldrb	r3, [r3, #4]
 8000d6e:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8000d70:	7b7b      	ldrb	r3, [r7, #13]
 8000d72:	461a      	mov	r2, r3
 8000d74:	21f2      	movs	r1, #242	; 0xf2
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff43 	bl	8000c02 <write_register8>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <bmp280_init+0x13a>
			return false;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e00b      	b.n	8000d9e <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8000d86:	7bbb      	ldrb	r3, [r7, #14]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	21f4      	movs	r1, #244	; 0xf4
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff38 	bl	8000c02 <write_register8>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <bmp280_init+0x150>
		return false;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e000      	b.n	8000d9e <bmp280_init+0x152>
	}

	return true;
 8000d9c:	2301      	movs	r3, #1
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8000da6:	b480      	push	{r7}
 8000da8:	b087      	sub	sp, #28
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	60f8      	str	r0, [r7, #12]
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	10da      	asrs	r2, r3, #3
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000dc4:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8000dc8:	12db      	asrs	r3, r3, #11
 8000dca:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	111b      	asrs	r3, r3, #4
 8000dd0:	68fa      	ldr	r2, [r7, #12]
 8000dd2:	8812      	ldrh	r2, [r2, #0]
 8000dd4:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	1112      	asrs	r2, r2, #4
 8000dda:	68f9      	ldr	r1, [r7, #12]
 8000ddc:	8809      	ldrh	r1, [r1, #0]
 8000dde:	1a52      	subs	r2, r2, r1
 8000de0:	fb02 f303 	mul.w	r3, r2, r3
 8000de4:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000dec:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8000df0:	139b      	asrs	r3, r3, #14
 8000df2:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	441a      	add	r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4613      	mov	r3, r2
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4413      	add	r3, r2
 8000e08:	3380      	adds	r3, #128	; 0x80
 8000e0a:	121b      	asrs	r3, r3, #8
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	371c      	adds	r7, #28
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8000e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e1c:	b09c      	sub	sp, #112	; 0x70
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6578      	str	r0, [r7, #84]	; 0x54
 8000e22:	6539      	str	r1, [r7, #80]	; 0x50
 8000e24:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8000e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e28:	461a      	mov	r2, r3
 8000e2a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e2e:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 8000e32:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 8000e36:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8000e3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e3e:	fb03 f102 	mul.w	r1, r3, r2
 8000e42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e46:	fb03 f302 	mul.w	r3, r3, r2
 8000e4a:	18ca      	adds	r2, r1, r3
 8000e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e4e:	fba3 4503 	umull	r4, r5, r3, r3
 8000e52:	1953      	adds	r3, r2, r5
 8000e54:	461d      	mov	r5, r3
 8000e56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e58:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e62:	fb02 f005 	mul.w	r0, r2, r5
 8000e66:	fb04 f103 	mul.w	r1, r4, r3
 8000e6a:	4401      	add	r1, r0
 8000e6c:	fba4 2302 	umull	r2, r3, r4, r2
 8000e70:	4419      	add	r1, r3
 8000e72:	460b      	mov	r3, r1
 8000e74:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 8000e78:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8000e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e7e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000e82:	b21a      	sxth	r2, r3
 8000e84:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000e88:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000e8a:	fb03 f001 	mul.w	r0, r3, r1
 8000e8e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000e90:	fb02 f101 	mul.w	r1, r2, r1
 8000e94:	4408      	add	r0, r1
 8000e96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000e98:	fba1 2302 	umull	r2, r3, r1, r2
 8000e9c:	18c1      	adds	r1, r0, r3
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	f04f 0000 	mov.w	r0, #0
 8000ea4:	f04f 0100 	mov.w	r1, #0
 8000ea8:	0459      	lsls	r1, r3, #17
 8000eaa:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8000eae:	0450      	lsls	r0, r2, #17
 8000eb0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000eb4:	eb12 0800 	adds.w	r8, r2, r0
 8000eb8:	eb43 0901 	adc.w	r9, r3, r1
 8000ebc:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8000ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000ecc:	f04f 0000 	mov.w	r0, #0
 8000ed0:	f04f 0100 	mov.w	r1, #0
 8000ed4:	00d1      	lsls	r1, r2, #3
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000edc:	1814      	adds	r4, r2, r0
 8000ede:	61bc      	str	r4, [r7, #24]
 8000ee0:	414b      	adcs	r3, r1
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8000ee8:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000eec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ef0:	fb03 f102 	mul.w	r1, r3, r2
 8000ef4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ef6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ef8:	fb03 f302 	mul.w	r3, r3, r2
 8000efc:	18ca      	adds	r2, r1, r3
 8000efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f00:	fba3 4503 	umull	r4, r5, r3, r3
 8000f04:	1953      	adds	r3, r2, r5
 8000f06:	461d      	mov	r5, r3
 8000f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f0e:	b21a      	sxth	r2, r3
 8000f10:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f14:	fb02 f005 	mul.w	r0, r2, r5
 8000f18:	fb04 f103 	mul.w	r1, r4, r3
 8000f1c:	4401      	add	r1, r0
 8000f1e:	fba4 2302 	umull	r2, r3, r4, r2
 8000f22:	4419      	add	r1, r3
 8000f24:	460b      	mov	r3, r1
 8000f26:	f04f 0800 	mov.w	r8, #0
 8000f2a:	f04f 0900 	mov.w	r9, #0
 8000f2e:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8000f32:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 8000f36:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8000f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f3c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000f46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000f48:	fb03 f001 	mul.w	r0, r3, r1
 8000f4c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8000f4e:	fb02 f101 	mul.w	r1, r2, r1
 8000f52:	1844      	adds	r4, r0, r1
 8000f54:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000f56:	fba1 0102 	umull	r0, r1, r1, r2
 8000f5a:	1863      	adds	r3, r4, r1
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	f04f 0200 	mov.w	r2, #0
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	030b      	lsls	r3, r1, #12
 8000f68:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8000f6c:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8000f6e:	eb18 0102 	adds.w	r1, r8, r2
 8000f72:	6139      	str	r1, [r7, #16]
 8000f74:	eb49 0303 	adc.w	r3, r9, r3
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8000f7e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8000f82:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000f86:	1c11      	adds	r1, r2, #0
 8000f88:	6439      	str	r1, [r7, #64]	; 0x40
 8000f8a:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8000f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8000f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f92:	88db      	ldrh	r3, [r3, #6]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8000f9e:	4629      	mov	r1, r5
 8000fa0:	fb02 f001 	mul.w	r0, r2, r1
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	fb01 f103 	mul.w	r1, r1, r3
 8000faa:	4401      	add	r1, r0
 8000fac:	4620      	mov	r0, r4
 8000fae:	fba0 2302 	umull	r2, r3, r0, r2
 8000fb2:	4419      	add	r1, r3
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	f04f 0000 	mov.w	r0, #0
 8000fba:	f04f 0100 	mov.w	r1, #0
 8000fbe:	1058      	asrs	r0, r3, #1
 8000fc0:	17d9      	asrs	r1, r3, #31
 8000fc2:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 8000fc6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	d101      	bne.n	8000fd2 <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e0e1      	b.n	8001196 <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8000fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fd4:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000fd8:	461a      	mov	r2, r3
 8000fda:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000fde:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8000fe2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fe4:	105b      	asrs	r3, r3, #1
 8000fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000fe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fea:	07db      	lsls	r3, r3, #31
 8000fec:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fee:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000ff2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	ebb1 0a02 	subs.w	sl, r1, r2
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	eb61 0b03 	sbc.w	fp, r1, r3
 8001002:	4652      	mov	r2, sl
 8001004:	465b      	mov	r3, fp
 8001006:	1891      	adds	r1, r2, r2
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	415b      	adcs	r3, r3
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001012:	eb12 020a 	adds.w	r2, r2, sl
 8001016:	eb43 030b 	adc.w	r3, r3, fp
 800101a:	f04f 0000 	mov.w	r0, #0
 800101e:	f04f 0100 	mov.w	r1, #0
 8001022:	0199      	lsls	r1, r3, #6
 8001024:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8001028:	0190      	lsls	r0, r2, #6
 800102a:	1812      	adds	r2, r2, r0
 800102c:	eb41 0303 	adc.w	r3, r1, r3
 8001030:	f04f 0000 	mov.w	r0, #0
 8001034:	f04f 0100 	mov.w	r1, #0
 8001038:	0099      	lsls	r1, r3, #2
 800103a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800103e:	0090      	lsls	r0, r2, #2
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	eb12 020a 	adds.w	r2, r2, sl
 8001048:	eb43 030b 	adc.w	r3, r3, fp
 800104c:	f04f 0000 	mov.w	r0, #0
 8001050:	f04f 0100 	mov.w	r1, #0
 8001054:	0099      	lsls	r1, r3, #2
 8001056:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800105a:	0090      	lsls	r0, r2, #2
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	eb12 010a 	adds.w	r1, r2, sl
 8001064:	6339      	str	r1, [r7, #48]	; 0x30
 8001066:	eb43 030b 	adc.w	r3, r3, fp
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
 800106c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001070:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001074:	f7ff f8fc 	bl	8000270 <__aeabi_ldivmod>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001082:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001086:	b218      	sxth	r0, r3
 8001088:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800108c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	0b62      	lsrs	r2, r4, #13
 800109a:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 800109e:	136b      	asrs	r3, r5, #13
 80010a0:	fb02 f501 	mul.w	r5, r2, r1
 80010a4:	fb00 f403 	mul.w	r4, r0, r3
 80010a8:	442c      	add	r4, r5
 80010aa:	fba0 0102 	umull	r0, r1, r0, r2
 80010ae:	1863      	adds	r3, r4, r1
 80010b0:	4619      	mov	r1, r3
 80010b2:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	0b62      	lsrs	r2, r4, #13
 80010c0:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 80010c4:	136b      	asrs	r3, r5, #13
 80010c6:	fb02 f501 	mul.w	r5, r2, r1
 80010ca:	fb00 f403 	mul.w	r4, r0, r3
 80010ce:	442c      	add	r4, r5
 80010d0:	fba0 0102 	umull	r0, r1, r0, r2
 80010d4:	1863      	adds	r3, r4, r1
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	0e42      	lsrs	r2, r0, #25
 80010e2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80010e6:	164b      	asrs	r3, r1, #25
 80010e8:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80010ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80010f2:	b21a      	sxth	r2, r3
 80010f4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80010f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80010fa:	fb03 f001 	mul.w	r0, r3, r1
 80010fe:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001100:	fb02 f101 	mul.w	r1, r2, r1
 8001104:	1844      	adds	r4, r0, r1
 8001106:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001108:	fba1 0102 	umull	r0, r1, r1, r2
 800110c:	1863      	adds	r3, r4, r1
 800110e:	4619      	mov	r1, r3
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 0300 	mov.w	r3, #0
 8001118:	0cc2      	lsrs	r2, r0, #19
 800111a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800111e:	14cb      	asrs	r3, r1, #19
 8001120:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001124:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001128:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800112c:	1884      	adds	r4, r0, r2
 800112e:	62bc      	str	r4, [r7, #40]	; 0x28
 8001130:	eb41 0303 	adc.w	r3, r1, r3
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001136:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800113a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800113e:	4621      	mov	r1, r4
 8001140:	1889      	adds	r1, r1, r2
 8001142:	6239      	str	r1, [r7, #32]
 8001144:	4629      	mov	r1, r5
 8001146:	eb43 0101 	adc.w	r1, r3, r1
 800114a:	6279      	str	r1, [r7, #36]	; 0x24
 800114c:	f04f 0000 	mov.w	r0, #0
 8001150:	f04f 0100 	mov.w	r1, #0
 8001154:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001158:	4623      	mov	r3, r4
 800115a:	0a18      	lsrs	r0, r3, #8
 800115c:	462b      	mov	r3, r5
 800115e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001162:	462b      	mov	r3, r5
 8001164:	1219      	asrs	r1, r3, #8
 8001166:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001168:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800116c:	b21c      	sxth	r4, r3
 800116e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	012b      	lsls	r3, r5, #4
 800117c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001180:	0122      	lsls	r2, r4, #4
 8001182:	1884      	adds	r4, r0, r2
 8001184:	603c      	str	r4, [r7, #0]
 8001186:	eb41 0303 	adc.w	r3, r1, r3
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001190:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8001194:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 8001196:	4618      	mov	r0, r3
 8001198:	3770      	adds	r7, #112	; 0x70
 800119a:	46bd      	mov	sp, r7
 800119c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080011a0 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 80011a0:	b480      	push	{r7}
 80011a2:	b087      	sub	sp, #28
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 80011b2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	039a      	lsls	r2, r3, #14
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80011be:	051b      	lsls	r3, r3, #20
 80011c0:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80011c8:	4619      	mov	r1, r3
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	fb03 f301 	mul.w	r3, r3, r1
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80011d6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80011d8:	68fa      	ldr	r2, [r7, #12]
 80011da:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80011de:	4611      	mov	r1, r2
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	fb02 f201 	mul.w	r2, r2, r1
 80011e6:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80011e8:	68f9      	ldr	r1, [r7, #12]
 80011ea:	7f09      	ldrb	r1, [r1, #28]
 80011ec:	4608      	mov	r0, r1
 80011ee:	6979      	ldr	r1, [r7, #20]
 80011f0:	fb01 f100 	mul.w	r1, r1, r0
 80011f4:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80011f6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80011fa:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80011fe:	1292      	asrs	r2, r2, #10
 8001200:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800120a:	fb01 f202 	mul.w	r2, r1, r2
 800120e:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001212:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	13db      	asrs	r3, r3, #15
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	13d2      	asrs	r2, r2, #15
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	7e12      	ldrb	r2, [r2, #24]
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800123e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001246:	bfa8      	it	ge
 8001248:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 800124c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	131b      	asrs	r3, r3, #12
}
 8001252:	4618      	mov	r0, r3
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr

0800125e <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 800125e:	b580      	push	{r7, lr}
 8001260:	b08c      	sub	sp, #48	; 0x30
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	60b9      	str	r1, [r7, #8]
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001272:	2b60      	cmp	r3, #96	; 0x60
 8001274:	d007      	beq.n	8001286 <bmp280_read_fixed+0x28>
		if (humidity)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <bmp280_read_fixed+0x32>
 800128c:	2308      	movs	r3, #8
 800128e:	e000      	b.n	8001292 <bmp280_read_fixed+0x34>
 8001290:	2306      	movs	r3, #6
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f107 0218 	add.w	r2, r7, #24
 800129c:	21f7      	movs	r1, #247	; 0xf7
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff fba5 	bl	80009ee <read_data>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <bmp280_read_fixed+0x50>
		return false;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e038      	b.n	8001320 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 80012ae:	7e3b      	ldrb	r3, [r7, #24]
 80012b0:	031a      	lsls	r2, r3, #12
 80012b2:	7e7b      	ldrb	r3, [r7, #25]
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4313      	orrs	r3, r2
 80012b8:	7eba      	ldrb	r2, [r7, #26]
 80012ba:	0912      	lsrs	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	4313      	orrs	r3, r2
 80012c0:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 80012c2:	7efb      	ldrb	r3, [r7, #27]
 80012c4:	031a      	lsls	r2, r3, #12
 80012c6:	7f3b      	ldrb	r3, [r7, #28]
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	4313      	orrs	r3, r2
 80012cc:	7f7a      	ldrb	r2, [r7, #29]
 80012ce:	0912      	lsrs	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	4313      	orrs	r3, r2
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	461a      	mov	r2, r3
 80012dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff fd61 	bl	8000da6 <compensate_temperature>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	461a      	mov	r2, r3
 80012ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012f0:	68f8      	ldr	r0, [r7, #12]
 80012f2:	f7ff fd91 	bl	8000e18 <compensate_pressure>
 80012f6:	4602      	mov	r2, r0
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	601a      	str	r2, [r3, #0]

	if (humidity) {
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00d      	beq.n	800131e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001302:	7fbb      	ldrb	r3, [r7, #30]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	7ffa      	ldrb	r2, [r7, #31]
 8001308:	4313      	orrs	r3, r2
 800130a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	461a      	mov	r2, r3
 8001310:	6a39      	ldr	r1, [r7, #32]
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	f7ff ff44 	bl	80011a0 <compensate_humidity>
 8001318:	4602      	mov	r2, r0
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	601a      	str	r2, [r3, #0]
	}

	return true;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3730      	adds	r7, #48	; 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b088      	sub	sp, #32
 800132c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <MX_GPIO_Init+0xb8>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a27      	ldr	r2, [pc, #156]	; (80013e0 <MX_GPIO_Init+0xb8>)
 8001344:	f043 0304 	orr.w	r3, r3, #4
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <MX_GPIO_Init+0xb8>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0304 	and.w	r3, r3, #4
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b22      	ldr	r3, [pc, #136]	; (80013e0 <MX_GPIO_Init+0xb8>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a21      	ldr	r2, [pc, #132]	; (80013e0 <MX_GPIO_Init+0xb8>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b1f      	ldr	r3, [pc, #124]	; (80013e0 <MX_GPIO_Init+0xb8>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <MX_GPIO_Init+0xb8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <MX_GPIO_Init+0xb8>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MX_GPIO_Init+0xb8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	603b      	str	r3, [r7, #0]
 8001384:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2102      	movs	r1, #2
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f001 f975 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2108      	movs	r1, #8
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_GPIO_Init+0xbc>)
 8001398:	f001 f970 	bl	800267c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800139c:	2302      	movs	r3, #2
 800139e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 030c 	add.w	r3, r7, #12
 80013b0:	4619      	mov	r1, r3
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b6:	f000 fff7 	bl	80023a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013ba:	2308      	movs	r3, #8
 80013bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 030c 	add.w	r3, r7, #12
 80013ce:	4619      	mov	r1, r3
 80013d0:	4804      	ldr	r0, [pc, #16]	; (80013e4 <MX_GPIO_Init+0xbc>)
 80013d2:	f000 ffe9 	bl	80023a8 <HAL_GPIO_Init>

}
 80013d6:	bf00      	nop
 80013d8:	3720      	adds	r7, #32
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48000400 	.word	0x48000400

080013e8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <MX_I2C1_Init+0x74>)
 80013ee:	4a1c      	ldr	r2, [pc, #112]	; (8001460 <MX_I2C1_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_I2C1_Init+0x74>)
 80013f4:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <MX_I2C1_Init+0x7c>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_I2C1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_I2C1_Init+0x74>)
 8001400:	2201      	movs	r2, #1
 8001402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	; (800145c <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_I2C1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_I2C1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001422:	480e      	ldr	r0, [pc, #56]	; (800145c <MX_I2C1_Init+0x74>)
 8001424:	f001 f95c 	bl	80026e0 <HAL_I2C_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800142e:	f000 f9ad 	bl	800178c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4809      	ldr	r0, [pc, #36]	; (800145c <MX_I2C1_Init+0x74>)
 8001436:	f002 f98b 	bl	8003750 <HAL_I2CEx_ConfigAnalogFilter>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001440:	f000 f9a4 	bl	800178c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_I2C1_Init+0x74>)
 8001448:	f002 f9cd 	bl	80037e6 <HAL_I2CEx_ConfigDigitalFilter>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 f99b 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200006e8 	.word	0x200006e8
 8001460:	40005400 	.word	0x40005400
 8001464:	00702991 	.word	0x00702991

08001468 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_I2C3_Init+0x74>)
 800146e:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <MX_I2C3_Init+0x78>)
 8001470:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00702991;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_I2C3_Init+0x74>)
 8001474:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <MX_I2C3_Init+0x7c>)
 8001476:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_I2C3_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_I2C3_Init+0x74>)
 8001480:	2201      	movs	r2, #1
 8001482:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_I2C3_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_I2C3_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_I2C3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <MX_I2C3_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800149c:	4b0f      	ldr	r3, [pc, #60]	; (80014dc <MX_I2C3_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <MX_I2C3_Init+0x74>)
 80014a4:	f001 f91c 	bl	80026e0 <HAL_I2C_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014ae:	f000 f96d 	bl	800178c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <MX_I2C3_Init+0x74>)
 80014b6:	f002 f94b 	bl	8003750 <HAL_I2CEx_ConfigAnalogFilter>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014c0:	f000 f964 	bl	800178c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014c4:	2100      	movs	r1, #0
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <MX_I2C3_Init+0x74>)
 80014c8:	f002 f98d 	bl	80037e6 <HAL_I2CEx_ConfigDigitalFilter>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014d2:	f000 f95b 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000069c 	.word	0x2000069c
 80014e0:	40005c00 	.word	0x40005c00
 80014e4:	00702991 	.word	0x00702991

080014e8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08c      	sub	sp, #48	; 0x30
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a3d      	ldr	r2, [pc, #244]	; (80015fc <HAL_I2C_MspInit+0x114>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12a      	bne.n	8001560 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150a:	4b3d      	ldr	r3, [pc, #244]	; (8001600 <HAL_I2C_MspInit+0x118>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a3c      	ldr	r2, [pc, #240]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	61bb      	str	r3, [r7, #24]
 8001520:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001522:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001528:	2312      	movs	r3, #18
 800152a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800152c:	2301      	movs	r3, #1
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001534:	2304      	movs	r3, #4
 8001536:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 031c 	add.w	r3, r7, #28
 800153c:	4619      	mov	r1, r3
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f000 ff31 	bl	80023a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001546:	4b2e      	ldr	r3, [pc, #184]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154a:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <HAL_I2C_MspInit+0x118>)
 800154c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001550:	6593      	str	r3, [r2, #88]	; 0x58
 8001552:	4b2b      	ldr	r3, [pc, #172]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	617b      	str	r3, [r7, #20]
 800155c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800155e:	e049      	b.n	80015f4 <HAL_I2C_MspInit+0x10c>
  else if(i2cHandle->Instance==I2C3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_I2C_MspInit+0x11c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d144      	bne.n	80015f4 <HAL_I2C_MspInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <HAL_I2C_MspInit+0x118>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	4a24      	ldr	r2, [pc, #144]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a1e      	ldr	r2, [pc, #120]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <HAL_I2C_MspInit+0x118>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159e:	2312      	movs	r3, #18
 80015a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015aa:	2304      	movs	r3, #4
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	f107 031c 	add.w	r3, r7, #28
 80015b2:	4619      	mov	r1, r3
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f000 fef6 	bl	80023a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80015bc:	2310      	movs	r3, #16
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c0:	2312      	movs	r3, #18
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015cc:	2304      	movs	r3, #4
 80015ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <HAL_I2C_MspInit+0x120>)
 80015d8:	f000 fee6 	bl	80023a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_I2C_MspInit+0x118>)
 80015de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_I2C_MspInit+0x118>)
 80015e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e6:	6593      	str	r3, [r2, #88]	; 0x58
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_I2C_MspInit+0x118>)
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	68bb      	ldr	r3, [r7, #8]
}
 80015f4:	bf00      	nop
 80015f6:	3730      	adds	r7, #48	; 0x30
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40005400 	.word	0x40005400
 8001600:	40021000 	.word	0x40021000
 8001604:	40005c00 	.word	0x40005c00
 8001608:	48000400 	.word	0x48000400

0800160c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001610:	f000 fd8b 	bl	800212a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001614:	f000 f814 	bl	8001640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001618:	f7ff fe86 	bl	8001328 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800161c:	f000 fcd8 	bl	8001fd0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001620:	f7ff fee2 	bl	80013e8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001624:	f000 fab8 	bl	8001b98 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001628:	f004 fda0 	bl	800616c <MX_FATFS_Init>
  MX_I2C3_Init();
 800162c:	f7ff ff1c 	bl	8001468 <MX_I2C3_Init>
  MX_TIM6_Init();
 8001630:	f000 fc72 	bl	8001f18 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_Base_Start_IT(&htim6);

  ApplicationInit();
 8001634:	f7fe fff8 	bl	8000628 <ApplicationInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ApplicationTask();
 8001638:	f7ff f8ac 	bl	8000794 <ApplicationTask>
 800163c:	e7fc      	b.n	8001638 <main+0x2c>
	...

08001640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b0ac      	sub	sp, #176	; 0xb0
 8001644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001646:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800164a:	2244      	movs	r2, #68	; 0x44
 800164c:	2100      	movs	r1, #0
 800164e:	4618      	mov	r0, r3
 8001650:	f007 fe48 	bl	80092e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001654:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2254      	movs	r2, #84	; 0x54
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f007 fe3a 	bl	80092e4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001670:	f002 f906 	bl	8003880 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <SystemClock_Config+0x108>)
 8001676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800167a:	4a33      	ldr	r2, [pc, #204]	; (8001748 <SystemClock_Config+0x108>)
 800167c:	f023 0318 	bic.w	r3, r3, #24
 8001680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001684:	2314      	movs	r3, #20
 8001686:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001688:	2301      	movs	r3, #1
 800168a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800168c:	2301      	movs	r3, #1
 800168e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001698:	2360      	movs	r3, #96	; 0x60
 800169a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016a4:	2301      	movs	r3, #1
 80016a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016b0:	2328      	movs	r3, #40	; 0x28
 80016b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016b6:	2307      	movs	r3, #7
 80016b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 f94b 	bl	8003968 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80016d8:	f000 f858 	bl	800178c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2303      	movs	r3, #3
 80016e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80016f4:	2104      	movs	r1, #4
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fd56 	bl	80041a8 <HAL_RCC_ClockConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001702:	f000 f843 	bl	800178c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001706:	f44f 73a1 	mov.w	r3, #322	; 0x142
 800170a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001710:	2300      	movs	r3, #0
 8001712:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001714:	2300      	movs	r3, #0
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	4618      	mov	r0, r3
 800171c:	f002 ff7c 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001726:	f000 f831 	bl	800178c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800172a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800172e:	f002 f8c5 	bl	80038bc <HAL_PWREx_ControlVoltageScaling>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001738:	f000 f828 	bl	800178c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800173c:	f003 f960 	bl	8004a00 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001740:	bf00      	nop
 8001742:	37b0      	adds	r7, #176	; 0xb0
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000

0800174c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a09      	ldr	r2, [pc, #36]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800175e:	f000 fcfd 	bl	800215c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if(htim->Instance == TIM6) {
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a07      	ldr	r2, [pc, #28]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d104      	bne.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x2a>
	  u32usTick++;
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3301      	adds	r3, #1
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001774:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 8001776:	bf00      	nop
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40014400 	.word	0x40014400
 8001784:	40001000 	.word	0x40001000
 8001788:	200000bc 	.word	0x200000bc

0800178c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001790:	b672      	cpsid	i
}
 8001792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001794:	e7fe      	b.n	8001794 <Error_Handler+0x8>

08001796 <SD_MPU6050_Init>:
#define MPU6050_ACCE_SENS_4			((float) 8192)
#define MPU6050_ACCE_SENS_8			((float) 4096)
#define MPU6050_ACCE_SENS_16		((float) 2048)

SD_MPU6050_Result SD_MPU6050_Init(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Device DeviceNumber, SD_MPU6050_Accelerometer AccelerometerSensitivity, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b08a      	sub	sp, #40	; 0x28
 800179a:	af02      	add	r7, sp, #8
 800179c:	60f8      	str	r0, [r7, #12]
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	4611      	mov	r1, r2
 80017a2:	461a      	mov	r2, r3
 80017a4:	460b      	mov	r3, r1
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	4613      	mov	r3, r2
 80017aa:	71bb      	strb	r3, [r7, #6]
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80017ac:	2375      	movs	r3, #117	; 0x75
 80017ae:	76bb      	strb	r3, [r7, #26]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	61fb      	str	r3, [r7, #28]
	uint8_t d[2];


	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	701a      	strb	r2, [r3, #0]
	uint8_t address = DataStruct->Address;
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	76fb      	strb	r3, [r7, #27]

	/* Check if device is connected */
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80017c6:	7efb      	ldrb	r3, [r7, #27]
 80017c8:	b299      	uxth	r1, r3
 80017ca:	2305      	movs	r3, #5
 80017cc:	2202      	movs	r2, #2
 80017ce:	69f8      	ldr	r0, [r7, #28]
 80017d0:	f001 fc2e 	bl	8003030 <HAL_I2C_IsDeviceReady>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SD_MPU6050_Init+0x48>
	{
				return SD_MPU6050_Result_Error;
 80017da:	2301      	movs	r3, #1
 80017dc:	e04c      	b.n	8001878 <SD_MPU6050_Init+0xe2>
	}
	/* Check who am I */
	//------------------
		/* Send address */
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 80017de:	7efb      	ldrb	r3, [r7, #27]
 80017e0:	b299      	uxth	r1, r3
 80017e2:	f107 021a 	add.w	r2, r7, #26
 80017e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	2301      	movs	r3, #1
 80017ee:	69f8      	ldr	r0, [r7, #28]
 80017f0:	f001 f806 	bl	8002800 <HAL_I2C_Master_Transmit>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SD_MPU6050_Init+0x68>
		{
			return SD_MPU6050_Result_Error;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e03c      	b.n	8001878 <SD_MPU6050_Init+0xe2>
		}

		/* Receive multiple byte */
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 80017fe:	7efb      	ldrb	r3, [r7, #27]
 8001800:	b299      	uxth	r1, r3
 8001802:	f107 0219 	add.w	r2, r7, #25
 8001806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2301      	movs	r3, #1
 800180e:	69f8      	ldr	r0, [r7, #28]
 8001810:	f001 f8ea 	bl	80029e8 <HAL_I2C_Master_Receive>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <SD_MPU6050_Init+0x8c>
		{
			return SD_MPU6050_Result_Error;
 800181a:	2301      	movs	r3, #1
 800181c:	e02c      	b.n	8001878 <SD_MPU6050_Init+0xe2>

		/* Checking */
		while(temp != MPU6050_I_AM)
		{
				/* Return error */
				return SD_MPU6050_Result_DeviceInvalid;
 800181e:	2303      	movs	r3, #3
 8001820:	e02a      	b.n	8001878 <SD_MPU6050_Init+0xe2>
		while(temp != MPU6050_I_AM)
 8001822:	bf00      	nop
 8001824:	7e7b      	ldrb	r3, [r7, #25]
 8001826:	2b68      	cmp	r3, #104	; 0x68
 8001828:	d1f9      	bne.n	800181e <SD_MPU6050_Init+0x88>
	//------------------

	/* Wakeup MPU6050 */
	//------------------
		/* Format array to send */
		d[0] = MPU6050_PWR_MGMT_1;
 800182a:	236b      	movs	r3, #107	; 0x6b
 800182c:	753b      	strb	r3, [r7, #20]
		d[1] = 0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	757b      	strb	r3, [r7, #21]

		/* Try to transmit via I2C */
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8001832:	7efb      	ldrb	r3, [r7, #27]
 8001834:	b299      	uxth	r1, r3
 8001836:	f107 0214 	add.w	r2, r7, #20
 800183a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2302      	movs	r3, #2
 8001842:	69f8      	ldr	r0, [r7, #28]
 8001844:	f000 ffdc 	bl	8002800 <HAL_I2C_Master_Transmit>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SD_MPU6050_Init+0xbc>
		{
					return SD_MPU6050_Result_Error;
 800184e:	2301      	movs	r3, #1
 8001850:	e012      	b.n	8001878 <SD_MPU6050_Init+0xe2>
		}
	//------------------

	/* Set sample rate to 1kHz */
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8001852:	2207      	movs	r2, #7
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f812 	bl	8001880 <SD_MPU6050_SetDataRate>

	/* Config accelerometer */
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	461a      	mov	r2, r3
 8001860:	68b9      	ldr	r1, [r7, #8]
 8001862:	68f8      	ldr	r0, [r7, #12]
 8001864:	f000 f830 	bl	80018c8 <SD_MPU6050_SetAccelerometer>

	/* Config Gyroscope */
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 8001868:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800186c:	461a      	mov	r2, r3
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 f899 	bl	80019a8 <SD_MPU6050_SetGyroscope>

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <SD_MPU6050_SetDataRate>:

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af02      	add	r7, sp, #8
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	4613      	mov	r3, r2
 800188c:	71fb      	strb	r3, [r7, #7]
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	74fb      	strb	r3, [r7, #19]
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8001898:	2319      	movs	r3, #25
 800189a:	743b      	strb	r3, [r7, #16]
	d[1] = rate;
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	747b      	strb	r3, [r7, #17]

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 80018a0:	bf00      	nop
 80018a2:	7cfb      	ldrb	r3, [r7, #19]
 80018a4:	b299      	uxth	r1, r3
 80018a6:	f107 0210 	add.w	r2, r7, #16
 80018aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2302      	movs	r3, #2
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f000 ffa4 	bl	8002800 <HAL_I2C_Master_Transmit>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f1      	bne.n	80018a2 <SD_MPU6050_SetDataRate+0x22>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <SD_MPU6050_SetAccelerometer>:

SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	4613      	mov	r3, r2
 80018d4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 80018e0:	231c      	movs	r3, #28
 80018e2:	747b      	strb	r3, [r7, #17]

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80018e4:	bf00      	nop
 80018e6:	7cfb      	ldrb	r3, [r7, #19]
 80018e8:	b299      	uxth	r1, r3
 80018ea:	f107 0211 	add.w	r2, r7, #17
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	2301      	movs	r3, #1
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f000 ff82 	bl	8002800 <HAL_I2C_Master_Transmit>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f1      	bne.n	80018e6 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 8001902:	bf00      	nop
 8001904:	7cfb      	ldrb	r3, [r7, #19]
 8001906:	b299      	uxth	r1, r3
 8001908:	f107 0212 	add.w	r2, r7, #18
 800190c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2301      	movs	r3, #1
 8001914:	6978      	ldr	r0, [r7, #20]
 8001916:	f001 f867 	bl	80029e8 <HAL_I2C_Master_Receive>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f1      	bne.n	8001904 <SD_MPU6050_SetAccelerometer+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001920:	7cbb      	ldrb	r3, [r7, #18]
 8001922:	b25b      	sxtb	r3, r3
 8001924:	f023 0318 	bic.w	r3, r3, #24
 8001928:	b25a      	sxtb	r2, r3
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	b25b      	sxtb	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b25b      	sxtb	r3, r3
 8001934:	b2db      	uxtb	r3, r3
 8001936:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001938:	bf00      	nop
 800193a:	7cfb      	ldrb	r3, [r7, #19]
 800193c:	b299      	uxth	r1, r3
 800193e:	f107 0212 	add.w	r2, r7, #18
 8001942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2301      	movs	r3, #1
 800194a:	6978      	ldr	r0, [r7, #20]
 800194c:	f000 ff58 	bl	8002800 <HAL_I2C_Master_Transmit>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f1      	bne.n	800193a <SD_MPU6050_SetAccelerometer+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d81f      	bhi.n	800199c <SD_MPU6050_SetAccelerometer+0xd4>
 800195c:	a201      	add	r2, pc, #4	; (adr r2, 8001964 <SD_MPU6050_SetAccelerometer+0x9c>)
 800195e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001962:	bf00      	nop
 8001964:	08001975 	.word	0x08001975
 8001968:	0800197f 	.word	0x0800197f
 800196c:	08001989 	.word	0x08001989
 8001970:	08001993 	.word	0x08001993
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800197a:	609a      	str	r2, [r3, #8]
			break;
 800197c:	e00f      	b.n	800199e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_4G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001984:	609a      	str	r2, [r3, #8]
			break;
 8001986:	e00a      	b.n	800199e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800198e:	609a      	str	r2, [r3, #8]
			break;
 8001990:	e005      	b.n	800199e <SD_MPU6050_SetAccelerometer+0xd6>
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001998:	609a      	str	r2, [r3, #8]
			break;
 800199a:	e000      	b.n	800199e <SD_MPU6050_SetAccelerometer+0xd6>
		default:
			break;
 800199c:	bf00      	nop
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <SD_MPU6050_SetGyroscope>:

SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	4613      	mov	r3, r2
 80019b4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	617b      	str	r3, [r7, #20]
	uint8_t address = DataStruct->Address;
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	74fb      	strb	r3, [r7, #19]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 80019c0:	231b      	movs	r3, #27
 80019c2:	747b      	strb	r3, [r7, #17]

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 80019c4:	bf00      	nop
 80019c6:	7cfb      	ldrb	r3, [r7, #19]
 80019c8:	b299      	uxth	r1, r3
 80019ca:	f107 0211 	add.w	r2, r7, #17
 80019ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	2301      	movs	r3, #1
 80019d6:	6978      	ldr	r0, [r7, #20]
 80019d8:	f000 ff12 	bl	8002800 <HAL_I2C_Master_Transmit>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f1      	bne.n	80019c6 <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 80019e2:	bf00      	nop
 80019e4:	7cfb      	ldrb	r3, [r7, #19]
 80019e6:	b299      	uxth	r1, r3
 80019e8:	f107 0212 	add.w	r2, r7, #18
 80019ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2301      	movs	r3, #1
 80019f4:	6978      	ldr	r0, [r7, #20]
 80019f6:	f000 fff7 	bl	80029e8 <HAL_I2C_Master_Receive>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f1      	bne.n	80019e4 <SD_MPU6050_SetGyroscope+0x3c>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 8001a00:	7cbb      	ldrb	r3, [r7, #18]
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	f023 0318 	bic.w	r3, r3, #24
 8001a08:	b25a      	sxtb	r2, r3
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	74bb      	strb	r3, [r7, #18]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8001a18:	bf00      	nop
 8001a1a:	7cfb      	ldrb	r3, [r7, #19]
 8001a1c:	b299      	uxth	r1, r3
 8001a1e:	f107 0212 	add.w	r2, r7, #18
 8001a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f000 fee8 	bl	8002800 <HAL_I2C_Master_Transmit>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f1      	bne.n	8001a1a <SD_MPU6050_SetGyroscope+0x72>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d81b      	bhi.n	8001a74 <SD_MPU6050_SetGyroscope+0xcc>
 8001a3c:	a201      	add	r2, pc, #4	; (adr r2, 8001a44 <SD_MPU6050_SetGyroscope+0x9c>)
 8001a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a42:	bf00      	nop
 8001a44:	08001a55 	.word	0x08001a55
 8001a48:	08001a5d 	.word	0x08001a5d
 8001a4c:	08001a65 	.word	0x08001a65
 8001a50:	08001a6d 	.word	0x08001a6d
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <SD_MPU6050_SetGyroscope+0xd8>)
 8001a58:	605a      	str	r2, [r3, #4]
				break;
 8001a5a:	e00c      	b.n	8001a76 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_500s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <SD_MPU6050_SetGyroscope+0xdc>)
 8001a60:	605a      	str	r2, [r3, #4]
				break;
 8001a62:	e008      	b.n	8001a76 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4a08      	ldr	r2, [pc, #32]	; (8001a88 <SD_MPU6050_SetGyroscope+0xe0>)
 8001a68:	605a      	str	r2, [r3, #4]
				break;
 8001a6a:	e004      	b.n	8001a76 <SD_MPU6050_SetGyroscope+0xce>
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <SD_MPU6050_SetGyroscope+0xe4>)
 8001a70:	605a      	str	r2, [r3, #4]
				break;
 8001a72:	e000      	b.n	8001a76 <SD_MPU6050_SetGyroscope+0xce>
			default:
				break;
 8001a74:	bf00      	nop
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	3bfa232d 	.word	0x3bfa232d
 8001a84:	3c7a232d 	.word	0x3c7a232d
 8001a88:	3cf9c190 	.word	0x3cf9c190
 8001a8c:	3d79c190 	.word	0x3d79c190

08001a90 <SD_MPU6050_ReadAll>:

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
SD_MPU6050_Result SD_MPU6050_ReadAll(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
	uint8_t data[14];
	int16_t temp;
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8001a9a:	233b      	movs	r3, #59	; 0x3b
 8001a9c:	73fb      	strb	r3, [r7, #15]
	I2C_HandleTypeDef* Handle = I2Cx;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t address = DataStruct->Address;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	/* Read full raw data, 14bytes */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8001aaa:	bf00      	nop
 8001aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ab0:	b299      	uxth	r1, r3
 8001ab2:	f107 020f 	add.w	r2, r7, #15
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	9300      	str	r3, [sp, #0]
 8001abc:	2301      	movs	r3, #1
 8001abe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ac0:	f000 fe9e 	bl	8002800 <HAL_I2C_Master_Transmit>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <SD_MPU6050_ReadAll+0x1c>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 14, 1000) != HAL_OK);
 8001aca:	bf00      	nop
 8001acc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	f107 0210 	add.w	r2, r7, #16
 8001ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	230e      	movs	r3, #14
 8001ade:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001ae0:	f000 ff82 	bl	80029e8 <HAL_I2C_Master_Receive>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <SD_MPU6050_ReadAll+0x3c>

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8001aea:	7c3b      	ldrb	r3, [r7, #16]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	7c7b      	ldrb	r3, [r7, #17]
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 8001afc:	7cbb      	ldrb	r3, [r7, #18]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	7cfb      	ldrb	r3, [r7, #19]
 8001b04:	b21b      	sxth	r3, r3
 8001b06:	4313      	orrs	r3, r2
 8001b08:	b21a      	sxth	r2, r3
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 8001b0e:	7d3b      	ldrb	r3, [r7, #20]
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b21a      	sxth	r2, r3
 8001b14:	7d7b      	ldrb	r3, [r7, #21]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8001b20:	7dbb      	ldrb	r3, [r7, #22]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	b21a      	sxth	r2, r3
 8001b26:	7dfb      	ldrb	r3, [r7, #23]
 8001b28:	b21b      	sxth	r3, r3
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	843b      	strh	r3, [r7, #32]
	DataStruct->Temperature = (float)((float)((int16_t)temp) / (float)340.0 + (float)36.53);
 8001b2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b3a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001b90 <SD_MPU6050_ReadAll+0x100>
 8001b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001b94 <SD_MPU6050_ReadAll+0x104>
 8001b46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t)(data[8] << 8 | data[9]);
 8001b50:	7e3b      	ldrb	r3, [r7, #24]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b21a      	sxth	r2, r3
 8001b56:	7e7b      	ldrb	r3, [r7, #25]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[10] << 8 | data[11]);
 8001b62:	7ebb      	ldrb	r3, [r7, #26]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	7efb      	ldrb	r3, [r7, #27]
 8001b6a:	b21b      	sxth	r3, r3
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	b21a      	sxth	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[12] << 8 | data[13]);
 8001b74:	7f3b      	ldrb	r3, [r7, #28]
 8001b76:	021b      	lsls	r3, r3, #8
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	7f7b      	ldrb	r3, [r7, #29]
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21a      	sxth	r2, r3
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3728      	adds	r7, #40	; 0x28
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	43aa0000 	.word	0x43aa0000
 8001b94:	42121eb8 	.word	0x42121eb8

08001b98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001b9c:	4b1b      	ldr	r3, [pc, #108]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <MX_SPI1_Init+0x78>)
 8001ba0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001ba4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ba8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001baa:	4b18      	ldr	r3, [pc, #96]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bb0:	4b16      	ldr	r3, [pc, #88]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bb2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001bb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bce:	2210      	movs	r2, #16
 8001bd0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001be6:	2207      	movs	r2, #7
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bf2:	2208      	movs	r2, #8
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <MX_SPI1_Init+0x74>)
 8001bf8:	f003 f804 	bl	8004c04 <HAL_SPI_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001c02:	f7ff fdc3 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000734 	.word	0x20000734
 8001c10:	40013000 	.word	0x40013000

08001c14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08a      	sub	sp, #40	; 0x28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a25      	ldr	r2, [pc, #148]	; (8001cc8 <HAL_SPI_MspInit+0xb4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d144      	bne.n	8001cc0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c36:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c3a:	4a24      	ldr	r2, [pc, #144]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c40:	6613      	str	r3, [r2, #96]	; 0x60
 8001c42:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b19      	ldr	r3, [pc, #100]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6a:	4a18      	ldr	r2, [pc, #96]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c6c:	f043 0302 	orr.w	r3, r3, #2
 8001c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <HAL_SPI_MspInit+0xb8>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001c7e:	2360      	movs	r3, #96	; 0x60
 8001c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c8e:	2305      	movs	r3, #5
 8001c90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f000 fb84 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ca0:	2320      	movs	r3, #32
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb0:	2305      	movs	r3, #5
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <HAL_SPI_MspInit+0xbc>)
 8001cbc:	f000 fb74 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40013000 	.word	0x40013000
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48000400 	.word	0x48000400

08001cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cda:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <HAL_MspInit+0x44>)
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cde:	4a0e      	ldr	r2, [pc, #56]	; (8001d18 <HAL_MspInit+0x44>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <HAL_MspInit+0x44>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_MspInit+0x44>)
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	4a08      	ldr	r2, [pc, #32]	; (8001d18 <HAL_MspInit+0x44>)
 8001cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_MspInit+0x44>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08c      	sub	sp, #48	; 0x30
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM16 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	2019      	movs	r0, #25
 8001d32:	f000 fb0f 	bl	8002354 <HAL_NVIC_SetPriority>

  /* Enable the TIM16 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d36:	2019      	movs	r0, #25
 8001d38:	f000 fb28 	bl	800238c <HAL_NVIC_EnableIRQ>
  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_InitTick+0x9c>)
 8001d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_InitTick+0x9c>)
 8001d42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d46:	6613      	str	r3, [r2, #96]	; 0x60
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_InitTick+0x9c>)
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d54:	f107 0210 	add.w	r2, r7, #16
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fbc8 	bl	80044f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d64:	f002 fbb0 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 8001d68:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6c:	4a13      	ldr	r2, [pc, #76]	; (8001dbc <HAL_InitTick+0xa0>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	0c9b      	lsrs	r3, r3, #18
 8001d74:	3b01      	subs	r3, #1
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001d78:	4b11      	ldr	r3, [pc, #68]	; (8001dc0 <HAL_InitTick+0xa4>)
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <HAL_InitTick+0xa8>)
 8001d7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_InitTick+0xa4>)
 8001d80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d84:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001d86:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <HAL_InitTick+0xa4>)
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <HAL_InitTick+0xa4>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_InitTick+0xa4>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim16) == HAL_OK)
 8001d98:	4809      	ldr	r0, [pc, #36]	; (8001dc0 <HAL_InitTick+0xa4>)
 8001d9a:	f003 fb49 	bl	8005430 <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim16);
 8001da4:	4806      	ldr	r0, [pc, #24]	; (8001dc0 <HAL_InitTick+0xa4>)
 8001da6:	f003 fb9b 	bl	80054e0 <HAL_TIM_Base_Start_IT>
 8001daa:	4603      	mov	r3, r0
 8001dac:	e000      	b.n	8001db0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3730      	adds	r7, #48	; 0x30
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	20000798 	.word	0x20000798
 8001dc4:	40014400 	.word	0x40014400

08001dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <NMI_Handler+0x4>

08001dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd2:	e7fe      	b.n	8001dd2 <HardFault_Handler+0x4>

08001dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <MemManage_Handler+0x4>

08001dda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dde:	e7fe      	b.n	8001dde <BusFault_Handler+0x4>

08001de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <UsageFault_Handler+0x4>

08001de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e26:	f003 fbaf 	bl	8005588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000798 	.word	0x20000798

08001e34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <TIM6_DAC_IRQHandler+0x10>)
 8001e3a:	f003 fba5 	bl	8005588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200007e4 	.word	0x200007e4

08001e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e50:	4a14      	ldr	r2, [pc, #80]	; (8001ea4 <_sbrk+0x5c>)
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <_sbrk+0x60>)
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <_sbrk+0x64>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d102      	bne.n	8001e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_sbrk+0x64>)
 8001e66:	4a12      	ldr	r2, [pc, #72]	; (8001eb0 <_sbrk+0x68>)
 8001e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d207      	bcs.n	8001e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e78:	f007 fa0a 	bl	8009290 <__errno>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	220c      	movs	r2, #12
 8001e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e86:	e009      	b.n	8001e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <_sbrk+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <_sbrk+0x64>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <_sbrk+0x64>)
 8001e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20010000 	.word	0x20010000
 8001ea8:	00000400 	.word	0x00000400
 8001eac:	200000c0 	.word	0x200000c0
 8001eb0:	20000d38 	.word	0x20000d38

08001eb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001eb8:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <SystemInit+0x5c>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <SystemInit+0x5c>)
 8001ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <SystemInit+0x60>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <SystemInit+0x60>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <SystemInit+0x60>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001eda:	4b0e      	ldr	r3, [pc, #56]	; (8001f14 <SystemInit+0x60>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a0d      	ldr	r2, [pc, #52]	; (8001f14 <SystemInit+0x60>)
 8001ee0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ee4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <SystemInit+0x60>)
 8001eec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ef0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <SystemInit+0x60>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <SystemInit+0x60>)
 8001ef8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SystemInit+0x60>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	e000ed00 	.word	0xe000ed00
 8001f14:	40021000 	.word	0x40021000

08001f18 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001f28:	4b14      	ldr	r3, [pc, #80]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f2a:	4a15      	ldr	r2, [pc, #84]	; (8001f80 <MX_TIM6_Init+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80-1;
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f30:	224f      	movs	r2, #79	; 0x4f
 8001f32:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001f46:	480d      	ldr	r0, [pc, #52]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f48:	f003 fa72 	bl	8005430 <HAL_TIM_Base_Init>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001f52:	f7ff fc1b 	bl	800178c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001f5e:	1d3b      	adds	r3, r7, #4
 8001f60:	4619      	mov	r1, r3
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <MX_TIM6_Init+0x64>)
 8001f64:	f003 fcbc 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001f6e:	f7ff fc0d 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	200007e4 	.word	0x200007e4
 8001f80:	40001000 	.word	0x40001000

08001f84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a0d      	ldr	r2, [pc, #52]	; (8001fc8 <HAL_TIM_Base_MspInit+0x44>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d113      	bne.n	8001fbe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f96:	4b0d      	ldr	r3, [pc, #52]	; (8001fcc <HAL_TIM_Base_MspInit+0x48>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a0c      	ldr	r2, [pc, #48]	; (8001fcc <HAL_TIM_Base_MspInit+0x48>)
 8001f9c:	f043 0310 	orr.w	r3, r3, #16
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <HAL_TIM_Base_MspInit+0x48>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f003 0310 	and.w	r3, r3, #16
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2036      	movs	r0, #54	; 0x36
 8001fb4:	f000 f9ce 	bl	8002354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001fb8:	2036      	movs	r0, #54	; 0x36
 8001fba:	f000 f9e7 	bl	800238c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40001000 	.word	0x40001000
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8001fd6:	4a15      	ldr	r2, [pc, #84]	; (800202c <MX_USART2_UART_Init+0x5c>)
 8001fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8001fdc:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8001ff6:	220c      	movs	r2, #12
 8001ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002000:	4b09      	ldr	r3, [pc, #36]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8002008:	2200      	movs	r2, #0
 800200a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <MX_USART2_UART_Init+0x58>)
 800200e:	2200      	movs	r2, #0
 8002010:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002012:	4805      	ldr	r0, [pc, #20]	; (8002028 <MX_USART2_UART_Init+0x58>)
 8002014:	f003 fce8 	bl	80059e8 <HAL_UART_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800201e:	f7ff fbb5 	bl	800178c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000830 	.word	0x20000830
 800202c:	40004400 	.word	0x40004400

08002030 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a20      	ldr	r2, [pc, #128]	; (80020d0 <HAL_UART_MspInit+0xa0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d13a      	bne.n	80020c8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <HAL_UART_MspInit+0xa4>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4a1f      	ldr	r2, [pc, #124]	; (80020d4 <HAL_UART_MspInit+0xa4>)
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
 800205e:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_UART_MspInit+0xa4>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_UART_MspInit+0xa4>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <HAL_UART_MspInit+0xa4>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_UART_MspInit+0xa4>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002082:	2304      	movs	r3, #4
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208e:	2303      	movs	r3, #3
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002092:	2307      	movs	r3, #7
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020a0:	f000 f982 	bl	80023a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80020a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80020b6:	2303      	movs	r3, #3
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f000 f970 	bl	80023a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40004400 	.word	0x40004400
 80020d4:	40021000 	.word	0x40021000

080020d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020dc:	f7ff feea 	bl	8001eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020e2:	e003      	b.n	80020ec <LoopCopyDataInit>

080020e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020ea:	3104      	adds	r1, #4

080020ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020ec:	480a      	ldr	r0, [pc, #40]	; (8002118 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020ee:	4b0b      	ldr	r3, [pc, #44]	; (800211c <LoopForever+0xe>)
	adds	r2, r0, r1
 80020f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020f4:	d3f6      	bcc.n	80020e4 <CopyDataInit>
	ldr	r2, =_sbss
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <LoopForever+0x12>)
	b	LoopFillZerobss
 80020f8:	e002      	b.n	8002100 <LoopFillZerobss>

080020fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80020fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80020fc:	f842 3b04 	str.w	r3, [r2], #4

08002100 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002100:	4b08      	ldr	r3, [pc, #32]	; (8002124 <LoopForever+0x16>)
	cmp	r2, r3
 8002102:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002104:	d3f9      	bcc.n	80020fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002106:	f007 f8c9 	bl	800929c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800210a:	f7ff fa7f 	bl	800160c <main>

0800210e <LoopForever>:

LoopForever:
    b LoopForever
 800210e:	e7fe      	b.n	800210e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002110:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8002114:	08009d20 	.word	0x08009d20
	ldr	r0, =_sdata
 8002118:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800211c:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8002120:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8002124:	20000d38 	.word	0x20000d38

08002128 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002128:	e7fe      	b.n	8002128 <ADC1_IRQHandler>

0800212a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002130:	2300      	movs	r3, #0
 8002132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002134:	2003      	movs	r0, #3
 8002136:	f000 f902 	bl	800233e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800213a:	2000      	movs	r0, #0
 800213c:	f7ff fdee 	bl	8001d1c <HAL_InitTick>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	71fb      	strb	r3, [r7, #7]
 800214a:	e001      	b.n	8002150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800214c:	f7ff fdc2 	bl	8001cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002150:	79fb      	ldrb	r3, [r7, #7]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_IncTick+0x20>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	461a      	mov	r2, r3
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_IncTick+0x24>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4413      	add	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_IncTick+0x24>)
 800216e:	6013      	str	r3, [r2, #0]
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000008 	.word	0x20000008
 8002180:	200008b4 	.word	0x200008b4

08002184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return uwTick;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_GetTick+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	200008b4 	.word	0x200008b4

0800219c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff ffee 	bl	8002184 <HAL_GetTick>
 80021a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b4:	d005      	beq.n	80021c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_Delay+0x44>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4413      	add	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021c2:	bf00      	nop
 80021c4:	f7ff ffde 	bl	8002184 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d8f7      	bhi.n	80021c4 <HAL_Delay+0x28>
  {
  }
}
 80021d4:	bf00      	nop
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000008 	.word	0x20000008

080021e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f003 0307 	and.w	r3, r3, #7
 80021f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021f4:	4b0c      	ldr	r3, [pc, #48]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002200:	4013      	ands	r3, r2
 8002202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800220c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002210:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002216:	4a04      	ldr	r2, [pc, #16]	; (8002228 <__NVIC_SetPriorityGrouping+0x44>)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	60d3      	str	r3, [r2, #12]
}
 800221c:	bf00      	nop
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <__NVIC_GetPriorityGrouping+0x18>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	0a1b      	lsrs	r3, r3, #8
 8002236:	f003 0307 	and.w	r3, r3, #7
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	2b00      	cmp	r3, #0
 8002258:	db0b      	blt.n	8002272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 021f 	and.w	r2, r3, #31
 8002260:	4907      	ldr	r1, [pc, #28]	; (8002280 <__NVIC_EnableIRQ+0x38>)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	095b      	lsrs	r3, r3, #5
 8002268:	2001      	movs	r0, #1
 800226a:	fa00 f202 	lsl.w	r2, r0, r2
 800226e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000e100 	.word	0xe000e100

08002284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	6039      	str	r1, [r7, #0]
 800228e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002294:	2b00      	cmp	r3, #0
 8002296:	db0a      	blt.n	80022ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	490c      	ldr	r1, [pc, #48]	; (80022d0 <__NVIC_SetPriority+0x4c>)
 800229e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a2:	0112      	lsls	r2, r2, #4
 80022a4:	b2d2      	uxtb	r2, r2
 80022a6:	440b      	add	r3, r1
 80022a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ac:	e00a      	b.n	80022c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	4908      	ldr	r1, [pc, #32]	; (80022d4 <__NVIC_SetPriority+0x50>)
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	3b04      	subs	r3, #4
 80022bc:	0112      	lsls	r2, r2, #4
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	440b      	add	r3, r1
 80022c2:	761a      	strb	r2, [r3, #24]
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000e100 	.word	0xe000e100
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f1c3 0307 	rsb	r3, r3, #7
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	bf28      	it	cs
 80022f6:	2304      	movcs	r3, #4
 80022f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2b06      	cmp	r3, #6
 8002300:	d902      	bls.n	8002308 <NVIC_EncodePriority+0x30>
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3b03      	subs	r3, #3
 8002306:	e000      	b.n	800230a <NVIC_EncodePriority+0x32>
 8002308:	2300      	movs	r3, #0
 800230a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43da      	mvns	r2, r3
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	401a      	ands	r2, r3
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	43d9      	mvns	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	4313      	orrs	r3, r2
         );
}
 8002332:	4618      	mov	r0, r3
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ff4c 	bl	80021e4 <__NVIC_SetPriorityGrouping>
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002366:	f7ff ff61 	bl	800222c <__NVIC_GetPriorityGrouping>
 800236a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68b9      	ldr	r1, [r7, #8]
 8002370:	6978      	ldr	r0, [r7, #20]
 8002372:	f7ff ffb1 	bl	80022d8 <NVIC_EncodePriority>
 8002376:	4602      	mov	r2, r0
 8002378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff80 	bl	8002284 <__NVIC_SetPriority>
}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff54 	bl	8002248 <__NVIC_EnableIRQ>
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023b6:	e148      	b.n	800264a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	2101      	movs	r1, #1
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	fa01 f303 	lsl.w	r3, r1, r3
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 813a 	beq.w	8002644 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d00b      	beq.n	80023f0 <HAL_GPIO_Init+0x48>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023e4:	2b11      	cmp	r3, #17
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2b12      	cmp	r3, #18
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0201 	and.w	r2, r3, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	2203      	movs	r2, #3
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	4013      	ands	r3, r2
 8002468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b02      	cmp	r3, #2
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0xea>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b12      	cmp	r3, #18
 8002490:	d123      	bne.n	80024da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	08da      	lsrs	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3208      	adds	r2, #8
 800249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800249e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	220f      	movs	r2, #15
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	43db      	mvns	r3, r3
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4013      	ands	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	691a      	ldr	r2, [r3, #16]
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	08da      	lsrs	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3208      	adds	r2, #8
 80024d4:	6939      	ldr	r1, [r7, #16]
 80024d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	2203      	movs	r2, #3
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43db      	mvns	r3, r3
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	4013      	ands	r3, r2
 80024f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 0203 	and.w	r2, r3, #3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	4313      	orrs	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	f000 8094 	beq.w	8002644 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251c:	4b52      	ldr	r3, [pc, #328]	; (8002668 <HAL_GPIO_Init+0x2c0>)
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	4a51      	ldr	r2, [pc, #324]	; (8002668 <HAL_GPIO_Init+0x2c0>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6613      	str	r3, [r2, #96]	; 0x60
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <HAL_GPIO_Init+0x2c0>)
 800252a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002534:	4a4d      	ldr	r2, [pc, #308]	; (800266c <HAL_GPIO_Init+0x2c4>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3302      	adds	r3, #2
 800253c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	f003 0303 	and.w	r3, r3, #3
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800255e:	d00d      	beq.n	800257c <HAL_GPIO_Init+0x1d4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a43      	ldr	r2, [pc, #268]	; (8002670 <HAL_GPIO_Init+0x2c8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d007      	beq.n	8002578 <HAL_GPIO_Init+0x1d0>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a42      	ldr	r2, [pc, #264]	; (8002674 <HAL_GPIO_Init+0x2cc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d101      	bne.n	8002574 <HAL_GPIO_Init+0x1cc>
 8002570:	2302      	movs	r3, #2
 8002572:	e004      	b.n	800257e <HAL_GPIO_Init+0x1d6>
 8002574:	2307      	movs	r3, #7
 8002576:	e002      	b.n	800257e <HAL_GPIO_Init+0x1d6>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_GPIO_Init+0x1d6>
 800257c:	2300      	movs	r3, #0
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	f002 0203 	and.w	r2, r2, #3
 8002584:	0092      	lsls	r2, r2, #2
 8002586:	4093      	lsls	r3, r2
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800258e:	4937      	ldr	r1, [pc, #220]	; (800266c <HAL_GPIO_Init+0x2c4>)
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	089b      	lsrs	r3, r3, #2
 8002594:	3302      	adds	r3, #2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800259c:	4b36      	ldr	r3, [pc, #216]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	4013      	ands	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025c0:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80025c6:	4b2c      	ldr	r3, [pc, #176]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	4013      	ands	r3, r2
 80025d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025ea:	4a23      	ldr	r2, [pc, #140]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025f0:	4b21      	ldr	r3, [pc, #132]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002614:	4a18      	ldr	r2, [pc, #96]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800261a:	4b17      	ldr	r3, [pc, #92]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <HAL_GPIO_Init+0x2d0>)
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3301      	adds	r3, #1
 8002648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	f47f aeaf 	bne.w	80023b8 <HAL_GPIO_Init+0x10>
  }
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	371c      	adds	r7, #28
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000
 800266c:	40010000 	.word	0x40010000
 8002670:	48000400 	.word	0x48000400
 8002674:	48000800 	.word	0x48000800
 8002678:	40010400 	.word	0x40010400

0800267c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	807b      	strh	r3, [r7, #2]
 8002688:	4613      	mov	r3, r2
 800268a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800268c:	787b      	ldrb	r3, [r7, #1]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002692:	887a      	ldrh	r2, [r7, #2]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4013      	ands	r3, r2
 80026c4:	041a      	lsls	r2, r3, #16
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	43d9      	mvns	r1, r3
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	400b      	ands	r3, r1
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	619a      	str	r2, [r3, #24]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d101      	bne.n	80026f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e081      	b.n	80027f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d106      	bne.n	800270c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7fe feee 	bl	80014e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2224      	movs	r2, #36	; 0x24
 8002710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0201 	bic.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002730:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002740:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	e006      	b.n	8002768 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002766:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2b02      	cmp	r3, #2
 800276e:	d104      	bne.n	800277a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002778:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800278c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800279c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	ea42 0103 	orr.w	r1, r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	021a      	lsls	r2, r3, #8
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69d9      	ldr	r1, [r3, #28]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1a      	ldr	r2, [r3, #32]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f042 0201 	orr.w	r2, r2, #1
 80027d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2220      	movs	r2, #32
 80027e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b20      	cmp	r3, #32
 800281e:	f040 80da 	bne.w	80029d6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002828:	2b01      	cmp	r3, #1
 800282a:	d101      	bne.n	8002830 <HAL_I2C_Master_Transmit+0x30>
 800282c:	2302      	movs	r3, #2
 800282e:	e0d3      	b.n	80029d8 <HAL_I2C_Master_Transmit+0x1d8>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002838:	f7ff fca4 	bl	8002184 <HAL_GetTick>
 800283c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2319      	movs	r3, #25
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800284a:	68f8      	ldr	r0, [r7, #12]
 800284c:	f000 fdc4 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e0be      	b.n	80029d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2221      	movs	r2, #33	; 0x21
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2210      	movs	r2, #16
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	893a      	ldrh	r2, [r7, #8]
 800287a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002886:	b29b      	uxth	r3, r3
 8002888:	2bff      	cmp	r3, #255	; 0xff
 800288a:	d90e      	bls.n	80028aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	22ff      	movs	r2, #255	; 0xff
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002896:	b2da      	uxtb	r2, r3
 8002898:	8979      	ldrh	r1, [r7, #10]
 800289a:	4b51      	ldr	r3, [pc, #324]	; (80029e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 ff26 	bl	80036f4 <I2C_TransferConfig>
 80028a8:	e06c      	b.n	8002984 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	8979      	ldrh	r1, [r7, #10]
 80028bc:	4b48      	ldr	r3, [pc, #288]	; (80029e0 <HAL_I2C_Master_Transmit+0x1e0>)
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 ff15 	bl	80036f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80028ca:	e05b      	b.n	8002984 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	6a39      	ldr	r1, [r7, #32]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fdc1 	bl	8003458 <I2C_WaitOnTXISFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e07b      	b.n	80029d8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c5a      	adds	r2, r3, #1
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	b29a      	uxth	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d034      	beq.n	8002984 <HAL_I2C_Master_Transmit+0x184>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	d130      	bne.n	8002984 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	6a3b      	ldr	r3, [r7, #32]
 8002928:	2200      	movs	r2, #0
 800292a:	2180      	movs	r1, #128	; 0x80
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fd53 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e04d      	b.n	80029d8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2bff      	cmp	r3, #255	; 0xff
 8002944:	d90e      	bls.n	8002964 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	22ff      	movs	r2, #255	; 0xff
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	b2da      	uxtb	r2, r3
 8002952:	8979      	ldrh	r1, [r7, #10]
 8002954:	2300      	movs	r3, #0
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fec9 	bl	80036f4 <I2C_TransferConfig>
 8002962:	e00f      	b.n	8002984 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002968:	b29a      	uxth	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	b2da      	uxtb	r2, r3
 8002974:	8979      	ldrh	r1, [r7, #10]
 8002976:	2300      	movs	r3, #0
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 feb8 	bl	80036f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d19e      	bne.n	80028cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	6a39      	ldr	r1, [r7, #32]
 8002992:	68f8      	ldr	r0, [r7, #12]
 8002994:	f000 fda0 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e01a      	b.n	80029d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2220      	movs	r2, #32
 80029a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_I2C_Master_Transmit+0x1e4>)
 80029b6:	400b      	ands	r3, r1
 80029b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3718      	adds	r7, #24
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	80002000 	.word	0x80002000
 80029e4:	fe00e800 	.word	0xfe00e800

080029e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	461a      	mov	r2, r3
 80029f4:	460b      	mov	r3, r1
 80029f6:	817b      	strh	r3, [r7, #10]
 80029f8:	4613      	mov	r3, r2
 80029fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	f040 80db 	bne.w	8002bc0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_I2C_Master_Receive+0x30>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0d4      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x1da>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a20:	f7ff fbb0 	bl	8002184 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2319      	movs	r3, #25
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fcd0 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0bf      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2222      	movs	r2, #34	; 0x22
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	893a      	ldrh	r2, [r7, #8]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2bff      	cmp	r3, #255	; 0xff
 8002a72:	d90e      	bls.n	8002a92 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	8979      	ldrh	r1, [r7, #10]
 8002a82:	4b52      	ldr	r3, [pc, #328]	; (8002bcc <HAL_I2C_Master_Receive+0x1e4>)
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fe32 	bl	80036f4 <I2C_TransferConfig>
 8002a90:	e06d      	b.n	8002b6e <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	8979      	ldrh	r1, [r7, #10]
 8002aa4:	4b49      	ldr	r3, [pc, #292]	; (8002bcc <HAL_I2C_Master_Receive+0x1e4>)
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fe21 	bl	80036f4 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002ab2:	e05c      	b.n	8002b6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	6a39      	ldr	r1, [r7, #32]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fd49 	bl	8003550 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e07c      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d034      	beq.n	8002b6e <HAL_I2C_Master_Receive+0x186>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d130      	bne.n	8002b6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	2200      	movs	r2, #0
 8002b14:	2180      	movs	r1, #128	; 0x80
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 fc5e 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e04d      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	2bff      	cmp	r3, #255	; 0xff
 8002b2e:	d90e      	bls.n	8002b4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	22ff      	movs	r2, #255	; 0xff
 8002b34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	8979      	ldrh	r1, [r7, #10]
 8002b3e:	2300      	movs	r3, #0
 8002b40:	9300      	str	r3, [sp, #0]
 8002b42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fdd4 	bl	80036f4 <I2C_TransferConfig>
 8002b4c:	e00f      	b.n	8002b6e <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	8979      	ldrh	r1, [r7, #10]
 8002b60:	2300      	movs	r3, #0
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 fdc3 	bl	80036f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d19d      	bne.n	8002ab4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	6a39      	ldr	r1, [r7, #32]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fcab 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e01a      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2220      	movs	r2, #32
 8002b92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6859      	ldr	r1, [r3, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_I2C_Master_Receive+0x1e8>)
 8002ba0:	400b      	ands	r3, r1
 8002ba2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	80002400 	.word	0x80002400
 8002bd0:	fe00e800 	.word	0xfe00e800

08002bd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b088      	sub	sp, #32
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	4608      	mov	r0, r1
 8002bde:	4611      	mov	r1, r2
 8002be0:	461a      	mov	r2, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	817b      	strh	r3, [r7, #10]
 8002be6:	460b      	mov	r3, r1
 8002be8:	813b      	strh	r3, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	f040 80f9 	bne.w	8002dee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <HAL_I2C_Mem_Write+0x34>
 8002c02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c0e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0ed      	b.n	8002df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_I2C_Mem_Write+0x4e>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e0e6      	b.n	8002df0 <HAL_I2C_Mem_Write+0x21c>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c2a:	f7ff faab 	bl	8002184 <HAL_GetTick>
 8002c2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	2319      	movs	r3, #25
 8002c36:	2201      	movs	r2, #1
 8002c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 fbcb 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0d1      	b.n	8002df0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2221      	movs	r2, #33	; 0x21
 8002c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2240      	movs	r2, #64	; 0x40
 8002c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c74:	88f8      	ldrh	r0, [r7, #6]
 8002c76:	893a      	ldrh	r2, [r7, #8]
 8002c78:	8979      	ldrh	r1, [r7, #10]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	4603      	mov	r3, r0
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fadb 	bl	8003240 <I2C_RequestMemoryWrite>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0a9      	b.n	8002df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2bff      	cmp	r3, #255	; 0xff
 8002ca4:	d90e      	bls.n	8002cc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	22ff      	movs	r2, #255	; 0xff
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	8979      	ldrh	r1, [r7, #10]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fd19 	bl	80036f4 <I2C_TransferConfig>
 8002cc2:	e00f      	b.n	8002ce4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	8979      	ldrh	r1, [r7, #10]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 fd08 	bl	80036f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fbb5 	bl	8003458 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e07b      	b.n	8002df0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	1c5a      	adds	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d034      	beq.n	8002d9c <HAL_I2C_Mem_Write+0x1c8>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d130      	bne.n	8002d9c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d40:	2200      	movs	r2, #0
 8002d42:	2180      	movs	r1, #128	; 0x80
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 fb47 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e04d      	b.n	8002df0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	2bff      	cmp	r3, #255	; 0xff
 8002d5c:	d90e      	bls.n	8002d7c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	22ff      	movs	r2, #255	; 0xff
 8002d62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	8979      	ldrh	r1, [r7, #10]
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 fcbd 	bl	80036f4 <I2C_TransferConfig>
 8002d7a:	e00f      	b.n	8002d9c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	8979      	ldrh	r1, [r7, #10]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 fcac 	bl	80036f4 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d19e      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 fb94 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e01a      	b.n	8002df0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6859      	ldr	r1, [r3, #4]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_I2C_Mem_Write+0x224>)
 8002dce:	400b      	ands	r3, r1
 8002dd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e000      	b.n	8002df0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	fe00e800 	.word	0xfe00e800

08002dfc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b088      	sub	sp, #32
 8002e00:	af02      	add	r7, sp, #8
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	4608      	mov	r0, r1
 8002e06:	4611      	mov	r1, r2
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	817b      	strh	r3, [r7, #10]
 8002e0e:	460b      	mov	r3, r1
 8002e10:	813b      	strh	r3, [r7, #8]
 8002e12:	4613      	mov	r3, r2
 8002e14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	f040 80fd 	bne.w	800301e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_I2C_Mem_Read+0x34>
 8002e2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e36:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0f1      	b.n	8003020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_I2C_Mem_Read+0x4e>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0ea      	b.n	8003020 <HAL_I2C_Mem_Read+0x224>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e52:	f7ff f997 	bl	8002184 <HAL_GetTick>
 8002e56:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2319      	movs	r3, #25
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 fab7 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e0d5      	b.n	8003020 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2222      	movs	r2, #34	; 0x22
 8002e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2240      	movs	r2, #64	; 0x40
 8002e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6a3a      	ldr	r2, [r7, #32]
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e9c:	88f8      	ldrh	r0, [r7, #6]
 8002e9e:	893a      	ldrh	r2, [r7, #8]
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	4603      	mov	r3, r0
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fa1b 	bl	80032e8 <I2C_RequestMemoryRead>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e0ad      	b.n	8003020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2bff      	cmp	r3, #255	; 0xff
 8002ecc:	d90e      	bls.n	8002eec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	22ff      	movs	r2, #255	; 0xff
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	8979      	ldrh	r1, [r7, #10]
 8002edc:	4b52      	ldr	r3, [pc, #328]	; (8003028 <HAL_I2C_Mem_Read+0x22c>)
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f000 fc05 	bl	80036f4 <I2C_TransferConfig>
 8002eea:	e00f      	b.n	8002f0c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efa:	b2da      	uxtb	r2, r3
 8002efc:	8979      	ldrh	r1, [r7, #10]
 8002efe:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <HAL_I2C_Mem_Read+0x22c>)
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fbf4 	bl	80036f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	2200      	movs	r2, #0
 8002f14:	2104      	movs	r1, #4
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fa5e 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e07c      	b.n	8003020 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	b2d2      	uxtb	r2, r2
 8002f32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d034      	beq.n	8002fcc <HAL_I2C_Mem_Read+0x1d0>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d130      	bne.n	8002fcc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	2200      	movs	r2, #0
 8002f72:	2180      	movs	r1, #128	; 0x80
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fa2f 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e04d      	b.n	8003020 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	2bff      	cmp	r3, #255	; 0xff
 8002f8c:	d90e      	bls.n	8002fac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	22ff      	movs	r2, #255	; 0xff
 8002f92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	b2da      	uxtb	r2, r3
 8002f9a:	8979      	ldrh	r1, [r7, #10]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fba5 	bl	80036f4 <I2C_TransferConfig>
 8002faa:	e00f      	b.n	8002fcc <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	8979      	ldrh	r1, [r7, #10]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 fb94 	bl	80036f4 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d19a      	bne.n	8002f0c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa7c 	bl	80034d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e01a      	b.n	8003020 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_I2C_Mem_Read+0x230>)
 8002ffe:	400b      	ands	r3, r1
 8003000:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800301a:	2300      	movs	r3, #0
 800301c:	e000      	b.n	8003020 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3718      	adds	r7, #24
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	80002400 	.word	0x80002400
 800302c:	fe00e800 	.word	0xfe00e800

08003030 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08a      	sub	sp, #40	; 0x28
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	607a      	str	r2, [r7, #4]
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	460b      	mov	r3, r1
 800303e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b20      	cmp	r3, #32
 800304e:	f040 80f1 	bne.w	8003234 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800305c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003060:	d101      	bne.n	8003066 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
 8003064:	e0e7      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_I2C_IsDeviceReady+0x44>
 8003070:	2302      	movs	r3, #2
 8003072:	e0e0      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2224      	movs	r2, #36	; 0x24
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d107      	bne.n	80030a2 <HAL_I2C_IsDeviceReady+0x72>
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003098:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800309c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030a0:	e004      	b.n	80030ac <HAL_I2C_IsDeviceReady+0x7c>
 80030a2:	897b      	ldrh	r3, [r7, #10]
 80030a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030a8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80030b2:	f7ff f867 	bl	8002184 <HAL_GetTick>
 80030b6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b20      	cmp	r3, #32
 80030c4:	bf0c      	ite	eq
 80030c6:	2301      	moveq	r3, #1
 80030c8:	2300      	movne	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b10      	cmp	r3, #16
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80030e4:	e034      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030ec:	d01a      	beq.n	8003124 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7ff f849 	bl	8002184 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <HAL_I2C_IsDeviceReady+0xd4>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10f      	bne.n	8003124 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003110:	f043 0220 	orr.w	r2, r3, #32
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e088      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b20      	cmp	r3, #32
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b10      	cmp	r3, #16
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003150:	7ffb      	ldrb	r3, [r7, #31]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d102      	bne.n	800315c <HAL_I2C_IsDeviceReady+0x12c>
 8003156:	7fbb      	ldrb	r3, [r7, #30]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0c4      	beq.n	80030e6 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	2b10      	cmp	r3, #16
 8003168:	d01a      	beq.n	80031a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2200      	movs	r2, #0
 8003172:	2120      	movs	r1, #32
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f92f 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e058      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2220      	movs	r2, #32
 800318a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	e04a      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	2120      	movs	r1, #32
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 f914 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e03d      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2210      	movs	r2, #16
 80031c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2220      	movs	r2, #32
 80031c8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d118      	bne.n	8003204 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031e0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2120      	movs	r1, #32
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f000 f8f3 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e01c      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2220      	movs	r2, #32
 8003202:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	f63f af3b 	bhi.w	800308a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e000      	b.n	8003236 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
  }
}
 8003236:	4618      	mov	r0, r3
 8003238:	3720      	adds	r7, #32
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	4608      	mov	r0, r1
 800324a:	4611      	mov	r1, r2
 800324c:	461a      	mov	r2, r3
 800324e:	4603      	mov	r3, r0
 8003250:	817b      	strh	r3, [r7, #10]
 8003252:	460b      	mov	r3, r1
 8003254:	813b      	strh	r3, [r7, #8]
 8003256:	4613      	mov	r3, r2
 8003258:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800325a:	88fb      	ldrh	r3, [r7, #6]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	8979      	ldrh	r1, [r7, #10]
 8003260:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <I2C_RequestMemoryWrite+0xa4>)
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 fa43 	bl	80036f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f8f0 	bl	8003458 <I2C_WaitOnTXISFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e02c      	b.n	80032dc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003282:	88fb      	ldrh	r3, [r7, #6]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d105      	bne.n	8003294 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003288:	893b      	ldrh	r3, [r7, #8]
 800328a:	b2da      	uxtb	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	629a      	str	r2, [r3, #40]	; 0x28
 8003292:	e015      	b.n	80032c0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003294:	893b      	ldrh	r3, [r7, #8]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	b29b      	uxth	r3, r3
 800329a:	b2da      	uxtb	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	69b9      	ldr	r1, [r7, #24]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f8d6 	bl	8003458 <I2C_WaitOnTXISFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e012      	b.n	80032dc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032b6:	893b      	ldrh	r3, [r7, #8]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f884 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	80002000 	.word	0x80002000

080032e8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	4608      	mov	r0, r1
 80032f2:	4611      	mov	r1, r2
 80032f4:	461a      	mov	r2, r3
 80032f6:	4603      	mov	r3, r0
 80032f8:	817b      	strh	r3, [r7, #10]
 80032fa:	460b      	mov	r3, r1
 80032fc:	813b      	strh	r3, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	b2da      	uxtb	r2, r3
 8003306:	8979      	ldrh	r1, [r7, #10]
 8003308:	4b20      	ldr	r3, [pc, #128]	; (800338c <I2C_RequestMemoryRead+0xa4>)
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	2300      	movs	r3, #0
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f9f0 	bl	80036f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	69b9      	ldr	r1, [r7, #24]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f89d 	bl	8003458 <I2C_WaitOnTXISFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e02c      	b.n	8003382 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d105      	bne.n	800333a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800332e:	893b      	ldrh	r3, [r7, #8]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	629a      	str	r2, [r3, #40]	; 0x28
 8003338:	e015      	b.n	8003366 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800333a:	893b      	ldrh	r3, [r7, #8]
 800333c:	0a1b      	lsrs	r3, r3, #8
 800333e:	b29b      	uxth	r3, r3
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003348:	69fa      	ldr	r2, [r7, #28]
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 f883 	bl	8003458 <I2C_WaitOnTXISFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e012      	b.n	8003382 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800335c:	893b      	ldrh	r3, [r7, #8]
 800335e:	b2da      	uxtb	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2200      	movs	r2, #0
 800336e:	2140      	movs	r1, #64	; 0x40
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f831 	bl	80033d8 <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e000      	b.n	8003382 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	80002000 	.word	0x80002000

08003390 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b02      	cmp	r3, #2
 80033a4:	d103      	bne.n	80033ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2200      	movs	r2, #0
 80033ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d007      	beq.n	80033cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f042 0201 	orr.w	r2, r2, #1
 80033ca:	619a      	str	r2, [r3, #24]
  }
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e8:	e022      	b.n	8003430 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033f0:	d01e      	beq.n	8003430 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fe fec7 	bl	8002184 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d113      	bne.n	8003430 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e00f      	b.n	8003450 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	429a      	cmp	r2, r3
 800344c:	d0cd      	beq.n	80033ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003464:	e02c      	b.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 f8dc 	bl	8003628 <I2C_IsAcknowledgeFailed>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d001      	beq.n	800347a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e02a      	b.n	80034d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003480:	d01e      	beq.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003482:	f7fe fe7f 	bl	8002184 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	429a      	cmp	r2, r3
 8003490:	d302      	bcc.n	8003498 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d113      	bne.n	80034c0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349c:	f043 0220 	orr.w	r2, r3, #32
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e007      	b.n	80034d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d1cb      	bne.n	8003466 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034e4:	e028      	b.n	8003538 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	68b9      	ldr	r1, [r7, #8]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f89c 	bl	8003628 <I2C_IsAcknowledgeFailed>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e026      	b.n	8003548 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fa:	f7fe fe43 	bl	8002184 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	d302      	bcc.n	8003510 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d113      	bne.n	8003538 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003514:	f043 0220 	orr.w	r2, r3, #32
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e007      	b.n	8003548 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f003 0320 	and.w	r3, r3, #32
 8003542:	2b20      	cmp	r3, #32
 8003544:	d1cf      	bne.n	80034e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800355c:	e055      	b.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f000 f860 	bl	8003628 <I2C_IsAcknowledgeFailed>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e053      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b20      	cmp	r3, #32
 800357e:	d129      	bne.n	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d105      	bne.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e03f      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e022      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d4:	f7fe fdd6 	bl	8002184 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d302      	bcc.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ee:	f043 0220 	orr.w	r2, r3, #32
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b04      	cmp	r3, #4
 8003616:	d1a2      	bne.n	800355e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	fe00e800 	.word	0xfe00e800

08003628 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b10      	cmp	r3, #16
 8003640:	d151      	bne.n	80036e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003642:	e022      	b.n	800368a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800364a:	d01e      	beq.n	800368a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364c:	f7fe fd9a 	bl	8002184 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	429a      	cmp	r2, r3
 800365a:	d302      	bcc.n	8003662 <I2C_IsAcknowledgeFailed+0x3a>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d113      	bne.n	800368a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e02e      	b.n	80036e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	2b20      	cmp	r3, #32
 8003696:	d1d5      	bne.n	8003644 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2210      	movs	r2, #16
 800369e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2220      	movs	r2, #32
 80036a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f7ff fe71 	bl	8003390 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6859      	ldr	r1, [r3, #4]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80036ba:	400b      	ands	r3, r1
 80036bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f043 0204 	orr.w	r2, r3, #4
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e000      	b.n	80036e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	fe00e800 	.word	0xfe00e800

080036f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	4613      	mov	r3, r2
 8003704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	0d5b      	lsrs	r3, r3, #21
 8003710:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003714:	4b0d      	ldr	r3, [pc, #52]	; (800374c <I2C_TransferConfig+0x58>)
 8003716:	430b      	orrs	r3, r1
 8003718:	43db      	mvns	r3, r3
 800371a:	ea02 0103 	and.w	r1, r2, r3
 800371e:	897b      	ldrh	r3, [r7, #10]
 8003720:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003724:	7a7b      	ldrb	r3, [r7, #9]
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	431a      	orrs	r2, r3
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	431a      	orrs	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	430a      	orrs	r2, r1
 800373c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800373e:	bf00      	nop
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	03ff63ff 	.word	0x03ff63ff

08003750 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b20      	cmp	r3, #32
 8003764:	d138      	bne.n	80037d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003770:	2302      	movs	r3, #2
 8003772:	e032      	b.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2224      	movs	r2, #36	; 0x24
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	370c      	adds	r7, #12
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b085      	sub	sp, #20
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d139      	bne.n	8003870 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003806:	2302      	movs	r3, #2
 8003808:	e033      	b.n	8003872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2224      	movs	r2, #36	; 0x24
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003838:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	3714      	adds	r7, #20
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
	...

08003880 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a04      	ldr	r2, [pc, #16]	; (800389c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800388a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40007000 	.word	0x40007000

080038a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038a4:	4b04      	ldr	r3, [pc, #16]	; (80038b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40007000 	.word	0x40007000

080038bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ca:	d130      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038cc:	4b23      	ldr	r3, [pc, #140]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d8:	d038      	beq.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038da:	4b20      	ldr	r3, [pc, #128]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ea:	4b1d      	ldr	r3, [pc, #116]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2232      	movs	r2, #50	; 0x32
 80038f0:	fb02 f303 	mul.w	r3, r2, r3
 80038f4:	4a1b      	ldr	r2, [pc, #108]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	0c9b      	lsrs	r3, r3, #18
 80038fc:	3301      	adds	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003900:	e002      	b.n	8003908 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	3b01      	subs	r3, #1
 8003906:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003908:	4b14      	ldr	r3, [pc, #80]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003914:	d102      	bne.n	800391c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1f2      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800391c:	4b0f      	ldr	r3, [pc, #60]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003928:	d110      	bne.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e00f      	b.n	800394e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003936:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393a:	d007      	beq.n	800394c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800393c:	4b07      	ldr	r3, [pc, #28]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003944:	4a05      	ldr	r2, [pc, #20]	; (800395c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800394a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	40007000 	.word	0x40007000
 8003960:	20000000 	.word	0x20000000
 8003964:	431bde83 	.word	0x431bde83

08003968 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d102      	bne.n	800397c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f000 bc11 	b.w	800419e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800397c:	4ba0      	ldr	r3, [pc, #640]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f003 030c 	and.w	r3, r3, #12
 8003984:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003986:	4b9e      	ldr	r3, [pc, #632]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 80e4 	beq.w	8003b66 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_RCC_OscConfig+0x4c>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b0c      	cmp	r3, #12
 80039a8:	f040 808b 	bne.w	8003ac2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	f040 8087 	bne.w	8003ac2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b4:	4b92      	ldr	r3, [pc, #584]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_OscConfig+0x64>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e3e8      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	4b8b      	ldr	r3, [pc, #556]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0308 	and.w	r3, r3, #8
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d004      	beq.n	80039e6 <HAL_RCC_OscConfig+0x7e>
 80039dc:	4b88      	ldr	r3, [pc, #544]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e4:	e005      	b.n	80039f2 <HAL_RCC_OscConfig+0x8a>
 80039e6:	4b86      	ldr	r3, [pc, #536]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d223      	bcs.n	8003a3e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fdac 	bl	8004558 <RCC_SetFlashLatencyFromMSIRange>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e3c9      	b.n	800419e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0a:	4b7d      	ldr	r3, [pc, #500]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7c      	ldr	r2, [pc, #496]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a10:	f043 0308 	orr.w	r3, r3, #8
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b7a      	ldr	r3, [pc, #488]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4977      	ldr	r1, [pc, #476]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a28:	4b75      	ldr	r3, [pc, #468]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	4972      	ldr	r1, [pc, #456]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
 8003a3c:	e025      	b.n	8003a8a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a3e:	4b70      	ldr	r3, [pc, #448]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6f      	ldr	r2, [pc, #444]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a44:	f043 0308 	orr.w	r3, r3, #8
 8003a48:	6013      	str	r3, [r2, #0]
 8003a4a:	4b6d      	ldr	r3, [pc, #436]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	496a      	ldr	r1, [pc, #424]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a5c:	4b68      	ldr	r3, [pc, #416]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	4965      	ldr	r1, [pc, #404]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fd6c 	bl	8004558 <RCC_SetFlashLatencyFromMSIRange>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e389      	b.n	800419e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a8a:	f000 fc6f 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	495a      	ldr	r1, [pc, #360]	; (8003c04 <HAL_RCC_OscConfig+0x29c>)
 8003a9c:	5ccb      	ldrb	r3, [r1, r3]
 8003a9e:	f003 031f 	and.w	r3, r3, #31
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	4a58      	ldr	r2, [pc, #352]	; (8003c08 <HAL_RCC_OscConfig+0x2a0>)
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aaa:	4b58      	ldr	r3, [pc, #352]	; (8003c0c <HAL_RCC_OscConfig+0x2a4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fe f934 	bl	8001d1c <HAL_InitTick>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ab8:	7bfb      	ldrb	r3, [r7, #15]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d052      	beq.n	8003b64 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
 8003ac0:	e36d      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d032      	beq.n	8003b30 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aca:	4b4d      	ldr	r3, [pc, #308]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a4c      	ldr	r2, [pc, #304]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003ad0:	f043 0301 	orr.w	r3, r3, #1
 8003ad4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fb55 	bl	8002184 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ade:	f7fe fb51 	bl	8002184 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e356      	b.n	800419e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003afc:	4b40      	ldr	r3, [pc, #256]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a3f      	ldr	r2, [pc, #252]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b02:	f043 0308 	orr.w	r3, r3, #8
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b3d      	ldr	r3, [pc, #244]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	493a      	ldr	r1, [pc, #232]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b1a:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	4935      	ldr	r1, [pc, #212]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	604b      	str	r3, [r1, #4]
 8003b2e:	e01a      	b.n	8003b66 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b30:	4b33      	ldr	r3, [pc, #204]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a32      	ldr	r2, [pc, #200]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b36:	f023 0301 	bic.w	r3, r3, #1
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fb22 	bl	8002184 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b44:	f7fe fb1e 	bl	8002184 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e323      	b.n	800419e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b56:	4b2a      	ldr	r3, [pc, #168]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x1dc>
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b64:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0301 	and.w	r3, r3, #1
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d073      	beq.n	8003c5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d005      	beq.n	8003b84 <HAL_RCC_OscConfig+0x21c>
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d10e      	bne.n	8003b9c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d10b      	bne.n	8003b9c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b84:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d063      	beq.n	8003c58 <HAL_RCC_OscConfig+0x2f0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d15f      	bne.n	8003c58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e300      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba4:	d106      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x24c>
 8003ba6:	4b16      	ldr	r3, [pc, #88]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a15      	ldr	r2, [pc, #84]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e01d      	b.n	8003bf0 <HAL_RCC_OscConfig+0x288>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bbc:	d10c      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x270>
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a0f      	ldr	r2, [pc, #60]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003bc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	e00b      	b.n	8003bf0 <HAL_RCC_OscConfig+0x288>
 8003bd8:	4b09      	ldr	r3, [pc, #36]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a08      	ldr	r2, [pc, #32]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be2:	6013      	str	r3, [r2, #0]
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <HAL_RCC_OscConfig+0x298>)
 8003bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d01b      	beq.n	8003c30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf8:	f7fe fac4 	bl	8002184 <HAL_GetTick>
 8003bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bfe:	e010      	b.n	8003c22 <HAL_RCC_OscConfig+0x2ba>
 8003c00:	40021000 	.word	0x40021000
 8003c04:	08009c14 	.word	0x08009c14
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c10:	f7fe fab8 	bl	8002184 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	; 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e2bd      	b.n	800419e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c22:	4baf      	ldr	r3, [pc, #700]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCC_OscConfig+0x2a8>
 8003c2e:	e014      	b.n	8003c5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe faa8 	bl	8002184 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c38:	f7fe faa4 	bl	8002184 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b64      	cmp	r3, #100	; 0x64
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e2a9      	b.n	800419e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c4a:	4ba5      	ldr	r3, [pc, #660]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x2d0>
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d060      	beq.n	8003d28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b04      	cmp	r3, #4
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_OscConfig+0x310>
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	d119      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d116      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c78:	4b99      	ldr	r3, [pc, #612]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_OscConfig+0x328>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e286      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c90:	4b93      	ldr	r3, [pc, #588]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	061b      	lsls	r3, r3, #24
 8003c9e:	4990      	ldr	r1, [pc, #576]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca4:	e040      	b.n	8003d28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d023      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cae:	4b8c      	ldr	r3, [pc, #560]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a8b      	ldr	r2, [pc, #556]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fe fa63 	bl	8002184 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc2:	f7fe fa5f 	bl	8002184 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e264      	b.n	800419e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd4:	4b82      	ldr	r3, [pc, #520]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce0:	4b7f      	ldr	r3, [pc, #508]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	497c      	ldr	r1, [pc, #496]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
 8003cf4:	e018      	b.n	8003d28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cf6:	4b7a      	ldr	r3, [pc, #488]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a79      	ldr	r2, [pc, #484]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7fe fa3f 	bl	8002184 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7fe fa3b 	bl	8002184 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e240      	b.n	800419e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d1c:	4b70      	ldr	r3, [pc, #448]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d03c      	beq.n	8003dae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	695b      	ldr	r3, [r3, #20]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01c      	beq.n	8003d76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d3c:	4b68      	ldr	r3, [pc, #416]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d42:	4a67      	ldr	r2, [pc, #412]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4c:	f7fe fa1a 	bl	8002184 <HAL_GetTick>
 8003d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d52:	e008      	b.n	8003d66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d54:	f7fe fa16 	bl	8002184 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e21b      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d66:	4b5e      	ldr	r3, [pc, #376]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003d68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0ef      	beq.n	8003d54 <HAL_RCC_OscConfig+0x3ec>
 8003d74:	e01b      	b.n	8003dae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d76:	4b5a      	ldr	r3, [pc, #360]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7c:	4a58      	ldr	r2, [pc, #352]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d86:	f7fe f9fd 	bl	8002184 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8e:	f7fe f9f9 	bl	8002184 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e1fe      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003da0:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1ef      	bne.n	8003d8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 80a6 	beq.w	8003f08 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dc0:	4b47      	ldr	r3, [pc, #284]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dcc:	4b44      	ldr	r3, [pc, #272]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd0:	4a43      	ldr	r2, [pc, #268]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd8:	4b41      	ldr	r3, [pc, #260]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de4:	2301      	movs	r3, #1
 8003de6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de8:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_RCC_OscConfig+0x57c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d118      	bne.n	8003e26 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df4:	4b3b      	ldr	r3, [pc, #236]	; (8003ee4 <HAL_RCC_OscConfig+0x57c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a3a      	ldr	r2, [pc, #232]	; (8003ee4 <HAL_RCC_OscConfig+0x57c>)
 8003dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e00:	f7fe f9c0 	bl	8002184 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e08:	f7fe f9bc 	bl	8002184 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e1c1      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1a:	4b32      	ldr	r3, [pc, #200]	; (8003ee4 <HAL_RCC_OscConfig+0x57c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d108      	bne.n	8003e40 <HAL_RCC_OscConfig+0x4d8>
 8003e2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e34:	4a2a      	ldr	r2, [pc, #168]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e36:	f043 0301 	orr.w	r3, r3, #1
 8003e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e3e:	e024      	b.n	8003e8a <HAL_RCC_OscConfig+0x522>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d110      	bne.n	8003e6a <HAL_RCC_OscConfig+0x502>
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	4a24      	ldr	r2, [pc, #144]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e50:	f043 0304 	orr.w	r3, r3, #4
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e58:	4b21      	ldr	r3, [pc, #132]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	4a20      	ldr	r2, [pc, #128]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e60:	f043 0301 	orr.w	r3, r3, #1
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e68:	e00f      	b.n	8003e8a <HAL_RCC_OscConfig+0x522>
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e72:	f023 0301 	bic.w	r3, r3, #1
 8003e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e7a:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e80:	4a17      	ldr	r2, [pc, #92]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003e82:	f023 0304 	bic.w	r3, r3, #4
 8003e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d016      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fe f977 	bl	8002184 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e98:	e00a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e9a:	f7fe f973 	bl	8002184 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e176      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_RCC_OscConfig+0x578>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ed      	beq.n	8003e9a <HAL_RCC_OscConfig+0x532>
 8003ebe:	e01a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec0:	f7fe f960 	bl	8002184 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ec6:	e00f      	b.n	8003ee8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec8:	f7fe f95c 	bl	8002184 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d906      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e15f      	b.n	800419e <HAL_RCC_OscConfig+0x836>
 8003ede:	bf00      	nop
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ee8:	4baa      	ldr	r3, [pc, #680]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1e8      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef6:	7ffb      	ldrb	r3, [r7, #31]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003efc:	4ba5      	ldr	r3, [pc, #660]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	4aa4      	ldr	r2, [pc, #656]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d03c      	beq.n	8003f8e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d01c      	beq.n	8003f56 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f1c:	4b9d      	ldr	r3, [pc, #628]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f22:	4a9c      	ldr	r2, [pc, #624]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f2c:	f7fe f92a 	bl	8002184 <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f34:	f7fe f926 	bl	8002184 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e12b      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f46:	4b93      	ldr	r3, [pc, #588]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0ef      	beq.n	8003f34 <HAL_RCC_OscConfig+0x5cc>
 8003f54:	e01b      	b.n	8003f8e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f56:	4b8f      	ldr	r3, [pc, #572]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f5c:	4a8d      	ldr	r2, [pc, #564]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f66:	f7fe f90d 	bl	8002184 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f6e:	f7fe f909 	bl	8002184 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e10e      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f80:	4b84      	ldr	r3, [pc, #528]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1ef      	bne.n	8003f6e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8102 	beq.w	800419c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	f040 80c5 	bne.w	800412c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fa2:	4b7c      	ldr	r3, [pc, #496]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f003 0203 	and.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d12c      	bne.n	8004010 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d123      	bne.n	8004010 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d11b      	bne.n	8004010 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d113      	bne.n	8004010 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff2:	085b      	lsrs	r3, r3, #1
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d109      	bne.n	8004010 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	3b01      	subs	r3, #1
 800400a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400c:	429a      	cmp	r2, r3
 800400e:	d067      	beq.n	80040e0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d062      	beq.n	80040dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004016:	4b5f      	ldr	r3, [pc, #380]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0bb      	b.n	800419e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004026:	4b5b      	ldr	r3, [pc, #364]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a5a      	ldr	r2, [pc, #360]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 800402c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004030:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004032:	f7fe f8a7 	bl	8002184 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403a:	f7fe f8a3 	bl	8002184 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e0a8      	b.n	800419e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800404c:	4b51      	ldr	r3, [pc, #324]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1f0      	bne.n	800403a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004058:	4b4e      	ldr	r3, [pc, #312]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <HAL_RCC_OscConfig+0x830>)
 800405e:	4013      	ands	r3, r2
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004068:	3a01      	subs	r2, #1
 800406a:	0112      	lsls	r2, r2, #4
 800406c:	4311      	orrs	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004072:	0212      	lsls	r2, r2, #8
 8004074:	4311      	orrs	r1, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800407a:	0852      	lsrs	r2, r2, #1
 800407c:	3a01      	subs	r2, #1
 800407e:	0552      	lsls	r2, r2, #21
 8004080:	4311      	orrs	r1, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004086:	0852      	lsrs	r2, r2, #1
 8004088:	3a01      	subs	r2, #1
 800408a:	0652      	lsls	r2, r2, #25
 800408c:	4311      	orrs	r1, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004092:	06d2      	lsls	r2, r2, #27
 8004094:	430a      	orrs	r2, r1
 8004096:	493f      	ldr	r1, [pc, #252]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004098:	4313      	orrs	r3, r2
 800409a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800409c:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a3c      	ldr	r2, [pc, #240]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040a8:	4b3a      	ldr	r3, [pc, #232]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	4a39      	ldr	r2, [pc, #228]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040b4:	f7fe f866 	bl	8002184 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040bc:	f7fe f862 	bl	8002184 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e067      	b.n	800419e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040da:	e05f      	b.n	800419c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e05e      	b.n	800419e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e0:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d157      	bne.n	800419c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040ec:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a28      	ldr	r2, [pc, #160]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f8:	4b26      	ldr	r3, [pc, #152]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a25      	ldr	r2, [pc, #148]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 80040fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004102:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004104:	f7fe f83e 	bl	8002184 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fe f83a 	bl	8002184 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e03f      	b.n	800419e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x7a4>
 800412a:	e037      	b.n	800419c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b0c      	cmp	r3, #12
 8004130:	d02d      	beq.n	800418e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004132:	4b18      	ldr	r3, [pc, #96]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a17      	ldr	r2, [pc, #92]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800413e:	4b15      	ldr	r3, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800414a:	4b12      	ldr	r3, [pc, #72]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	4a11      	ldr	r2, [pc, #68]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004150:	f023 0303 	bic.w	r3, r3, #3
 8004154:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004156:	4b0f      	ldr	r3, [pc, #60]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a0e      	ldr	r2, [pc, #56]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 800415c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004164:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004166:	f7fe f80d 	bl	8002184 <HAL_GetTick>
 800416a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416c:	e008      	b.n	8004180 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416e:	f7fe f809 	bl	8002184 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d901      	bls.n	8004180 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e00e      	b.n	800419e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <HAL_RCC_OscConfig+0x82c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1f0      	bne.n	800416e <HAL_RCC_OscConfig+0x806>
 800418c:	e006      	b.n	800419c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e005      	b.n	800419e <HAL_RCC_OscConfig+0x836>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop

080041a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0c8      	b.n	800434e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCC_ClockConfig+0x1b0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d910      	bls.n	80041ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b63      	ldr	r3, [pc, #396]	; (8004358 <HAL_RCC_ClockConfig+0x1b0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 0207 	bic.w	r2, r3, #7
 80041d2:	4961      	ldr	r1, [pc, #388]	; (8004358 <HAL_RCC_ClockConfig+0x1b0>)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b5f      	ldr	r3, [pc, #380]	; (8004358 <HAL_RCC_ClockConfig+0x1b0>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b0      	b.n	800434e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d04c      	beq.n	8004292 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d107      	bne.n	8004210 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004200:	4b56      	ldr	r3, [pc, #344]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d121      	bne.n	8004250 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e09e      	b.n	800434e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d107      	bne.n	8004228 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004218:	4b50      	ldr	r3, [pc, #320]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d115      	bne.n	8004250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e092      	b.n	800434e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004230:	4b4a      	ldr	r3, [pc, #296]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e086      	b.n	800434e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004240:	4b46      	ldr	r3, [pc, #280]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e07e      	b.n	800434e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004250:	4b42      	ldr	r3, [pc, #264]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f023 0203 	bic.w	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	493f      	ldr	r1, [pc, #252]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004262:	f7fd ff8f 	bl	8002184 <HAL_GetTick>
 8004266:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004268:	e00a      	b.n	8004280 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426a:	f7fd ff8b 	bl	8002184 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	f241 3288 	movw	r2, #5000	; 0x1388
 8004278:	4293      	cmp	r3, r2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e066      	b.n	800434e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004280:	4b36      	ldr	r3, [pc, #216]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 020c 	and.w	r2, r3, #12
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	429a      	cmp	r2, r3
 8004290:	d1eb      	bne.n	800426a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d008      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429e:	4b2f      	ldr	r3, [pc, #188]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	492c      	ldr	r1, [pc, #176]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b0:	4b29      	ldr	r3, [pc, #164]	; (8004358 <HAL_RCC_ClockConfig+0x1b0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d210      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042be:	4b26      	ldr	r3, [pc, #152]	; (8004358 <HAL_RCC_ClockConfig+0x1b0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f023 0207 	bic.w	r2, r3, #7
 80042c6:	4924      	ldr	r1, [pc, #144]	; (8004358 <HAL_RCC_ClockConfig+0x1b0>)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ce:	4b22      	ldr	r3, [pc, #136]	; (8004358 <HAL_RCC_ClockConfig+0x1b0>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d001      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e036      	b.n	800434e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042ec:	4b1b      	ldr	r3, [pc, #108]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	4918      	ldr	r1, [pc, #96]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d009      	beq.n	800431e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430a:	4b14      	ldr	r3, [pc, #80]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4910      	ldr	r1, [pc, #64]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 800431a:	4313      	orrs	r3, r2
 800431c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800431e:	f000 f825 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8004322:	4602      	mov	r2, r0
 8004324:	4b0d      	ldr	r3, [pc, #52]	; (800435c <HAL_RCC_ClockConfig+0x1b4>)
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	490c      	ldr	r1, [pc, #48]	; (8004360 <HAL_RCC_ClockConfig+0x1b8>)
 8004330:	5ccb      	ldrb	r3, [r1, r3]
 8004332:	f003 031f 	and.w	r3, r3, #31
 8004336:	fa22 f303 	lsr.w	r3, r2, r3
 800433a:	4a0a      	ldr	r2, [pc, #40]	; (8004364 <HAL_RCC_ClockConfig+0x1bc>)
 800433c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f7fd fcea 	bl	8001d1c <HAL_InitTick>
 8004348:	4603      	mov	r3, r0
 800434a:	72fb      	strb	r3, [r7, #11]

  return status;
 800434c:	7afb      	ldrb	r3, [r7, #11]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	40022000 	.word	0x40022000
 800435c:	40021000 	.word	0x40021000
 8004360:	08009c14 	.word	0x08009c14
 8004364:	20000000 	.word	0x20000000
 8004368:	20000004 	.word	0x20000004

0800436c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	; 0x24
 8004370:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004372:	2300      	movs	r3, #0
 8004374:	61fb      	str	r3, [r7, #28]
 8004376:	2300      	movs	r3, #0
 8004378:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437a:	4b3e      	ldr	r3, [pc, #248]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 030c 	and.w	r3, r3, #12
 8004382:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004384:	4b3b      	ldr	r3, [pc, #236]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0x34>
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b0c      	cmp	r3, #12
 8004398:	d121      	bne.n	80043de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d11e      	bne.n	80043de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043a0:	4b34      	ldr	r3, [pc, #208]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043ac:	4b31      	ldr	r3, [pc, #196]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 030f 	and.w	r3, r3, #15
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043bc:	4b2d      	ldr	r3, [pc, #180]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043c8:	4a2b      	ldr	r2, [pc, #172]	; (8004478 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10d      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043dc:	e00a      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	2b04      	cmp	r3, #4
 80043e2:	d102      	bne.n	80043ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043e4:	4b25      	ldr	r3, [pc, #148]	; (800447c <HAL_RCC_GetSysClockFreq+0x110>)
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	e004      	b.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b08      	cmp	r3, #8
 80043ee:	d101      	bne.n	80043f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043f0:	4b23      	ldr	r3, [pc, #140]	; (8004480 <HAL_RCC_GetSysClockFreq+0x114>)
 80043f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b0c      	cmp	r3, #12
 80043f8:	d134      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2b02      	cmp	r3, #2
 8004408:	d003      	beq.n	8004412 <HAL_RCC_GetSysClockFreq+0xa6>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b03      	cmp	r3, #3
 800440e:	d003      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0xac>
 8004410:	e005      	b.n	800441e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004412:	4b1a      	ldr	r3, [pc, #104]	; (800447c <HAL_RCC_GetSysClockFreq+0x110>)
 8004414:	617b      	str	r3, [r7, #20]
      break;
 8004416:	e005      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004418:	4b19      	ldr	r3, [pc, #100]	; (8004480 <HAL_RCC_GetSysClockFreq+0x114>)
 800441a:	617b      	str	r3, [r7, #20]
      break;
 800441c:	e002      	b.n	8004424 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	617b      	str	r3, [r7, #20]
      break;
 8004422:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 0307 	and.w	r3, r3, #7
 800442e:	3301      	adds	r3, #1
 8004430:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	fb02 f203 	mul.w	r2, r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	fbb2 f3f3 	udiv	r3, r2, r3
 8004448:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <HAL_RCC_GetSysClockFreq+0x108>)
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	0e5b      	lsrs	r3, r3, #25
 8004450:	f003 0303 	and.w	r3, r3, #3
 8004454:	3301      	adds	r3, #1
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004462:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004464:	69bb      	ldr	r3, [r7, #24]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3724      	adds	r7, #36	; 0x24
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	08009c2c 	.word	0x08009c2c
 800447c:	00f42400 	.word	0x00f42400
 8004480:	007a1200 	.word	0x007a1200

08004484 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_RCC_GetHCLKFreq+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000000 	.word	0x20000000

0800449c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044a0:	f7ff fff0 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044a4:	4602      	mov	r2, r0
 80044a6:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	0a1b      	lsrs	r3, r3, #8
 80044ac:	f003 0307 	and.w	r3, r3, #7
 80044b0:	4904      	ldr	r1, [pc, #16]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044b2:	5ccb      	ldrb	r3, [r1, r3]
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	08009c24 	.word	0x08009c24

080044c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044cc:	f7ff ffda 	bl	8004484 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0adb      	lsrs	r3, r3, #11
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4904      	ldr	r1, [pc, #16]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	08009c24 	.word	0x08009c24

080044f4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	220f      	movs	r2, #15
 8004502:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004504:	4b12      	ldr	r3, [pc, #72]	; (8004550 <HAL_RCC_GetClockConfig+0x5c>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f003 0203 	and.w	r2, r3, #3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004510:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <HAL_RCC_GetClockConfig+0x5c>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800451c:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_RCC_GetClockConfig+0x5c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_GetClockConfig+0x5c>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004536:	4b07      	ldr	r3, [pc, #28]	; (8004554 <HAL_RCC_GetClockConfig+0x60>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0207 	and.w	r2, r3, #7
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40021000 	.word	0x40021000
 8004554:	40022000 	.word	0x40022000

08004558 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004564:	4b2a      	ldr	r3, [pc, #168]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004570:	f7ff f996 	bl	80038a0 <HAL_PWREx_GetVoltageRange>
 8004574:	6178      	str	r0, [r7, #20]
 8004576:	e014      	b.n	80045a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004578:	4b25      	ldr	r3, [pc, #148]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	4a24      	ldr	r2, [pc, #144]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004582:	6593      	str	r3, [r2, #88]	; 0x58
 8004584:	4b22      	ldr	r3, [pc, #136]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004590:	f7ff f986 	bl	80038a0 <HAL_PWREx_GetVoltageRange>
 8004594:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800459a:	4a1d      	ldr	r2, [pc, #116]	; (8004610 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800459c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045a8:	d10b      	bne.n	80045c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b80      	cmp	r3, #128	; 0x80
 80045ae:	d919      	bls.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2ba0      	cmp	r3, #160	; 0xa0
 80045b4:	d902      	bls.n	80045bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045b6:	2302      	movs	r3, #2
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e013      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045bc:	2301      	movs	r3, #1
 80045be:	613b      	str	r3, [r7, #16]
 80045c0:	e010      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b80      	cmp	r3, #128	; 0x80
 80045c6:	d902      	bls.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045c8:	2303      	movs	r3, #3
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e00a      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b80      	cmp	r3, #128	; 0x80
 80045d2:	d102      	bne.n	80045da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045d4:	2302      	movs	r3, #2
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e004      	b.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b70      	cmp	r3, #112	; 0x70
 80045de:	d101      	bne.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e0:	2301      	movs	r3, #1
 80045e2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f023 0207 	bic.w	r2, r3, #7
 80045ec:	4909      	ldr	r1, [pc, #36]	; (8004614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045f4:	4b07      	ldr	r3, [pc, #28]	; (8004614 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0307 	and.w	r3, r3, #7
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d001      	beq.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e000      	b.n	8004608 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	40021000 	.word	0x40021000
 8004614:	40022000 	.word	0x40022000

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004620:	2300      	movs	r3, #0
 8004622:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004624:	2300      	movs	r3, #0
 8004626:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004630:	2b00      	cmp	r3, #0
 8004632:	d031      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004638:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800463c:	d01a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800463e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004642:	d814      	bhi.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004648:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800464c:	d10f      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800464e:	4bac      	ldr	r3, [pc, #688]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4aab      	ldr	r2, [pc, #684]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004658:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800465a:	e00c      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	2100      	movs	r1, #0
 8004662:	4618      	mov	r0, r3
 8004664:	f000 f9dc 	bl	8004a20 <RCCEx_PLLSAI1_Config>
 8004668:	4603      	mov	r3, r0
 800466a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800466c:	e003      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	74fb      	strb	r3, [r7, #19]
      break;
 8004672:	e000      	b.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004674:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004676:	7cfb      	ldrb	r3, [r7, #19]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d10b      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800467c:	4ba0      	ldr	r3, [pc, #640]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800467e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	499d      	ldr	r1, [pc, #628]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004692:	e001      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004694:	7cfb      	ldrb	r3, [r7, #19]
 8004696:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8099 	beq.w	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046a6:	2300      	movs	r3, #0
 80046a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046aa:	4b95      	ldr	r3, [pc, #596]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00d      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c0:	4b8f      	ldr	r3, [pc, #572]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c4:	4a8e      	ldr	r2, [pc, #568]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ca:	6593      	str	r3, [r2, #88]	; 0x58
 80046cc:	4b8c      	ldr	r3, [pc, #560]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046d8:	2301      	movs	r3, #1
 80046da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046dc:	4b89      	ldr	r3, [pc, #548]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a88      	ldr	r2, [pc, #544]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80046e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046e8:	f7fd fd4c 	bl	8002184 <HAL_GetTick>
 80046ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046ee:	e009      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046f0:	f7fd fd48 	bl	8002184 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d902      	bls.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	74fb      	strb	r3, [r7, #19]
        break;
 8004702:	e005      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004704:	4b7f      	ldr	r3, [pc, #508]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0ef      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004710:	7cfb      	ldrb	r3, [r7, #19]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d155      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004716:	4b7a      	ldr	r3, [pc, #488]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004720:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01e      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	697a      	ldr	r2, [r7, #20]
 800472e:	429a      	cmp	r2, r3
 8004730:	d019      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004732:	4b73      	ldr	r3, [pc, #460]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800473e:	4b70      	ldr	r3, [pc, #448]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004744:	4a6e      	ldr	r2, [pc, #440]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800474e:	4b6c      	ldr	r3, [pc, #432]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004754:	4a6a      	ldr	r2, [pc, #424]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800475a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800475e:	4a68      	ldr	r2, [pc, #416]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fd fd08 	bl	8002184 <HAL_GetTick>
 8004774:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004776:	e00b      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fd fd04 	bl	8002184 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d902      	bls.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	74fb      	strb	r3, [r7, #19]
            break;
 800478e:	e006      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004790:	4b5b      	ldr	r3, [pc, #364]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	f003 0302 	and.w	r3, r3, #2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0ec      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800479e:	7cfb      	ldrb	r3, [r7, #19]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10b      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047a4:	4b56      	ldr	r3, [pc, #344]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b2:	4953      	ldr	r1, [pc, #332]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ba:	e004      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	74bb      	strb	r3, [r7, #18]
 80047c0:	e001      	b.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c6:	7c7b      	ldrb	r3, [r7, #17]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d105      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047cc:	4b4c      	ldr	r3, [pc, #304]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d0:	4a4b      	ldr	r2, [pc, #300]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0301 	and.w	r3, r3, #1
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00a      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e4:	4b46      	ldr	r3, [pc, #280]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ea:	f023 0203 	bic.w	r2, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	4943      	ldr	r1, [pc, #268]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80047f4:	4313      	orrs	r3, r2
 80047f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0302 	and.w	r3, r3, #2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00a      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004806:	4b3e      	ldr	r3, [pc, #248]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480c:	f023 020c 	bic.w	r2, r3, #12
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	493a      	ldr	r1, [pc, #232]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0320 	and.w	r3, r3, #32
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004828:	4b35      	ldr	r3, [pc, #212]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800482a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	4932      	ldr	r1, [pc, #200]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800484a:	4b2d      	ldr	r3, [pc, #180]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004858:	4929      	ldr	r1, [pc, #164]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800486c:	4b24      	ldr	r3, [pc, #144]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	4921      	ldr	r1, [pc, #132]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800487c:	4313      	orrs	r3, r2
 800487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800488e:	4b1c      	ldr	r3, [pc, #112]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004894:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489c:	4918      	ldr	r1, [pc, #96]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048b0:	4b13      	ldr	r3, [pc, #76]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4910      	ldr	r1, [pc, #64]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d02c      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048d2:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	4907      	ldr	r1, [pc, #28]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048f0:	d10a      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048f2:	4b03      	ldr	r3, [pc, #12]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	4a02      	ldr	r2, [pc, #8]	; (8004900 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80048f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048fc:	60d3      	str	r3, [r2, #12]
 80048fe:	e015      	b.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8004900:	40021000 	.word	0x40021000
 8004904:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004910:	d10c      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f000 f881 	bl	8004a20 <RCCEx_PLLSAI1_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004922:	7cfb      	ldrb	r3, [r7, #19]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d028      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004938:	4b30      	ldr	r3, [pc, #192]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	492d      	ldr	r1, [pc, #180]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004956:	d106      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004958:	4b28      	ldr	r3, [pc, #160]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a27      	ldr	r2, [pc, #156]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004962:	60d3      	str	r3, [r2, #12]
 8004964:	e011      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800496a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800496e:	d10c      	bne.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	3304      	adds	r3, #4
 8004974:	2101      	movs	r1, #1
 8004976:	4618      	mov	r0, r3
 8004978:	f000 f852 	bl	8004a20 <RCCEx_PLLSAI1_Config>
 800497c:	4603      	mov	r3, r0
 800497e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004980:	7cfb      	ldrb	r3, [r7, #19]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8004986:	7cfb      	ldrb	r3, [r7, #19]
 8004988:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d01c      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004996:	4b19      	ldr	r3, [pc, #100]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a4:	4915      	ldr	r1, [pc, #84]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	2102      	movs	r1, #2
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 f82f 	bl	8004a20 <RCCEx_PLLSAI1_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049c6:	7cfb      	ldrb	r3, [r7, #19]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80049dc:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ea:	4904      	ldr	r1, [pc, #16]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80049f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000

08004a00 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a04      	ldr	r2, [pc, #16]	; (8004a1c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	6013      	str	r3, [r2, #0]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40021000 	.word	0x40021000

08004a20 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a2e:	4b74      	ldr	r3, [pc, #464]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f003 0303 	and.w	r3, r3, #3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d018      	beq.n	8004a6c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004a3a:	4b71      	ldr	r3, [pc, #452]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f003 0203 	and.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d10d      	bne.n	8004a66 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
       ||
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d009      	beq.n	8004a66 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004a52:	4b6b      	ldr	r3, [pc, #428]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	091b      	lsrs	r3, r3, #4
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	1c5a      	adds	r2, r3, #1
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
       ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d047      	beq.n	8004af6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	e044      	b.n	8004af6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d018      	beq.n	8004aa6 <RCCEx_PLLSAI1_Config+0x86>
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d825      	bhi.n	8004ac4 <RCCEx_PLLSAI1_Config+0xa4>
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d002      	beq.n	8004a82 <RCCEx_PLLSAI1_Config+0x62>
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d009      	beq.n	8004a94 <RCCEx_PLLSAI1_Config+0x74>
 8004a80:	e020      	b.n	8004ac4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004a82:	4b5f      	ldr	r3, [pc, #380]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d11d      	bne.n	8004aca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a92:	e01a      	b.n	8004aca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004a94:	4b5a      	ldr	r3, [pc, #360]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d116      	bne.n	8004ace <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa4:	e013      	b.n	8004ace <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004aa6:	4b56      	ldr	r3, [pc, #344]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ab2:	4b53      	ldr	r3, [pc, #332]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004ac2:	e006      	b.n	8004ad2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac8:	e004      	b.n	8004ad4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004aca:	bf00      	nop
 8004acc:	e002      	b.n	8004ad4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ace:	bf00      	nop
 8004ad0:	e000      	b.n	8004ad4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ad2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10d      	bne.n	8004af6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ada:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6819      	ldr	r1, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	011b      	lsls	r3, r3, #4
 8004aee:	430b      	orrs	r3, r1
 8004af0:	4943      	ldr	r1, [pc, #268]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004af6:	7bfb      	ldrb	r3, [r7, #15]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d17c      	bne.n	8004bf6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004afc:	4b40      	ldr	r3, [pc, #256]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a3f      	ldr	r2, [pc, #252]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b02:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fd fb3c 	bl	8002184 <HAL_GetTick>
 8004b0c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b0e:	e009      	b.n	8004b24 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b10:	f7fd fb38 	bl	8002184 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d902      	bls.n	8004b24 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	73fb      	strb	r3, [r7, #15]
        break;
 8004b22:	e005      	b.n	8004b30 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b24:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1ef      	bne.n	8004b10 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d15f      	bne.n	8004bf6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d110      	bne.n	8004b5e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b3c:	4b30      	ldr	r3, [pc, #192]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004b44:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6892      	ldr	r2, [r2, #8]
 8004b4c:	0211      	lsls	r1, r2, #8
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68d2      	ldr	r2, [r2, #12]
 8004b52:	06d2      	lsls	r2, r2, #27
 8004b54:	430a      	orrs	r2, r1
 8004b56:	492a      	ldr	r1, [pc, #168]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	610b      	str	r3, [r1, #16]
 8004b5c:	e027      	b.n	8004bae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d112      	bne.n	8004b8a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b64:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004b6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	6892      	ldr	r2, [r2, #8]
 8004b74:	0211      	lsls	r1, r2, #8
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6912      	ldr	r2, [r2, #16]
 8004b7a:	0852      	lsrs	r2, r2, #1
 8004b7c:	3a01      	subs	r2, #1
 8004b7e:	0552      	lsls	r2, r2, #21
 8004b80:	430a      	orrs	r2, r1
 8004b82:	491f      	ldr	r1, [pc, #124]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	610b      	str	r3, [r1, #16]
 8004b88:	e011      	b.n	8004bae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004b8a:	4b1d      	ldr	r3, [pc, #116]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004b92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	6892      	ldr	r2, [r2, #8]
 8004b9a:	0211      	lsls	r1, r2, #8
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6952      	ldr	r2, [r2, #20]
 8004ba0:	0852      	lsrs	r2, r2, #1
 8004ba2:	3a01      	subs	r2, #1
 8004ba4:	0652      	lsls	r2, r2, #25
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	4915      	ldr	r1, [pc, #84]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004bae:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a13      	ldr	r2, [pc, #76]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bba:	f7fd fae3 	bl	8002184 <HAL_GetTick>
 8004bbe:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bc0:	e009      	b.n	8004bd6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc2:	f7fd fadf 	bl	8002184 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d902      	bls.n	8004bd6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	73fb      	strb	r3, [r7, #15]
          break;
 8004bd4:	e005      	b.n	8004be2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004bd6:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0ef      	beq.n	8004bc2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004be8:	4b05      	ldr	r3, [pc, #20]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	4903      	ldr	r1, [pc, #12]	; (8004c00 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000

08004c04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e095      	b.n	8004d42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c26:	d009      	beq.n	8004c3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	61da      	str	r2, [r3, #28]
 8004c2e:	e005      	b.n	8004c3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fc ffdc 	bl	8001c14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c7c:	d902      	bls.n	8004c84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	e002      	b.n	8004c8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c92:	d007      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c9c:	d002      	beq.n	8004ca4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	ea42 0103 	orr.w	r1, r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	699b      	ldr	r3, [r3, #24]
 8004cfe:	0c1b      	lsrs	r3, r3, #16
 8004d00:	f003 0204 	and.w	r2, r3, #4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	f003 0310 	and.w	r3, r3, #16
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d20:	ea42 0103 	orr.w	r1, r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b08a      	sub	sp, #40	; 0x28
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d101      	bne.n	8004d70 <HAL_SPI_TransmitReceive+0x26>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	e1fb      	b.n	8005168 <HAL_SPI_TransmitReceive+0x41e>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d78:	f7fd fa04 	bl	8002184 <HAL_GetTick>
 8004d7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d8c:	887b      	ldrh	r3, [r7, #2]
 8004d8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d90:	887b      	ldrh	r3, [r7, #2]
 8004d92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d94:	7efb      	ldrb	r3, [r7, #27]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d00e      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x6e>
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004da0:	d106      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d102      	bne.n	8004db0 <HAL_SPI_TransmitReceive+0x66>
 8004daa:	7efb      	ldrb	r3, [r7, #27]
 8004dac:	2b04      	cmp	r3, #4
 8004dae:	d003      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004db0:	2302      	movs	r3, #2
 8004db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004db6:	e1cd      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d005      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x80>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_TransmitReceive+0x80>
 8004dc4:	887b      	ldrh	r3, [r7, #2]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004dd0:	e1c0      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b04      	cmp	r3, #4
 8004ddc:	d003      	beq.n	8004de6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2205      	movs	r2, #5
 8004de2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	887a      	ldrh	r2, [r7, #2]
 8004df6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	887a      	ldrh	r2, [r7, #2]
 8004dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	887a      	ldrh	r2, [r7, #2]
 8004e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	887a      	ldrh	r2, [r7, #2]
 8004e12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e28:	d802      	bhi.n	8004e30 <HAL_SPI_TransmitReceive+0xe6>
 8004e2a:	8a3b      	ldrh	r3, [r7, #16]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d908      	bls.n	8004e42 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	e007      	b.n	8004e52 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b40      	cmp	r3, #64	; 0x40
 8004e5e:	d007      	beq.n	8004e70 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e78:	d97c      	bls.n	8004f74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d002      	beq.n	8004e88 <HAL_SPI_TransmitReceive+0x13e>
 8004e82:	8a7b      	ldrh	r3, [r7, #18]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d169      	bne.n	8004f5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8c:	881a      	ldrh	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	1c9a      	adds	r2, r3, #2
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	3b01      	subs	r3, #1
 8004ea6:	b29a      	uxth	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eac:	e056      	b.n	8004f5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d11b      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x1aa>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d016      	beq.n	8004ef4 <HAL_SPI_TransmitReceive+0x1aa>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d113      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed0:	881a      	ldrh	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004edc:	1c9a      	adds	r2, r3, #2
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d11c      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x1f2>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f20:	1c9a      	adds	r2, r3, #2
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f3c:	f7fd f922 	bl	8002184 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d807      	bhi.n	8004f5c <HAL_SPI_TransmitReceive+0x212>
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f52:	d003      	beq.n	8004f5c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f5a:	e0fb      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1a3      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x164>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d19d      	bne.n	8004eae <HAL_SPI_TransmitReceive+0x164>
 8004f72:	e0df      	b.n	8005134 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x23a>
 8004f7c:	8a7b      	ldrh	r3, [r7, #18]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	f040 80cb 	bne.w	800511a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d912      	bls.n	8004fb4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	881a      	ldrh	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	1c9a      	adds	r2, r3, #2
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b02      	subs	r3, #2
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fb2:	e0b2      	b.n	800511a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	330c      	adds	r3, #12
 8004fbe:	7812      	ldrb	r2, [r2, #0]
 8004fc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	b29a      	uxth	r2, r3
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fda:	e09e      	b.n	800511a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d134      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x30a>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02f      	beq.n	8005054 <HAL_SPI_TransmitReceive+0x30a>
 8004ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d12c      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d912      	bls.n	800502a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005008:	881a      	ldrh	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	1c9a      	adds	r2, r3, #2
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800501e:	b29b      	uxth	r3, r3
 8005020:	3b02      	subs	r3, #2
 8005022:	b29a      	uxth	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005028:	e012      	b.n	8005050 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	330c      	adds	r3, #12
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b01      	cmp	r3, #1
 8005060:	d148      	bne.n	80050f4 <HAL_SPI_TransmitReceive+0x3aa>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d042      	beq.n	80050f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b01      	cmp	r3, #1
 8005078:	d923      	bls.n	80050c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68da      	ldr	r2, [r3, #12]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	b292      	uxth	r2, r2
 8005086:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	1c9a      	adds	r2, r3, #2
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b02      	subs	r3, #2
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d81f      	bhi.n	80050f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	e016      	b.n	80050f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f103 020c 	add.w	r2, r3, #12
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	7812      	ldrb	r2, [r2, #0]
 80050d0:	b2d2      	uxtb	r2, r2
 80050d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050f0:	2301      	movs	r3, #1
 80050f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050f4:	f7fd f846 	bl	8002184 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005100:	429a      	cmp	r2, r3
 8005102:	d803      	bhi.n	800510c <HAL_SPI_TransmitReceive+0x3c2>
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510a:	d102      	bne.n	8005112 <HAL_SPI_TransmitReceive+0x3c8>
 800510c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510e:	2b00      	cmp	r3, #0
 8005110:	d103      	bne.n	800511a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005118:	e01c      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511e:	b29b      	uxth	r3, r3
 8005120:	2b00      	cmp	r3, #0
 8005122:	f47f af5b 	bne.w	8004fdc <HAL_SPI_TransmitReceive+0x292>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	f47f af54 	bne.w	8004fdc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f000 f933 	bl	80053a4 <SPI_EndRxTxTransaction>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d006      	beq.n	8005152 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2220      	movs	r2, #32
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
 8005150:	e000      	b.n	8005154 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005152:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	; 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	4613      	mov	r3, r2
 800517e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005180:	f7fd f800 	bl	8002184 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	4413      	add	r3, r2
 800518e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005190:	f7fc fff8 	bl	8002184 <HAL_GetTick>
 8005194:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	015b      	lsls	r3, r3, #5
 800519c:	0d1b      	lsrs	r3, r3, #20
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	fb02 f303 	mul.w	r3, r2, r3
 80051a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051a6:	e054      	b.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051ae:	d050      	beq.n	8005252 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b0:	f7fc ffe8 	bl	8002184 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d902      	bls.n	80051c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d13d      	bne.n	8005242 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051de:	d111      	bne.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051e8:	d004      	beq.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f2:	d107      	bne.n	8005204 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005202:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800520c:	d10f      	bne.n	800522e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800522c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e017      	b.n	8005272 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3b01      	subs	r3, #1
 8005250:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4013      	ands	r3, r2
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	bf0c      	ite	eq
 8005262:	2301      	moveq	r3, #1
 8005264:	2300      	movne	r3, #0
 8005266:	b2db      	uxtb	r3, r3
 8005268:	461a      	mov	r2, r3
 800526a:	79fb      	ldrb	r3, [r7, #7]
 800526c:	429a      	cmp	r2, r3
 800526e:	d19b      	bne.n	80051a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000000 	.word	0x20000000

08005280 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af00      	add	r7, sp, #0
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800528e:	f7fc ff79 	bl	8002184 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	683a      	ldr	r2, [r7, #0]
 800529a:	4413      	add	r3, r2
 800529c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800529e:	f7fc ff71 	bl	8002184 <HAL_GetTick>
 80052a2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80052a4:	4b3e      	ldr	r3, [pc, #248]	; (80053a0 <SPI_WaitFifoStateUntilTimeout+0x120>)
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	00da      	lsls	r2, r3, #3
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	0d1b      	lsrs	r3, r3, #20
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	fb02 f303 	mul.w	r3, r2, r3
 80052ba:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 80052bc:	e062      	b.n	8005384 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80052c4:	d109      	bne.n	80052da <SPI_WaitFifoStateUntilTimeout+0x5a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 80052d8:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052e0:	d050      	beq.n	8005384 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80052e2:	f7fc ff4f 	bl	8002184 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d902      	bls.n	80052f8 <SPI_WaitFifoStateUntilTimeout+0x78>
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d13d      	bne.n	8005374 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685a      	ldr	r2, [r3, #4]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005306:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005310:	d111      	bne.n	8005336 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531a:	d004      	beq.n	8005326 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005324:	d107      	bne.n	8005336 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005334:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800533e:	d10f      	bne.n	8005360 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800535e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e010      	b.n	8005396 <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	3b01      	subs	r3, #1
 8005382:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	4013      	ands	r3, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d194      	bne.n	80052be <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3720      	adds	r7, #32
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000000 	.word	0x20000000

080053a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f7ff ff5f 	bl	8005280 <SPI_WaitFifoStateUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053cc:	f043 0220 	orr.w	r2, r3, #32
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e027      	b.n	8005428 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	2200      	movs	r2, #0
 80053e0:	2180      	movs	r1, #128	; 0x80
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f7ff fec4 	bl	8005170 <SPI_WaitFlagStateUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d007      	beq.n	80053fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053f2:	f043 0220 	orr.w	r2, r3, #32
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e014      	b.n	8005428 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2200      	movs	r2, #0
 8005406:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f7ff ff38 	bl	8005280 <SPI_WaitFifoStateUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800541a:	f043 0220 	orr.w	r2, r3, #32
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e000      	b.n	8005428 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e049      	b.n	80054d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fc fd94 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	3304      	adds	r3, #4
 800546c:	4619      	mov	r1, r3
 800546e:	4610      	mov	r0, r2
 8005470:	f000 f9d2 	bl	8005818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e03b      	b.n	8005570 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a19      	ldr	r2, [pc, #100]	; (800557c <HAL_TIM_Base_Start_IT+0x9c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_TIM_Base_Start_IT+0x4e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005522:	d004      	beq.n	800552e <HAL_TIM_Base_Start_IT+0x4e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a15      	ldr	r2, [pc, #84]	; (8005580 <HAL_TIM_Base_Start_IT+0xa0>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d115      	bne.n	800555a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	4b13      	ldr	r3, [pc, #76]	; (8005584 <HAL_TIM_Base_Start_IT+0xa4>)
 8005536:	4013      	ands	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b06      	cmp	r3, #6
 800553e:	d015      	beq.n	800556c <HAL_TIM_Base_Start_IT+0x8c>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005546:	d011      	beq.n	800556c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	e008      	b.n	800556c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e000      	b.n	800556e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	40012c00 	.word	0x40012c00
 8005580:	40014000 	.word	0x40014000
 8005584:	00010007 	.word	0x00010007

08005588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b02      	cmp	r3, #2
 800559c:	d122      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0202 	mvn.w	r2, #2
 80055b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f905 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f8f7 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f908 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b04      	cmp	r3, #4
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0204 	mvn.w	r2, #4
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f8db 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f8cd 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f8de 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b08      	cmp	r3, #8
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	2b08      	cmp	r3, #8
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0208 	mvn.w	r2, #8
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2204      	movs	r2, #4
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f003 0303 	and.w	r3, r3, #3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8b1 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f8a3 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f8b4 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0310 	and.w	r3, r3, #16
 8005696:	2b10      	cmp	r3, #16
 8005698:	d122      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	2b10      	cmp	r3, #16
 80056a6:	d11b      	bne.n	80056e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0210 	mvn.w	r2, #16
 80056b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2208      	movs	r2, #8
 80056b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d003      	beq.n	80056ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f887 	bl	80057da <HAL_TIM_IC_CaptureCallback>
 80056cc:	e005      	b.n	80056da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f879 	bl	80057c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f88a 	bl	80057ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d10e      	bne.n	800570c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d107      	bne.n	800570c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f06f 0201 	mvn.w	r2, #1
 8005704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc f820 	bl	800174c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005716:	2b80      	cmp	r3, #128	; 0x80
 8005718:	d10e      	bne.n	8005738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005724:	2b80      	cmp	r3, #128	; 0x80
 8005726:	d107      	bne.n	8005738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f944 	bl	80059c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005746:	d10e      	bne.n	8005766 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d107      	bne.n	8005766 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800575e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f937 	bl	80059d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b40      	cmp	r3, #64	; 0x40
 8005772:	d10e      	bne.n	8005792 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d107      	bne.n	8005792 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f838 	bl	8005802 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b20      	cmp	r3, #32
 800579e:	d10e      	bne.n	80057be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b20      	cmp	r3, #32
 80057ac:	d107      	bne.n	80057be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f06f 0220 	mvn.w	r2, #32
 80057b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f8f7 	bl	80059ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80057e2:	bf00      	nop
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
	...

08005818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a2a      	ldr	r2, [pc, #168]	; (80058d4 <TIM_Base_SetConfig+0xbc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d003      	beq.n	8005838 <TIM_Base_SetConfig+0x20>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005836:	d108      	bne.n	800584a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <TIM_Base_SetConfig+0xbc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00b      	beq.n	800586a <TIM_Base_SetConfig+0x52>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005858:	d007      	beq.n	800586a <TIM_Base_SetConfig+0x52>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a1e      	ldr	r2, [pc, #120]	; (80058d8 <TIM_Base_SetConfig+0xc0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d003      	beq.n	800586a <TIM_Base_SetConfig+0x52>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <TIM_Base_SetConfig+0xc4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d108      	bne.n	800587c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	689a      	ldr	r2, [r3, #8]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a0c      	ldr	r2, [pc, #48]	; (80058d4 <TIM_Base_SetConfig+0xbc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <TIM_Base_SetConfig+0xa0>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a0b      	ldr	r2, [pc, #44]	; (80058d8 <TIM_Base_SetConfig+0xc0>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_Base_SetConfig+0xa0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0a      	ldr	r2, [pc, #40]	; (80058dc <TIM_Base_SetConfig+0xc4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d103      	bne.n	80058c0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	615a      	str	r2, [r3, #20]
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40014000 	.word	0x40014000
 80058dc:	40014400 	.word	0x40014400

080058e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e04f      	b.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a21      	ldr	r2, [pc, #132]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d108      	bne.n	8005934 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005928:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	4313      	orrs	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d009      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005960:	d004      	beq.n	800596c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a10      	ldr	r2, [pc, #64]	; (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10c      	bne.n	8005986 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	4313      	orrs	r3, r2
 800597c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr
 80059a4:	40012c00 	.word	0x40012c00
 80059a8:	40014000 	.word	0x40014000

080059ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e040      	b.n	8005a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d106      	bne.n	8005a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7fc fb10 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2224      	movs	r2, #36	; 0x24
 8005a14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f82c 	bl	8005a84 <UART_SetConfig>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d101      	bne.n	8005a36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e022      	b.n	8005a7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fa2c 	bl	8005e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 fab3 	bl	8005fe0 <UART_CheckIdleState>
 8005a7a:	4603      	mov	r3, r0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}

08005a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a84:	b5b0      	push	{r4, r5, r7, lr}
 8005a86:	b088      	sub	sp, #32
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4baf      	ldr	r3, [pc, #700]	; (8005d6c <UART_SetConfig+0x2e8>)
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	69f9      	ldr	r1, [r7, #28]
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4aa4      	ldr	r2, [pc, #656]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	69fa      	ldr	r2, [r7, #28]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	430a      	orrs	r2, r1
 8005afe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a9b      	ldr	r2, [pc, #620]	; (8005d74 <UART_SetConfig+0x2f0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d121      	bne.n	8005b4e <UART_SetConfig+0xca>
 8005b0a:	4b9b      	ldr	r3, [pc, #620]	; (8005d78 <UART_SetConfig+0x2f4>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	d817      	bhi.n	8005b48 <UART_SetConfig+0xc4>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <UART_SetConfig+0x9c>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b3d 	.word	0x08005b3d
 8005b28:	08005b37 	.word	0x08005b37
 8005b2c:	08005b43 	.word	0x08005b43
 8005b30:	2301      	movs	r3, #1
 8005b32:	76fb      	strb	r3, [r7, #27]
 8005b34:	e070      	b.n	8005c18 <UART_SetConfig+0x194>
 8005b36:	2302      	movs	r3, #2
 8005b38:	76fb      	strb	r3, [r7, #27]
 8005b3a:	e06d      	b.n	8005c18 <UART_SetConfig+0x194>
 8005b3c:	2304      	movs	r3, #4
 8005b3e:	76fb      	strb	r3, [r7, #27]
 8005b40:	e06a      	b.n	8005c18 <UART_SetConfig+0x194>
 8005b42:	2308      	movs	r3, #8
 8005b44:	76fb      	strb	r3, [r7, #27]
 8005b46:	e067      	b.n	8005c18 <UART_SetConfig+0x194>
 8005b48:	2310      	movs	r3, #16
 8005b4a:	76fb      	strb	r3, [r7, #27]
 8005b4c:	e064      	b.n	8005c18 <UART_SetConfig+0x194>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a8a      	ldr	r2, [pc, #552]	; (8005d7c <UART_SetConfig+0x2f8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d132      	bne.n	8005bbe <UART_SetConfig+0x13a>
 8005b58:	4b87      	ldr	r3, [pc, #540]	; (8005d78 <UART_SetConfig+0x2f4>)
 8005b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5e:	f003 030c 	and.w	r3, r3, #12
 8005b62:	2b0c      	cmp	r3, #12
 8005b64:	d828      	bhi.n	8005bb8 <UART_SetConfig+0x134>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <UART_SetConfig+0xe8>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005ba1 	.word	0x08005ba1
 8005b70:	08005bb9 	.word	0x08005bb9
 8005b74:	08005bb9 	.word	0x08005bb9
 8005b78:	08005bb9 	.word	0x08005bb9
 8005b7c:	08005bad 	.word	0x08005bad
 8005b80:	08005bb9 	.word	0x08005bb9
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005bb9 	.word	0x08005bb9
 8005b8c:	08005ba7 	.word	0x08005ba7
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bb9 	.word	0x08005bb9
 8005b98:	08005bb9 	.word	0x08005bb9
 8005b9c:	08005bb3 	.word	0x08005bb3
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	76fb      	strb	r3, [r7, #27]
 8005ba4:	e038      	b.n	8005c18 <UART_SetConfig+0x194>
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	76fb      	strb	r3, [r7, #27]
 8005baa:	e035      	b.n	8005c18 <UART_SetConfig+0x194>
 8005bac:	2304      	movs	r3, #4
 8005bae:	76fb      	strb	r3, [r7, #27]
 8005bb0:	e032      	b.n	8005c18 <UART_SetConfig+0x194>
 8005bb2:	2308      	movs	r3, #8
 8005bb4:	76fb      	strb	r3, [r7, #27]
 8005bb6:	e02f      	b.n	8005c18 <UART_SetConfig+0x194>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	76fb      	strb	r3, [r7, #27]
 8005bbc:	e02c      	b.n	8005c18 <UART_SetConfig+0x194>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a6b      	ldr	r2, [pc, #428]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d125      	bne.n	8005c14 <UART_SetConfig+0x190>
 8005bc8:	4b6b      	ldr	r3, [pc, #428]	; (8005d78 <UART_SetConfig+0x2f4>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005bd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bd6:	d017      	beq.n	8005c08 <UART_SetConfig+0x184>
 8005bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bdc:	d817      	bhi.n	8005c0e <UART_SetConfig+0x18a>
 8005bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be2:	d00b      	beq.n	8005bfc <UART_SetConfig+0x178>
 8005be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005be8:	d811      	bhi.n	8005c0e <UART_SetConfig+0x18a>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d003      	beq.n	8005bf6 <UART_SetConfig+0x172>
 8005bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bf2:	d006      	beq.n	8005c02 <UART_SetConfig+0x17e>
 8005bf4:	e00b      	b.n	8005c0e <UART_SetConfig+0x18a>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	76fb      	strb	r3, [r7, #27]
 8005bfa:	e00d      	b.n	8005c18 <UART_SetConfig+0x194>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	76fb      	strb	r3, [r7, #27]
 8005c00:	e00a      	b.n	8005c18 <UART_SetConfig+0x194>
 8005c02:	2304      	movs	r3, #4
 8005c04:	76fb      	strb	r3, [r7, #27]
 8005c06:	e007      	b.n	8005c18 <UART_SetConfig+0x194>
 8005c08:	2308      	movs	r3, #8
 8005c0a:	76fb      	strb	r3, [r7, #27]
 8005c0c:	e004      	b.n	8005c18 <UART_SetConfig+0x194>
 8005c0e:	2310      	movs	r3, #16
 8005c10:	76fb      	strb	r3, [r7, #27]
 8005c12:	e001      	b.n	8005c18 <UART_SetConfig+0x194>
 8005c14:	2310      	movs	r3, #16
 8005c16:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a54      	ldr	r2, [pc, #336]	; (8005d70 <UART_SetConfig+0x2ec>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d173      	bne.n	8005d0a <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c22:	7efb      	ldrb	r3, [r7, #27]
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d824      	bhi.n	8005c72 <UART_SetConfig+0x1ee>
 8005c28:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <UART_SetConfig+0x1ac>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c55 	.word	0x08005c55
 8005c34:	08005c73 	.word	0x08005c73
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c73 	.word	0x08005c73
 8005c40:	08005c63 	.word	0x08005c63
 8005c44:	08005c73 	.word	0x08005c73
 8005c48:	08005c73 	.word	0x08005c73
 8005c4c:	08005c73 	.word	0x08005c73
 8005c50:	08005c6b 	.word	0x08005c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c54:	f7fe fc22 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005c58:	6178      	str	r0, [r7, #20]
        break;
 8005c5a:	e00f      	b.n	8005c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c5c:	4b48      	ldr	r3, [pc, #288]	; (8005d80 <UART_SetConfig+0x2fc>)
 8005c5e:	617b      	str	r3, [r7, #20]
        break;
 8005c60:	e00c      	b.n	8005c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c62:	f7fe fb83 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8005c66:	6178      	str	r0, [r7, #20]
        break;
 8005c68:	e008      	b.n	8005c7c <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c6e:	617b      	str	r3, [r7, #20]
        break;
 8005c70:	e004      	b.n	8005c7c <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	76bb      	strb	r3, [r7, #26]
        break;
 8005c7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 80fe 	beq.w	8005e80 <UART_SetConfig+0x3fc>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	4413      	add	r3, r2
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d305      	bcc.n	8005ca0 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d902      	bls.n	8005ca6 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	76bb      	strb	r3, [r7, #26]
 8005ca4:	e0ec      	b.n	8005e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f04f 0100 	mov.w	r1, #0
 8005cae:	f04f 0200 	mov.w	r2, #0
 8005cb2:	f04f 0300 	mov.w	r3, #0
 8005cb6:	020b      	lsls	r3, r1, #8
 8005cb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005cbc:	0202      	lsls	r2, r0, #8
 8005cbe:	6879      	ldr	r1, [r7, #4]
 8005cc0:	6849      	ldr	r1, [r1, #4]
 8005cc2:	0849      	lsrs	r1, r1, #1
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	f04f 0100 	mov.w	r1, #0
 8005cca:	1814      	adds	r4, r2, r0
 8005ccc:	eb43 0501 	adc.w	r5, r3, r1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f04f 0300 	mov.w	r3, #0
 8005cda:	4620      	mov	r0, r4
 8005cdc:	4629      	mov	r1, r5
 8005cde:	f7fa fb17 	bl	8000310 <__aeabi_uldivmod>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cf0:	d308      	bcc.n	8005d04 <UART_SetConfig+0x280>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf8:	d204      	bcs.n	8005d04 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	e0bd      	b.n	8005e80 <UART_SetConfig+0x3fc>
        }
        else
        {
          ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	76bb      	strb	r3, [r7, #26]
 8005d08:	e0ba      	b.n	8005e80 <UART_SetConfig+0x3fc>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d12:	d168      	bne.n	8005de6 <UART_SetConfig+0x362>
  {
    switch (clocksource)
 8005d14:	7efb      	ldrb	r3, [r7, #27]
 8005d16:	2b08      	cmp	r3, #8
 8005d18:	d834      	bhi.n	8005d84 <UART_SetConfig+0x300>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <UART_SetConfig+0x29c>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005d4d 	.word	0x08005d4d
 8005d28:	08005d55 	.word	0x08005d55
 8005d2c:	08005d85 	.word	0x08005d85
 8005d30:	08005d5b 	.word	0x08005d5b
 8005d34:	08005d85 	.word	0x08005d85
 8005d38:	08005d85 	.word	0x08005d85
 8005d3c:	08005d85 	.word	0x08005d85
 8005d40:	08005d63 	.word	0x08005d63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d44:	f7fe fbaa 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005d48:	6178      	str	r0, [r7, #20]
        break;
 8005d4a:	e020      	b.n	8005d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d4c:	f7fe fbbc 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 8005d50:	6178      	str	r0, [r7, #20]
        break;
 8005d52:	e01c      	b.n	8005d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <UART_SetConfig+0x2fc>)
 8005d56:	617b      	str	r3, [r7, #20]
        break;
 8005d58:	e019      	b.n	8005d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d5a:	f7fe fb07 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8005d5e:	6178      	str	r0, [r7, #20]
        break;
 8005d60:	e015      	b.n	8005d8e <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d66:	617b      	str	r3, [r7, #20]
        break;
 8005d68:	e011      	b.n	8005d8e <UART_SetConfig+0x30a>
 8005d6a:	bf00      	nop
 8005d6c:	efff69f3 	.word	0xefff69f3
 8005d70:	40008000 	.word	0x40008000
 8005d74:	40013800 	.word	0x40013800
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	40004400 	.word	0x40004400
 8005d80:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	76bb      	strb	r3, [r7, #26]
        break;
 8005d8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d075      	beq.n	8005e80 <UART_SetConfig+0x3fc>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	005a      	lsls	r2, r3, #1
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	085b      	lsrs	r3, r3, #1
 8005d9e:	441a      	add	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	d916      	bls.n	8005de0 <UART_SetConfig+0x35c>
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db8:	d212      	bcs.n	8005de0 <UART_SetConfig+0x35c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f023 030f 	bic.w	r3, r3, #15
 8005dc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	085b      	lsrs	r3, r3, #1
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	b29a      	uxth	r2, r3
 8005dd0:	89fb      	ldrh	r3, [r7, #14]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	89fa      	ldrh	r2, [r7, #14]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	e04f      	b.n	8005e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	76bb      	strb	r3, [r7, #26]
 8005de4:	e04c      	b.n	8005e80 <UART_SetConfig+0x3fc>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005de6:	7efb      	ldrb	r3, [r7, #27]
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d828      	bhi.n	8005e3e <UART_SetConfig+0x3ba>
 8005dec:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <UART_SetConfig+0x370>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e19 	.word	0x08005e19
 8005df8:	08005e21 	.word	0x08005e21
 8005dfc:	08005e29 	.word	0x08005e29
 8005e00:	08005e3f 	.word	0x08005e3f
 8005e04:	08005e2f 	.word	0x08005e2f
 8005e08:	08005e3f 	.word	0x08005e3f
 8005e0c:	08005e3f 	.word	0x08005e3f
 8005e10:	08005e3f 	.word	0x08005e3f
 8005e14:	08005e37 	.word	0x08005e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e18:	f7fe fb40 	bl	800449c <HAL_RCC_GetPCLK1Freq>
 8005e1c:	6178      	str	r0, [r7, #20]
        break;
 8005e1e:	e013      	b.n	8005e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e20:	f7fe fb52 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 8005e24:	6178      	str	r0, [r7, #20]
        break;
 8005e26:	e00f      	b.n	8005e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e28:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <UART_SetConfig+0x414>)
 8005e2a:	617b      	str	r3, [r7, #20]
        break;
 8005e2c:	e00c      	b.n	8005e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e2e:	f7fe fa9d 	bl	800436c <HAL_RCC_GetSysClockFreq>
 8005e32:	6178      	str	r0, [r7, #20]
        break;
 8005e34:	e008      	b.n	8005e48 <UART_SetConfig+0x3c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e3a:	617b      	str	r3, [r7, #20]
        break;
 8005e3c:	e004      	b.n	8005e48 <UART_SetConfig+0x3c4>
      default:
        pclk = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	76bb      	strb	r3, [r7, #26]
        break;
 8005e46:	bf00      	nop
    }

    if (pclk != 0U)
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d018      	beq.n	8005e80 <UART_SetConfig+0x3fc>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	085a      	lsrs	r2, r3, #1
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	441a      	add	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	d908      	bls.n	8005e7c <UART_SetConfig+0x3f8>
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e70:	d204      	bcs.n	8005e7c <UART_SetConfig+0x3f8>
      {
        huart->Instance->BRR = usartdiv;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	60da      	str	r2, [r3, #12]
 8005e7a:	e001      	b.n	8005e80 <UART_SetConfig+0x3fc>
      }
      else
      {
        ret = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e8c:	7ebb      	ldrb	r3, [r7, #26]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bdb0      	pop	{r4, r5, r7, pc}
 8005e96:	bf00      	nop
 8005e98:	00f42400 	.word	0x00f42400

08005e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	f003 0301 	and.w	r3, r3, #1
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	430a      	orrs	r2, r1
 8005f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	f003 0308 	and.w	r3, r3, #8
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f30:	f003 0310 	and.w	r3, r3, #16
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01a      	beq.n	8005fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f9a:	d10a      	bne.n	8005fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00a      	beq.n	8005fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ff0:	f7fc f8c8 	bl	8002184 <HAL_GetTick>
 8005ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b08      	cmp	r3, #8
 8006002:	d10e      	bne.n	8006022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f82d 	bl	8006072 <UART_WaitOnFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800601e:	2303      	movs	r3, #3
 8006020:	e023      	b.n	800606a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b04      	cmp	r3, #4
 800602e:	d10e      	bne.n	800604e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 f817 	bl	8006072 <UART_WaitOnFlagUntilTimeout>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e00d      	b.n	800606a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2220      	movs	r2, #32
 8006052:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2220      	movs	r2, #32
 8006058:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b084      	sub	sp, #16
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006082:	e05e      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800608a:	d05a      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608c:	f7fc f87a 	bl	8002184 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d11b      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0201 	bic.w	r2, r2, #1
 80060c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e043      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 0304 	and.w	r3, r3, #4
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d02c      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f6:	d124      	bne.n	8006142 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006100:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006110:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0201 	bic.w	r2, r2, #1
 8006120:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2220      	movs	r2, #32
 8006132:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e00f      	b.n	8006162 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	4013      	ands	r3, r2
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	429a      	cmp	r2, r3
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	461a      	mov	r2, r3
 800615a:	79fb      	ldrb	r3, [r7, #7]
 800615c:	429a      	cmp	r2, r3
 800615e:	d091      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006170:	4904      	ldr	r1, [pc, #16]	; (8006184 <MX_FATFS_Init+0x18>)
 8006172:	4805      	ldr	r0, [pc, #20]	; (8006188 <MX_FATFS_Init+0x1c>)
 8006174:	f003 f87c 	bl	8009270 <FATFS_LinkDriver>
 8006178:	4603      	mov	r3, r0
 800617a:	461a      	mov	r2, r3
 800617c:	4b03      	ldr	r3, [pc, #12]	; (800618c <MX_FATFS_Init+0x20>)
 800617e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006180:	bf00      	nop
 8006182:	bd80      	pop	{r7, pc}
 8006184:	200008b8 	.word	0x200008b8
 8006188:	2000000c 	.word	0x2000000c
 800618c:	200008bc 	.word	0x200008bc

08006190 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006194:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006196:	4618      	mov	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b082      	sub	sp, #8
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	4603      	mov	r3, r0
 80061a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 f9d7 	bl	8006560 <USER_SPI_initialize>
 80061b2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	4603      	mov	r3, r0
 80061c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fa9f 	bl	800670c <USER_SPI_status>
 80061ce:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60b9      	str	r1, [r7, #8]
 80061e0:	607a      	str	r2, [r7, #4]
 80061e2:	603b      	str	r3, [r7, #0]
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80061e8:	7bf8      	ldrb	r0, [r7, #15]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	f000 faa2 	bl	8006738 <USER_SPI_read>
 80061f4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	60b9      	str	r1, [r7, #8]
 8006206:	607a      	str	r2, [r7, #4]
 8006208:	603b      	str	r3, [r7, #0]
 800620a:	4603      	mov	r3, r0
 800620c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800620e:	7bf8      	ldrb	r0, [r7, #15]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	68b9      	ldr	r1, [r7, #8]
 8006216:	f000 faf5 	bl	8006804 <USER_SPI_write>
 800621a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800621c:	4618      	mov	r0, r3
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	4603      	mov	r3, r0
 800622c:	603a      	str	r2, [r7, #0]
 800622e:	71fb      	strb	r3, [r7, #7]
 8006230:	460b      	mov	r3, r1
 8006232:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006234:	79b9      	ldrb	r1, [r7, #6]
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fb5e 	bl	80068fc <USER_SPI_ioctl>
 8006240:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006254:	f7fb ff96 	bl	8002184 <HAL_GetTick>
 8006258:	4603      	mov	r3, r0
 800625a:	4a04      	ldr	r2, [pc, #16]	; (800626c <SPI_Timer_On+0x20>)
 800625c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800625e:	4a04      	ldr	r2, [pc, #16]	; (8006270 <SPI_Timer_On+0x24>)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6013      	str	r3, [r2, #0]
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	20000d20 	.word	0x20000d20
 8006270:	20000d24 	.word	0x20000d24

08006274 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006274:	b580      	push	{r7, lr}
 8006276:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006278:	f7fb ff84 	bl	8002184 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	4b06      	ldr	r3, [pc, #24]	; (8006298 <SPI_Timer_Status+0x24>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	1ad2      	subs	r2, r2, r3
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <SPI_Timer_Status+0x28>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	bf34      	ite	cc
 800628c:	2301      	movcc	r3, #1
 800628e:	2300      	movcs	r3, #0
 8006290:	b2db      	uxtb	r3, r3
}
 8006292:	4618      	mov	r0, r3
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	20000d20 	.word	0x20000d20
 800629c:	20000d24 	.word	0x20000d24

080062a0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&hspi1, &dat, &rxDat, 1, 50);
 80062aa:	f107 020f 	add.w	r2, r7, #15
 80062ae:	1df9      	adds	r1, r7, #7
 80062b0:	2332      	movs	r3, #50	; 0x32
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2301      	movs	r3, #1
 80062b6:	4804      	ldr	r0, [pc, #16]	; (80062c8 <xchg_spi+0x28>)
 80062b8:	f7fe fd47 	bl	8004d4a <HAL_SPI_TransmitReceive>
    return rxDat;
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000734 	.word	0x20000734

080062cc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	e00a      	b.n	80062f2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	18d4      	adds	r4, r2, r3
 80062e2:	20ff      	movs	r0, #255	; 0xff
 80062e4:	f7ff ffdc 	bl	80062a0 <xchg_spi>
 80062e8:	4603      	mov	r3, r0
 80062ea:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d3f0      	bcc.n	80062dc <rcvr_spi_multi+0x10>
	}
}
 80062fa:	bf00      	nop
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	bd90      	pop	{r4, r7, pc}

08006304 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	e009      	b.n	8006328 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff ffbf 	bl	80062a0 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3301      	adds	r3, #1
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d3f1      	bcc.n	8006314 <xmit_spi_multi+0x10>
	}
}
 8006330:	bf00      	nop
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006342:	f7fb ff1f 	bl	8002184 <HAL_GetTick>
 8006346:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800634c:	20ff      	movs	r0, #255	; 0xff
 800634e:	f7ff ffa7 	bl	80062a0 <xchg_spi>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006356:	7bfb      	ldrb	r3, [r7, #15]
 8006358:	2bff      	cmp	r3, #255	; 0xff
 800635a:	d007      	beq.n	800636c <wait_ready+0x32>
 800635c:	f7fb ff12 	bl	8002184 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	429a      	cmp	r2, r3
 800636a:	d8ef      	bhi.n	800634c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2bff      	cmp	r3, #255	; 0xff
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006384:	2201      	movs	r2, #1
 8006386:	2102      	movs	r1, #2
 8006388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800638c:	f7fc f976 	bl	800267c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006390:	20ff      	movs	r0, #255	; 0xff
 8006392:	f7ff ff85 	bl	80062a0 <xchg_spi>

}
 8006396:	bf00      	nop
 8006398:	bd80      	pop	{r7, pc}

0800639a <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800639a:	b580      	push	{r7, lr}
 800639c:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800639e:	2200      	movs	r2, #0
 80063a0:	2102      	movs	r1, #2
 80063a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80063a6:	f7fc f969 	bl	800267c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80063aa:	20ff      	movs	r0, #255	; 0xff
 80063ac:	f7ff ff78 	bl	80062a0 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80063b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063b4:	f7ff ffc1 	bl	800633a <wait_ready>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <spiselect+0x28>
 80063be:	2301      	movs	r3, #1
 80063c0:	e002      	b.n	80063c8 <spiselect+0x2e>

	despiselect();
 80063c2:	f7ff ffdd 	bl	8006380 <despiselect>
	return 0;	/* Timeout */
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd80      	pop	{r7, pc}

080063cc <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80063d6:	20c8      	movs	r0, #200	; 0xc8
 80063d8:	f7ff ff38 	bl	800624c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80063dc:	20ff      	movs	r0, #255	; 0xff
 80063de:	f7ff ff5f 	bl	80062a0 <xchg_spi>
 80063e2:	4603      	mov	r3, r0
 80063e4:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80063e6:	7bfb      	ldrb	r3, [r7, #15]
 80063e8:	2bff      	cmp	r3, #255	; 0xff
 80063ea:	d104      	bne.n	80063f6 <rcvr_datablock+0x2a>
 80063ec:	f7ff ff42 	bl	8006274 <SPI_Timer_Status>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1f2      	bne.n	80063dc <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2bfe      	cmp	r3, #254	; 0xfe
 80063fa:	d001      	beq.n	8006400 <rcvr_datablock+0x34>
 80063fc:	2300      	movs	r3, #0
 80063fe:	e00a      	b.n	8006416 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006400:	6839      	ldr	r1, [r7, #0]
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f7ff ff62 	bl	80062cc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006408:	20ff      	movs	r0, #255	; 0xff
 800640a:	f7ff ff49 	bl	80062a0 <xchg_spi>
 800640e:	20ff      	movs	r0, #255	; 0xff
 8006410:	f7ff ff46 	bl	80062a0 <xchg_spi>

	return 1;						/* Function succeeded */
 8006414:	2301      	movs	r3, #1
}
 8006416:	4618      	mov	r0, r3
 8006418:	3710      	adds	r7, #16
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
 8006426:	460b      	mov	r3, r1
 8006428:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800642a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800642e:	f7ff ff84 	bl	800633a <wait_ready>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d101      	bne.n	800643c <xmit_datablock+0x1e>
 8006438:	2300      	movs	r3, #0
 800643a:	e01e      	b.n	800647a <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800643c:	78fb      	ldrb	r3, [r7, #3]
 800643e:	4618      	mov	r0, r3
 8006440:	f7ff ff2e 	bl	80062a0 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006444:	78fb      	ldrb	r3, [r7, #3]
 8006446:	2bfd      	cmp	r3, #253	; 0xfd
 8006448:	d016      	beq.n	8006478 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800644a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ff58 	bl	8006304 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006454:	20ff      	movs	r0, #255	; 0xff
 8006456:	f7ff ff23 	bl	80062a0 <xchg_spi>
 800645a:	20ff      	movs	r0, #255	; 0xff
 800645c:	f7ff ff20 	bl	80062a0 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006460:	20ff      	movs	r0, #255	; 0xff
 8006462:	f7ff ff1d 	bl	80062a0 <xchg_spi>
 8006466:	4603      	mov	r3, r0
 8006468:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800646a:	7bfb      	ldrb	r3, [r7, #15]
 800646c:	f003 031f 	and.w	r3, r3, #31
 8006470:	2b05      	cmp	r3, #5
 8006472:	d001      	beq.n	8006478 <xmit_datablock+0x5a>
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <xmit_datablock+0x5c>
	}
	return 1;
 8006478:	2301      	movs	r3, #1
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	4603      	mov	r3, r0
 800648a:	6039      	str	r1, [r7, #0]
 800648c:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800648e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006492:	2b00      	cmp	r3, #0
 8006494:	da0e      	bge.n	80064b4 <send_cmd+0x32>
		cmd &= 0x7F;
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800649c:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800649e:	2100      	movs	r1, #0
 80064a0:	2037      	movs	r0, #55	; 0x37
 80064a2:	f7ff ffee 	bl	8006482 <send_cmd>
 80064a6:	4603      	mov	r3, r0
 80064a8:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 80064aa:	7bbb      	ldrb	r3, [r7, #14]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d901      	bls.n	80064b4 <send_cmd+0x32>
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
 80064b2:	e051      	b.n	8006558 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 80064b4:	79fb      	ldrb	r3, [r7, #7]
 80064b6:	2b0c      	cmp	r3, #12
 80064b8:	d008      	beq.n	80064cc <send_cmd+0x4a>
		despiselect();
 80064ba:	f7ff ff61 	bl	8006380 <despiselect>
		if (!spiselect()) return 0xFF;
 80064be:	f7ff ff6c 	bl	800639a <spiselect>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <send_cmd+0x4a>
 80064c8:	23ff      	movs	r3, #255	; 0xff
 80064ca:	e045      	b.n	8006558 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7ff fee3 	bl	80062a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	0e1b      	lsrs	r3, r3, #24
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fedd 	bl	80062a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fed7 	bl	80062a0 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	0a1b      	lsrs	r3, r3, #8
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fed1 	bl	80062a0 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	b2db      	uxtb	r3, r3
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fecc 	bl	80062a0 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006508:	2301      	movs	r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800650c:	79fb      	ldrb	r3, [r7, #7]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <send_cmd+0x94>
 8006512:	2395      	movs	r3, #149	; 0x95
 8006514:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006516:	79fb      	ldrb	r3, [r7, #7]
 8006518:	2b08      	cmp	r3, #8
 800651a:	d101      	bne.n	8006520 <send_cmd+0x9e>
 800651c:	2387      	movs	r3, #135	; 0x87
 800651e:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006520:	7bfb      	ldrb	r3, [r7, #15]
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff febc 	bl	80062a0 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	2b0c      	cmp	r3, #12
 800652c:	d102      	bne.n	8006534 <send_cmd+0xb2>
 800652e:	20ff      	movs	r0, #255	; 0xff
 8006530:	f7ff feb6 	bl	80062a0 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006534:	230a      	movs	r3, #10
 8006536:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006538:	20ff      	movs	r0, #255	; 0xff
 800653a:	f7ff feb1 	bl	80062a0 <xchg_spi>
 800653e:	4603      	mov	r3, r0
 8006540:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006542:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006546:	2b00      	cmp	r3, #0
 8006548:	da05      	bge.n	8006556 <send_cmd+0xd4>
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	3b01      	subs	r3, #1
 800654e:	73fb      	strb	r3, [r7, #15]
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d1f0      	bne.n	8006538 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006556:	7bbb      	ldrb	r3, [r7, #14]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006560:	b590      	push	{r4, r7, lr}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800656a:	79fb      	ldrb	r3, [r7, #7]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d001      	beq.n	8006574 <USER_SPI_initialize+0x14>
 8006570:	2301      	movs	r3, #1
 8006572:	e0c2      	b.n	80066fa <USER_SPI_initialize+0x19a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006574:	4b63      	ldr	r3, [pc, #396]	; (8006704 <USER_SPI_initialize+0x1a4>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <USER_SPI_initialize+0x2a>
 8006582:	4b60      	ldr	r3, [pc, #384]	; (8006704 <USER_SPI_initialize+0x1a4>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	b2db      	uxtb	r3, r3
 8006588:	e0b7      	b.n	80066fa <USER_SPI_initialize+0x19a>

	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800658a:	230a      	movs	r3, #10
 800658c:	73fb      	strb	r3, [r7, #15]
 800658e:	e005      	b.n	800659c <USER_SPI_initialize+0x3c>
 8006590:	20ff      	movs	r0, #255	; 0xff
 8006592:	f7ff fe85 	bl	80062a0 <xchg_spi>
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	3b01      	subs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f6      	bne.n	8006590 <USER_SPI_initialize+0x30>

	ty = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80065a6:	2100      	movs	r1, #0
 80065a8:	2000      	movs	r0, #0
 80065aa:	f7ff ff6a 	bl	8006482 <send_cmd>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	f040 808b 	bne.w	80066cc <USER_SPI_initialize+0x16c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80065b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065ba:	f7ff fe47 	bl	800624c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80065be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80065c2:	2008      	movs	r0, #8
 80065c4:	f7ff ff5d 	bl	8006482 <send_cmd>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d151      	bne.n	8006672 <USER_SPI_initialize+0x112>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80065ce:	2300      	movs	r3, #0
 80065d0:	73fb      	strb	r3, [r7, #15]
 80065d2:	e00d      	b.n	80065f0 <USER_SPI_initialize+0x90>
 80065d4:	7bfc      	ldrb	r4, [r7, #15]
 80065d6:	20ff      	movs	r0, #255	; 0xff
 80065d8:	f7ff fe62 	bl	80062a0 <xchg_spi>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	f107 0310 	add.w	r3, r7, #16
 80065e4:	4423      	add	r3, r4
 80065e6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	3301      	adds	r3, #1
 80065ee:	73fb      	strb	r3, [r7, #15]
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
 80065f2:	2b03      	cmp	r3, #3
 80065f4:	d9ee      	bls.n	80065d4 <USER_SPI_initialize+0x74>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80065f6:	7abb      	ldrb	r3, [r7, #10]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d167      	bne.n	80066cc <USER_SPI_initialize+0x16c>
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	2baa      	cmp	r3, #170	; 0xaa
 8006600:	d164      	bne.n	80066cc <USER_SPI_initialize+0x16c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006602:	bf00      	nop
 8006604:	f7ff fe36 	bl	8006274 <SPI_Timer_Status>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <USER_SPI_initialize+0xbe>
 800660e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006612:	20a9      	movs	r0, #169	; 0xa9
 8006614:	f7ff ff35 	bl	8006482 <send_cmd>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f2      	bne.n	8006604 <USER_SPI_initialize+0xa4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800661e:	f7ff fe29 	bl	8006274 <SPI_Timer_Status>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d051      	beq.n	80066cc <USER_SPI_initialize+0x16c>
 8006628:	2100      	movs	r1, #0
 800662a:	203a      	movs	r0, #58	; 0x3a
 800662c:	f7ff ff29 	bl	8006482 <send_cmd>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d14a      	bne.n	80066cc <USER_SPI_initialize+0x16c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006636:	2300      	movs	r3, #0
 8006638:	73fb      	strb	r3, [r7, #15]
 800663a:	e00d      	b.n	8006658 <USER_SPI_initialize+0xf8>
 800663c:	7bfc      	ldrb	r4, [r7, #15]
 800663e:	20ff      	movs	r0, #255	; 0xff
 8006640:	f7ff fe2e 	bl	80062a0 <xchg_spi>
 8006644:	4603      	mov	r3, r0
 8006646:	461a      	mov	r2, r3
 8006648:	f107 0310 	add.w	r3, r7, #16
 800664c:	4423      	add	r3, r4
 800664e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	3301      	adds	r3, #1
 8006656:	73fb      	strb	r3, [r7, #15]
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b03      	cmp	r3, #3
 800665c:	d9ee      	bls.n	800663c <USER_SPI_initialize+0xdc>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800665e:	7a3b      	ldrb	r3, [r7, #8]
 8006660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <USER_SPI_initialize+0x10c>
 8006668:	230c      	movs	r3, #12
 800666a:	e000      	b.n	800666e <USER_SPI_initialize+0x10e>
 800666c:	2304      	movs	r3, #4
 800666e:	737b      	strb	r3, [r7, #13]
 8006670:	e02c      	b.n	80066cc <USER_SPI_initialize+0x16c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006672:	2100      	movs	r1, #0
 8006674:	20a9      	movs	r0, #169	; 0xa9
 8006676:	f7ff ff04 	bl	8006482 <send_cmd>
 800667a:	4603      	mov	r3, r0
 800667c:	2b01      	cmp	r3, #1
 800667e:	d804      	bhi.n	800668a <USER_SPI_initialize+0x12a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006680:	2302      	movs	r3, #2
 8006682:	737b      	strb	r3, [r7, #13]
 8006684:	23a9      	movs	r3, #169	; 0xa9
 8006686:	73bb      	strb	r3, [r7, #14]
 8006688:	e003      	b.n	8006692 <USER_SPI_initialize+0x132>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800668a:	2301      	movs	r3, #1
 800668c:	737b      	strb	r3, [r7, #13]
 800668e:	2301      	movs	r3, #1
 8006690:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006692:	bf00      	nop
 8006694:	f7ff fdee 	bl	8006274 <SPI_Timer_Status>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <USER_SPI_initialize+0x14e>
 800669e:	7bbb      	ldrb	r3, [r7, #14]
 80066a0:	2100      	movs	r1, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f7ff feed 	bl	8006482 <send_cmd>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1f2      	bne.n	8006694 <USER_SPI_initialize+0x134>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 80066ae:	f7ff fde1 	bl	8006274 <SPI_Timer_Status>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <USER_SPI_initialize+0x168>
 80066b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066bc:	2010      	movs	r0, #16
 80066be:	f7ff fee0 	bl	8006482 <send_cmd>
 80066c2:	4603      	mov	r3, r0
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d001      	beq.n	80066cc <USER_SPI_initialize+0x16c>
				ty = 0;
 80066c8:	2300      	movs	r3, #0
 80066ca:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 80066cc:	4a0e      	ldr	r2, [pc, #56]	; (8006708 <USER_SPI_initialize+0x1a8>)
 80066ce:	7b7b      	ldrb	r3, [r7, #13]
 80066d0:	7013      	strb	r3, [r2, #0]
	despiselect();
 80066d2:	f7ff fe55 	bl	8006380 <despiselect>

	if (ty) {			/* OK */
 80066d6:	7b7b      	ldrb	r3, [r7, #13]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d008      	beq.n	80066ee <USER_SPI_initialize+0x18e>
		FCLK_FAST();			/* Set fast clock */
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80066dc:	4b09      	ldr	r3, [pc, #36]	; (8006704 <USER_SPI_initialize+0x1a4>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	4b06      	ldr	r3, [pc, #24]	; (8006704 <USER_SPI_initialize+0x1a4>)
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	e002      	b.n	80066f4 <USER_SPI_initialize+0x194>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 80066ee:	4b05      	ldr	r3, [pc, #20]	; (8006704 <USER_SPI_initialize+0x1a4>)
 80066f0:	2201      	movs	r2, #1
 80066f2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80066f4:	4b03      	ldr	r3, [pc, #12]	; (8006704 <USER_SPI_initialize+0x1a4>)
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b2db      	uxtb	r3, r3
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd90      	pop	{r4, r7, pc}
 8006702:	bf00      	nop
 8006704:	20000020 	.word	0x20000020
 8006708:	200000c4 	.word	0x200000c4

0800670c <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006716:	79fb      	ldrb	r3, [r7, #7]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <USER_SPI_status+0x14>
 800671c:	2301      	movs	r3, #1
 800671e:	e002      	b.n	8006726 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006720:	4b04      	ldr	r3, [pc, #16]	; (8006734 <USER_SPI_status+0x28>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	b2db      	uxtb	r3, r3
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	20000020 	.word	0x20000020

08006738 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	60b9      	str	r1, [r7, #8]
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	603b      	str	r3, [r7, #0]
 8006744:	4603      	mov	r3, r0
 8006746:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d102      	bne.n	8006754 <USER_SPI_read+0x1c>
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <USER_SPI_read+0x20>
 8006754:	2304      	movs	r3, #4
 8006756:	e04d      	b.n	80067f4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006758:	4b28      	ldr	r3, [pc, #160]	; (80067fc <USER_SPI_read+0xc4>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0301 	and.w	r3, r3, #1
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <USER_SPI_read+0x32>
 8006766:	2303      	movs	r3, #3
 8006768:	e044      	b.n	80067f4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800676a:	4b25      	ldr	r3, [pc, #148]	; (8006800 <USER_SPI_read+0xc8>)
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <USER_SPI_read+0x44>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	025b      	lsls	r3, r3, #9
 800677a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b01      	cmp	r3, #1
 8006780:	d111      	bne.n	80067a6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006782:	6879      	ldr	r1, [r7, #4]
 8006784:	2011      	movs	r0, #17
 8006786:	f7ff fe7c 	bl	8006482 <send_cmd>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d129      	bne.n	80067e4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006794:	68b8      	ldr	r0, [r7, #8]
 8006796:	f7ff fe19 	bl	80063cc <rcvr_datablock>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d021      	beq.n	80067e4 <USER_SPI_read+0xac>
			count = 0;
 80067a0:	2300      	movs	r3, #0
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	e01e      	b.n	80067e4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 80067a6:	6879      	ldr	r1, [r7, #4]
 80067a8:	2012      	movs	r0, #18
 80067aa:	f7ff fe6a 	bl	8006482 <send_cmd>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d117      	bne.n	80067e4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 80067b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067b8:	68b8      	ldr	r0, [r7, #8]
 80067ba:	f7ff fe07 	bl	80063cc <rcvr_datablock>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00a      	beq.n	80067da <USER_SPI_read+0xa2>
				buff += 512;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80067ca:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	603b      	str	r3, [r7, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1ed      	bne.n	80067b4 <USER_SPI_read+0x7c>
 80067d8:	e000      	b.n	80067dc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 80067da:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 80067dc:	2100      	movs	r1, #0
 80067de:	200c      	movs	r0, #12
 80067e0:	f7ff fe4f 	bl	8006482 <send_cmd>
		}
	}
	despiselect();
 80067e4:	f7ff fdcc 	bl	8006380 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	bf14      	ite	ne
 80067ee:	2301      	movne	r3, #1
 80067f0:	2300      	moveq	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	20000020 	.word	0x20000020
 8006800:	200000c4 	.word	0x200000c4

08006804 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60b9      	str	r1, [r7, #8]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	4603      	mov	r3, r0
 8006812:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006814:	7bfb      	ldrb	r3, [r7, #15]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d102      	bne.n	8006820 <USER_SPI_write+0x1c>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <USER_SPI_write+0x20>
 8006820:	2304      	movs	r3, #4
 8006822:	e063      	b.n	80068ec <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006824:	4b33      	ldr	r3, [pc, #204]	; (80068f4 <USER_SPI_write+0xf0>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <USER_SPI_write+0x32>
 8006832:	2303      	movs	r3, #3
 8006834:	e05a      	b.n	80068ec <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <USER_SPI_write+0xf0>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d001      	beq.n	8006848 <USER_SPI_write+0x44>
 8006844:	2302      	movs	r3, #2
 8006846:	e051      	b.n	80068ec <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006848:	4b2b      	ldr	r3, [pc, #172]	; (80068f8 <USER_SPI_write+0xf4>)
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	f003 0308 	and.w	r3, r3, #8
 8006850:	2b00      	cmp	r3, #0
 8006852:	d102      	bne.n	800685a <USER_SPI_write+0x56>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	025b      	lsls	r3, r3, #9
 8006858:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d110      	bne.n	8006882 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006860:	6879      	ldr	r1, [r7, #4]
 8006862:	2018      	movs	r0, #24
 8006864:	f7ff fe0d 	bl	8006482 <send_cmd>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d136      	bne.n	80068dc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800686e:	21fe      	movs	r1, #254	; 0xfe
 8006870:	68b8      	ldr	r0, [r7, #8]
 8006872:	f7ff fdd4 	bl	800641e <xmit_datablock>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d02f      	beq.n	80068dc <USER_SPI_write+0xd8>
			count = 0;
 800687c:	2300      	movs	r3, #0
 800687e:	603b      	str	r3, [r7, #0]
 8006880:	e02c      	b.n	80068dc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <USER_SPI_write+0xf4>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	f003 0306 	and.w	r3, r3, #6
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <USER_SPI_write+0x92>
 800688e:	6839      	ldr	r1, [r7, #0]
 8006890:	2097      	movs	r0, #151	; 0x97
 8006892:	f7ff fdf6 	bl	8006482 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	2019      	movs	r0, #25
 800689a:	f7ff fdf2 	bl	8006482 <send_cmd>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11b      	bne.n	80068dc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 80068a4:	21fc      	movs	r1, #252	; 0xfc
 80068a6:	68b8      	ldr	r0, [r7, #8]
 80068a8:	f7ff fdb9 	bl	800641e <xmit_datablock>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00a      	beq.n	80068c8 <USER_SPI_write+0xc4>
				buff += 512;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80068b8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	3b01      	subs	r3, #1
 80068be:	603b      	str	r3, [r7, #0]
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1ee      	bne.n	80068a4 <USER_SPI_write+0xa0>
 80068c6:	e000      	b.n	80068ca <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 80068c8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80068ca:	21fd      	movs	r1, #253	; 0xfd
 80068cc:	2000      	movs	r0, #0
 80068ce:	f7ff fda6 	bl	800641e <xmit_datablock>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <USER_SPI_write+0xd8>
 80068d8:	2301      	movs	r3, #1
 80068da:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80068dc:	f7ff fd50 	bl	8006380 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bf14      	ite	ne
 80068e6:	2301      	movne	r3, #1
 80068e8:	2300      	moveq	r3, #0
 80068ea:	b2db      	uxtb	r3, r3
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000020 	.word	0x20000020
 80068f8:	200000c4 	.word	0x200000c4

080068fc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08c      	sub	sp, #48	; 0x30
 8006900:	af00      	add	r7, sp, #0
 8006902:	4603      	mov	r3, r0
 8006904:	603a      	str	r2, [r7, #0]
 8006906:	71fb      	strb	r3, [r7, #7]
 8006908:	460b      	mov	r3, r1
 800690a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d001      	beq.n	8006916 <USER_SPI_ioctl+0x1a>
 8006912:	2304      	movs	r3, #4
 8006914:	e15a      	b.n	8006bcc <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006916:	4baf      	ldr	r3, [pc, #700]	; (8006bd4 <USER_SPI_ioctl+0x2d8>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <USER_SPI_ioctl+0x2c>
 8006924:	2303      	movs	r3, #3
 8006926:	e151      	b.n	8006bcc <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800692e:	79bb      	ldrb	r3, [r7, #6]
 8006930:	2b04      	cmp	r3, #4
 8006932:	f200 8136 	bhi.w	8006ba2 <USER_SPI_ioctl+0x2a6>
 8006936:	a201      	add	r2, pc, #4	; (adr r2, 800693c <USER_SPI_ioctl+0x40>)
 8006938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693c:	08006951 	.word	0x08006951
 8006940:	08006965 	.word	0x08006965
 8006944:	08006ba3 	.word	0x08006ba3
 8006948:	08006a11 	.word	0x08006a11
 800694c:	08006b07 	.word	0x08006b07
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006950:	f7ff fd23 	bl	800639a <spiselect>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8127 	beq.w	8006baa <USER_SPI_ioctl+0x2ae>
 800695c:	2300      	movs	r3, #0
 800695e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006962:	e122      	b.n	8006baa <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006964:	2100      	movs	r1, #0
 8006966:	2009      	movs	r0, #9
 8006968:	f7ff fd8b 	bl	8006482 <send_cmd>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	f040 811d 	bne.w	8006bae <USER_SPI_ioctl+0x2b2>
 8006974:	f107 030c 	add.w	r3, r7, #12
 8006978:	2110      	movs	r1, #16
 800697a:	4618      	mov	r0, r3
 800697c:	f7ff fd26 	bl	80063cc <rcvr_datablock>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 8113 	beq.w	8006bae <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006988:	7b3b      	ldrb	r3, [r7, #12]
 800698a:	099b      	lsrs	r3, r3, #6
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b01      	cmp	r3, #1
 8006990:	d111      	bne.n	80069b6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006992:	7d7b      	ldrb	r3, [r7, #21]
 8006994:	461a      	mov	r2, r3
 8006996:	7d3b      	ldrb	r3, [r7, #20]
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	4413      	add	r3, r2
 800699c:	461a      	mov	r2, r3
 800699e:	7cfb      	ldrb	r3, [r7, #19]
 80069a0:	041b      	lsls	r3, r3, #16
 80069a2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80069a6:	4413      	add	r3, r2
 80069a8:	3301      	adds	r3, #1
 80069aa:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	029a      	lsls	r2, r3, #10
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	e028      	b.n	8006a08 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80069b6:	7c7b      	ldrb	r3, [r7, #17]
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	7dbb      	ldrb	r3, [r7, #22]
 80069c0:	09db      	lsrs	r3, r3, #7
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	7d7b      	ldrb	r3, [r7, #21]
 80069ca:	005b      	lsls	r3, r3, #1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 0306 	and.w	r3, r3, #6
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	3302      	adds	r3, #2
 80069da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80069de:	7d3b      	ldrb	r3, [r7, #20]
 80069e0:	099b      	lsrs	r3, r3, #6
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	441a      	add	r2, r3
 80069ec:	7cbb      	ldrb	r3, [r7, #18]
 80069ee:	029b      	lsls	r3, r3, #10
 80069f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80069f4:	4413      	add	r3, r2
 80069f6:	3301      	adds	r3, #1
 80069f8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 80069fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80069fe:	3b09      	subs	r3, #9
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	409a      	lsls	r2, r3
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006a0e:	e0ce      	b.n	8006bae <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006a10:	4b71      	ldr	r3, [pc, #452]	; (8006bd8 <USER_SPI_ioctl+0x2dc>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d031      	beq.n	8006a80 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	208d      	movs	r0, #141	; 0x8d
 8006a20:	f7ff fd2f 	bl	8006482 <send_cmd>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f040 80c3 	bne.w	8006bb2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006a2c:	20ff      	movs	r0, #255	; 0xff
 8006a2e:	f7ff fc37 	bl	80062a0 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006a32:	f107 030c 	add.w	r3, r7, #12
 8006a36:	2110      	movs	r1, #16
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff fcc7 	bl	80063cc <rcvr_datablock>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80b6 	beq.w	8006bb2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006a46:	2330      	movs	r3, #48	; 0x30
 8006a48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006a4c:	e007      	b.n	8006a5e <USER_SPI_ioctl+0x162>
 8006a4e:	20ff      	movs	r0, #255	; 0xff
 8006a50:	f7ff fc26 	bl	80062a0 <xchg_spi>
 8006a54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006a5e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f3      	bne.n	8006a4e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006a66:	7dbb      	ldrb	r3, [r7, #22]
 8006a68:	091b      	lsrs	r3, r3, #4
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	2310      	movs	r3, #16
 8006a70:	fa03 f202 	lsl.w	r2, r3, r2
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006a7e:	e098      	b.n	8006bb2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006a80:	2100      	movs	r1, #0
 8006a82:	2009      	movs	r0, #9
 8006a84:	f7ff fcfd 	bl	8006482 <send_cmd>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f040 8091 	bne.w	8006bb2 <USER_SPI_ioctl+0x2b6>
 8006a90:	f107 030c 	add.w	r3, r7, #12
 8006a94:	2110      	movs	r1, #16
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff fc98 	bl	80063cc <rcvr_datablock>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f000 8087 	beq.w	8006bb2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006aa4:	4b4c      	ldr	r3, [pc, #304]	; (8006bd8 <USER_SPI_ioctl+0x2dc>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	f003 0302 	and.w	r3, r3, #2
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d012      	beq.n	8006ad6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006ab0:	7dbb      	ldrb	r3, [r7, #22]
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006ab8:	7dfa      	ldrb	r2, [r7, #23]
 8006aba:	09d2      	lsrs	r2, r2, #7
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	4413      	add	r3, r2
 8006ac0:	1c5a      	adds	r2, r3, #1
 8006ac2:	7e7b      	ldrb	r3, [r7, #25]
 8006ac4:	099b      	lsrs	r3, r3, #6
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	fa02 f303 	lsl.w	r3, r2, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	e013      	b.n	8006afe <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006ad6:	7dbb      	ldrb	r3, [r7, #22]
 8006ad8:	109b      	asrs	r3, r3, #2
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	7dfa      	ldrb	r2, [r7, #23]
 8006ae4:	00d2      	lsls	r2, r2, #3
 8006ae6:	f002 0218 	and.w	r2, r2, #24
 8006aea:	7df9      	ldrb	r1, [r7, #23]
 8006aec:	0949      	lsrs	r1, r1, #5
 8006aee:	b2c9      	uxtb	r1, r1
 8006af0:	440a      	add	r2, r1
 8006af2:	3201      	adds	r2, #1
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006b04:	e055      	b.n	8006bb2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006b06:	4b34      	ldr	r3, [pc, #208]	; (8006bd8 <USER_SPI_ioctl+0x2dc>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	f003 0306 	and.w	r3, r3, #6
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d051      	beq.n	8006bb6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006b12:	f107 020c 	add.w	r2, r7, #12
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	210b      	movs	r1, #11
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff feee 	bl	80068fc <USER_SPI_ioctl>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d149      	bne.n	8006bba <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006b26:	7b3b      	ldrb	r3, [r7, #12]
 8006b28:	099b      	lsrs	r3, r3, #6
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d104      	bne.n	8006b3a <USER_SPI_ioctl+0x23e>
 8006b30:	7dbb      	ldrb	r3, [r7, #22]
 8006b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d041      	beq.n	8006bbe <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	623b      	str	r3, [r7, #32]
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b44:	6a3b      	ldr	r3, [r7, #32]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006b4a:	4b23      	ldr	r3, [pc, #140]	; (8006bd8 <USER_SPI_ioctl+0x2dc>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	f003 0308 	and.w	r3, r3, #8
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d105      	bne.n	8006b62 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	025b      	lsls	r3, r3, #9
 8006b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	025b      	lsls	r3, r3, #9
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b64:	2020      	movs	r0, #32
 8006b66:	f7ff fc8c 	bl	8006482 <send_cmd>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d128      	bne.n	8006bc2 <USER_SPI_ioctl+0x2c6>
 8006b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b72:	2021      	movs	r0, #33	; 0x21
 8006b74:	f7ff fc85 	bl	8006482 <send_cmd>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d121      	bne.n	8006bc2 <USER_SPI_ioctl+0x2c6>
 8006b7e:	2100      	movs	r1, #0
 8006b80:	2026      	movs	r0, #38	; 0x26
 8006b82:	f7ff fc7e 	bl	8006482 <send_cmd>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d11a      	bne.n	8006bc2 <USER_SPI_ioctl+0x2c6>
 8006b8c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006b90:	f7ff fbd3 	bl	800633a <wait_ready>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d013      	beq.n	8006bc2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006ba0:	e00f      	b.n	8006bc2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006ba2:	2304      	movs	r3, #4
 8006ba4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006ba8:	e00c      	b.n	8006bc4 <USER_SPI_ioctl+0x2c8>
		break;
 8006baa:	bf00      	nop
 8006bac:	e00a      	b.n	8006bc4 <USER_SPI_ioctl+0x2c8>
		break;
 8006bae:	bf00      	nop
 8006bb0:	e008      	b.n	8006bc4 <USER_SPI_ioctl+0x2c8>
		break;
 8006bb2:	bf00      	nop
 8006bb4:	e006      	b.n	8006bc4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006bb6:	bf00      	nop
 8006bb8:	e004      	b.n	8006bc4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006bba:	bf00      	nop
 8006bbc:	e002      	b.n	8006bc4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006bbe:	bf00      	nop
 8006bc0:	e000      	b.n	8006bc4 <USER_SPI_ioctl+0x2c8>
		break;
 8006bc2:	bf00      	nop
	}

	despiselect();
 8006bc4:	f7ff fbdc 	bl	8006380 <despiselect>

	return res;
 8006bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3730      	adds	r7, #48	; 0x30
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}
 8006bd4:	20000020 	.word	0x20000020
 8006bd8:	200000c4 	.word	0x200000c4

08006bdc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006be6:	79fb      	ldrb	r3, [r7, #7]
 8006be8:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <disk_status+0x30>)
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4413      	add	r3, r2
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	79fa      	ldrb	r2, [r7, #7]
 8006bf4:	4905      	ldr	r1, [pc, #20]	; (8006c0c <disk_status+0x30>)
 8006bf6:	440a      	add	r2, r1
 8006bf8:	7a12      	ldrb	r2, [r2, #8]
 8006bfa:	4610      	mov	r0, r2
 8006bfc:	4798      	blx	r3
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	200000f0 	.word	0x200000f0

08006c10 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	4603      	mov	r3, r0
 8006c18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	4a0d      	ldr	r2, [pc, #52]	; (8006c58 <disk_initialize+0x48>)
 8006c22:	5cd3      	ldrb	r3, [r2, r3]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d111      	bne.n	8006c4c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	4a0b      	ldr	r2, [pc, #44]	; (8006c58 <disk_initialize+0x48>)
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <disk_initialize+0x48>)
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	79fa      	ldrb	r2, [r7, #7]
 8006c3e:	4906      	ldr	r1, [pc, #24]	; (8006c58 <disk_initialize+0x48>)
 8006c40:	440a      	add	r2, r1
 8006c42:	7a12      	ldrb	r2, [r2, #8]
 8006c44:	4610      	mov	r0, r2
 8006c46:	4798      	blx	r3
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	200000f0 	.word	0x200000f0

08006c5c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006c5c:	b590      	push	{r4, r7, lr}
 8006c5e:	b087      	sub	sp, #28
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60b9      	str	r1, [r7, #8]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4603      	mov	r3, r0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	4a0a      	ldr	r2, [pc, #40]	; (8006c98 <disk_read+0x3c>)
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	689c      	ldr	r4, [r3, #8]
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	4a07      	ldr	r2, [pc, #28]	; (8006c98 <disk_read+0x3c>)
 8006c7c:	4413      	add	r3, r2
 8006c7e:	7a18      	ldrb	r0, [r3, #8]
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68b9      	ldr	r1, [r7, #8]
 8006c86:	47a0      	blx	r4
 8006c88:	4603      	mov	r3, r0
 8006c8a:	75fb      	strb	r3, [r7, #23]
  return res;
 8006c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	371c      	adds	r7, #28
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd90      	pop	{r4, r7, pc}
 8006c96:	bf00      	nop
 8006c98:	200000f0 	.word	0x200000f0

08006c9c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006c9c:	b590      	push	{r4, r7, lr}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	4603      	mov	r3, r0
 8006caa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006cac:	7bfb      	ldrb	r3, [r7, #15]
 8006cae:	4a0a      	ldr	r2, [pc, #40]	; (8006cd8 <disk_write+0x3c>)
 8006cb0:	009b      	lsls	r3, r3, #2
 8006cb2:	4413      	add	r3, r2
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	68dc      	ldr	r4, [r3, #12]
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	4a07      	ldr	r2, [pc, #28]	; (8006cd8 <disk_write+0x3c>)
 8006cbc:	4413      	add	r3, r2
 8006cbe:	7a18      	ldrb	r0, [r3, #8]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	68b9      	ldr	r1, [r7, #8]
 8006cc6:	47a0      	blx	r4
 8006cc8:	4603      	mov	r3, r0
 8006cca:	75fb      	strb	r3, [r7, #23]
  return res;
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd90      	pop	{r4, r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	200000f0 	.word	0x200000f0

08006cdc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	603a      	str	r2, [r7, #0]
 8006ce6:	71fb      	strb	r3, [r7, #7]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	4a09      	ldr	r2, [pc, #36]	; (8006d14 <disk_ioctl+0x38>)
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	79fa      	ldrb	r2, [r7, #7]
 8006cfa:	4906      	ldr	r1, [pc, #24]	; (8006d14 <disk_ioctl+0x38>)
 8006cfc:	440a      	add	r2, r1
 8006cfe:	7a10      	ldrb	r0, [r2, #8]
 8006d00:	79b9      	ldrb	r1, [r7, #6]
 8006d02:	683a      	ldr	r2, [r7, #0]
 8006d04:	4798      	blx	r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]
  return res;
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	200000f0 	.word	0x200000f0

08006d18 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3301      	adds	r3, #1
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006d28:	89fb      	ldrh	r3, [r7, #14]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	b21a      	sxth	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	b21b      	sxth	r3, r3
 8006d34:	4313      	orrs	r3, r2
 8006d36:	b21b      	sxth	r3, r3
 8006d38:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b085      	sub	sp, #20
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	3303      	adds	r3, #3
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	3202      	adds	r2, #2
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	3201      	adds	r2, #1
 8006d6e:	7812      	ldrb	r2, [r2, #0]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	021b      	lsls	r3, r3, #8
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7812      	ldrb	r2, [r2, #0]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
	return rv;
 8006d80:	68fb      	ldr	r3, [r7, #12]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b083      	sub	sp, #12
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	1c5a      	adds	r2, r3, #1
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	887a      	ldrh	r2, [r7, #2]
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	887b      	ldrh	r3, [r7, #2]
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	607a      	str	r2, [r7, #4]
 8006db2:	887a      	ldrh	r2, [r7, #2]
 8006db4:	b2d2      	uxtb	r2, r2
 8006db6:	701a      	strb	r2, [r3, #0]
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	607a      	str	r2, [r7, #4]
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	0a1b      	lsrs	r3, r3, #8
 8006dde:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	607a      	str	r2, [r7, #4]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	b2d2      	uxtb	r2, r2
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	0a1b      	lsrs	r3, r3, #8
 8006e02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	b2d2      	uxtb	r2, r2
 8006e0e:	701a      	strb	r2, [r3, #0]
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00d      	beq.n	8006e52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	1c53      	adds	r3, r2, #1
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	1c59      	adds	r1, r3, #1
 8006e40:	6179      	str	r1, [r7, #20]
 8006e42:	7812      	ldrb	r2, [r2, #0]
 8006e44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3b01      	subs	r3, #1
 8006e4a:	607b      	str	r3, [r7, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1f1      	bne.n	8006e36 <mem_cpy+0x1a>
	}
}
 8006e52:	bf00      	nop
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006e5e:	b480      	push	{r7}
 8006e60:	b087      	sub	sp, #28
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	60f8      	str	r0, [r7, #12]
 8006e66:	60b9      	str	r1, [r7, #8]
 8006e68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	1c5a      	adds	r2, r3, #1
 8006e72:	617a      	str	r2, [r7, #20]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	b2d2      	uxtb	r2, r2
 8006e78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	607b      	str	r3, [r7, #4]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f3      	bne.n	8006e6e <mem_set+0x10>
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr

08006e94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006e94:	b480      	push	{r7}
 8006e96:	b089      	sub	sp, #36	; 0x24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	61fb      	str	r3, [r7, #28]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	61fa      	str	r2, [r7, #28]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	61ba      	str	r2, [r7, #24]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	1acb      	subs	r3, r1, r3
 8006ec0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	607b      	str	r3, [r7, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d002      	beq.n	8006ed4 <mem_cmp+0x40>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0eb      	beq.n	8006eac <mem_cmp+0x18>

	return r;
 8006ed4:	697b      	ldr	r3, [r7, #20]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3724      	adds	r7, #36	; 0x24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006ee2:	b480      	push	{r7}
 8006ee4:	b083      	sub	sp, #12
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006eec:	e002      	b.n	8006ef4 <chk_chr+0x12>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	607b      	str	r3, [r7, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <chk_chr+0x26>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	461a      	mov	r2, r3
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d1f2      	bne.n	8006eee <chk_chr+0xc>
	return *str;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f22:	2300      	movs	r3, #0
 8006f24:	60bb      	str	r3, [r7, #8]
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	e029      	b.n	8006f80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006f2c:	4a27      	ldr	r2, [pc, #156]	; (8006fcc <chk_lock+0xb4>)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	4413      	add	r3, r2
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d01d      	beq.n	8006f76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f3a:	4a24      	ldr	r2, [pc, #144]	; (8006fcc <chk_lock+0xb4>)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	4413      	add	r3, r2
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d116      	bne.n	8006f7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006f4c:	4a1f      	ldr	r2, [pc, #124]	; (8006fcc <chk_lock+0xb4>)
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	4413      	add	r3, r2
 8006f54:	3304      	adds	r3, #4
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d10c      	bne.n	8006f7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f60:	4a1a      	ldr	r2, [pc, #104]	; (8006fcc <chk_lock+0xb4>)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	011b      	lsls	r3, r3, #4
 8006f66:	4413      	add	r3, r2
 8006f68:	3308      	adds	r3, #8
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d102      	bne.n	8006f7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006f74:	e007      	b.n	8006f86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006f76:	2301      	movs	r3, #1
 8006f78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d9d2      	bls.n	8006f2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d109      	bne.n	8006fa0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d102      	bne.n	8006f98 <chk_lock+0x80>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d101      	bne.n	8006f9c <chk_lock+0x84>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e010      	b.n	8006fbe <chk_lock+0xa6>
 8006f9c:	2312      	movs	r3, #18
 8006f9e:	e00e      	b.n	8006fbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d108      	bne.n	8006fb8 <chk_lock+0xa0>
 8006fa6:	4a09      	ldr	r2, [pc, #36]	; (8006fcc <chk_lock+0xb4>)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	4413      	add	r3, r2
 8006fae:	330c      	adds	r3, #12
 8006fb0:	881b      	ldrh	r3, [r3, #0]
 8006fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb6:	d101      	bne.n	8006fbc <chk_lock+0xa4>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	e000      	b.n	8006fbe <chk_lock+0xa6>
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	200000d0 	.word	0x200000d0

08006fd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b083      	sub	sp, #12
 8006fd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	607b      	str	r3, [r7, #4]
 8006fda:	e002      	b.n	8006fe2 <enq_lock+0x12>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	607b      	str	r3, [r7, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d806      	bhi.n	8006ff6 <enq_lock+0x26>
 8006fe8:	4a09      	ldr	r2, [pc, #36]	; (8007010 <enq_lock+0x40>)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	011b      	lsls	r3, r3, #4
 8006fee:	4413      	add	r3, r2
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1f2      	bne.n	8006fdc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	bf14      	ite	ne
 8006ffc:	2301      	movne	r3, #1
 8006ffe:	2300      	moveq	r3, #0
 8007000:	b2db      	uxtb	r3, r3
}
 8007002:	4618      	mov	r0, r3
 8007004:	370c      	adds	r7, #12
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	200000d0 	.word	0x200000d0

08007014 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800701e:	2300      	movs	r3, #0
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	e01f      	b.n	8007064 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007024:	4a41      	ldr	r2, [pc, #260]	; (800712c <inc_lock+0x118>)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	4413      	add	r3, r2
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d113      	bne.n	800705e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007036:	4a3d      	ldr	r2, [pc, #244]	; (800712c <inc_lock+0x118>)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	011b      	lsls	r3, r3, #4
 800703c:	4413      	add	r3, r2
 800703e:	3304      	adds	r3, #4
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007046:	429a      	cmp	r2, r3
 8007048:	d109      	bne.n	800705e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800704a:	4a38      	ldr	r2, [pc, #224]	; (800712c <inc_lock+0x118>)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	4413      	add	r3, r2
 8007052:	3308      	adds	r3, #8
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800705a:	429a      	cmp	r2, r3
 800705c:	d006      	beq.n	800706c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	3301      	adds	r3, #1
 8007062:	60fb      	str	r3, [r7, #12]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d9dc      	bls.n	8007024 <inc_lock+0x10>
 800706a:	e000      	b.n	800706e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800706c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b02      	cmp	r3, #2
 8007072:	d132      	bne.n	80070da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	e002      	b.n	8007080 <inc_lock+0x6c>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	3301      	adds	r3, #1
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d806      	bhi.n	8007094 <inc_lock+0x80>
 8007086:	4a29      	ldr	r2, [pc, #164]	; (800712c <inc_lock+0x118>)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	011b      	lsls	r3, r3, #4
 800708c:	4413      	add	r3, r2
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f2      	bne.n	800707a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d101      	bne.n	800709e <inc_lock+0x8a>
 800709a:	2300      	movs	r3, #0
 800709c:	e040      	b.n	8007120 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4922      	ldr	r1, [pc, #136]	; (800712c <inc_lock+0x118>)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	440b      	add	r3, r1
 80070aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	491e      	ldr	r1, [pc, #120]	; (800712c <inc_lock+0x118>)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	440b      	add	r3, r1
 80070b8:	3304      	adds	r3, #4
 80070ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	491a      	ldr	r1, [pc, #104]	; (800712c <inc_lock+0x118>)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	011b      	lsls	r3, r3, #4
 80070c6:	440b      	add	r3, r1
 80070c8:	3308      	adds	r3, #8
 80070ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80070cc:	4a17      	ldr	r2, [pc, #92]	; (800712c <inc_lock+0x118>)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	4413      	add	r3, r2
 80070d4:	330c      	adds	r3, #12
 80070d6:	2200      	movs	r2, #0
 80070d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d009      	beq.n	80070f4 <inc_lock+0xe0>
 80070e0:	4a12      	ldr	r2, [pc, #72]	; (800712c <inc_lock+0x118>)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	011b      	lsls	r3, r3, #4
 80070e6:	4413      	add	r3, r2
 80070e8:	330c      	adds	r3, #12
 80070ea:	881b      	ldrh	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <inc_lock+0xe0>
 80070f0:	2300      	movs	r3, #0
 80070f2:	e015      	b.n	8007120 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d108      	bne.n	800710c <inc_lock+0xf8>
 80070fa:	4a0c      	ldr	r2, [pc, #48]	; (800712c <inc_lock+0x118>)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	4413      	add	r3, r2
 8007102:	330c      	adds	r3, #12
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	e001      	b.n	8007110 <inc_lock+0xfc>
 800710c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007110:	4906      	ldr	r1, [pc, #24]	; (800712c <inc_lock+0x118>)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	011b      	lsls	r3, r3, #4
 8007116:	440b      	add	r3, r1
 8007118:	330c      	adds	r3, #12
 800711a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3301      	adds	r3, #1
}
 8007120:	4618      	mov	r0, r3
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	200000d0 	.word	0x200000d0

08007130 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	3b01      	subs	r3, #1
 800713c:	607b      	str	r3, [r7, #4]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d825      	bhi.n	8007190 <dec_lock+0x60>
		n = Files[i].ctr;
 8007144:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <dec_lock+0x74>)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	011b      	lsls	r3, r3, #4
 800714a:	4413      	add	r3, r2
 800714c:	330c      	adds	r3, #12
 800714e:	881b      	ldrh	r3, [r3, #0]
 8007150:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007152:	89fb      	ldrh	r3, [r7, #14]
 8007154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007158:	d101      	bne.n	800715e <dec_lock+0x2e>
 800715a:	2300      	movs	r3, #0
 800715c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800715e:	89fb      	ldrh	r3, [r7, #14]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d002      	beq.n	800716a <dec_lock+0x3a>
 8007164:	89fb      	ldrh	r3, [r7, #14]
 8007166:	3b01      	subs	r3, #1
 8007168:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800716a:	4a0e      	ldr	r2, [pc, #56]	; (80071a4 <dec_lock+0x74>)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	011b      	lsls	r3, r3, #4
 8007170:	4413      	add	r3, r2
 8007172:	330c      	adds	r3, #12
 8007174:	89fa      	ldrh	r2, [r7, #14]
 8007176:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007178:	89fb      	ldrh	r3, [r7, #14]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d105      	bne.n	800718a <dec_lock+0x5a>
 800717e:	4a09      	ldr	r2, [pc, #36]	; (80071a4 <dec_lock+0x74>)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	011b      	lsls	r3, r3, #4
 8007184:	4413      	add	r3, r2
 8007186:	2200      	movs	r2, #0
 8007188:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	737b      	strb	r3, [r7, #13]
 800718e:	e001      	b.n	8007194 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007190:	2302      	movs	r3, #2
 8007192:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007194:	7b7b      	ldrb	r3, [r7, #13]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr
 80071a2:	bf00      	nop
 80071a4:	200000d0 	.word	0x200000d0

080071a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
 80071b4:	e010      	b.n	80071d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80071b6:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <clear_lock+0x44>)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	4413      	add	r3, r2
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d105      	bne.n	80071d2 <clear_lock+0x2a>
 80071c6:	4a09      	ldr	r2, [pc, #36]	; (80071ec <clear_lock+0x44>)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	4413      	add	r3, r2
 80071ce:	2200      	movs	r2, #0
 80071d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3301      	adds	r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d9eb      	bls.n	80071b6 <clear_lock+0xe>
	}
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	200000d0 	.word	0x200000d0

080071f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	78db      	ldrb	r3, [r3, #3]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d034      	beq.n	800726e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007208:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	7858      	ldrb	r0, [r3, #1]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007214:	2301      	movs	r3, #1
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	f7ff fd40 	bl	8006c9c <disk_write>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007222:	2301      	movs	r3, #1
 8007224:	73fb      	strb	r3, [r7, #15]
 8007226:	e022      	b.n	800726e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	1ad2      	subs	r2, r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	429a      	cmp	r2, r3
 800723c:	d217      	bcs.n	800726e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	789b      	ldrb	r3, [r3, #2]
 8007242:	613b      	str	r3, [r7, #16]
 8007244:	e010      	b.n	8007268 <sync_window+0x78>
					wsect += fs->fsize;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	4413      	add	r3, r2
 800724e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7858      	ldrb	r0, [r3, #1]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800725a:	2301      	movs	r3, #1
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	f7ff fd1d 	bl	8006c9c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	3b01      	subs	r3, #1
 8007266:	613b      	str	r3, [r7, #16]
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d8eb      	bhi.n	8007246 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3718      	adds	r7, #24
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	429a      	cmp	r2, r3
 800728e:	d01b      	beq.n	80072c8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff ffad 	bl	80071f0 <sync_window>
 8007296:	4603      	mov	r3, r0
 8007298:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800729a:	7bfb      	ldrb	r3, [r7, #15]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d113      	bne.n	80072c8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	7858      	ldrb	r0, [r3, #1]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072aa:	2301      	movs	r3, #1
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	f7ff fcd5 	bl	8006c5c <disk_read>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80072b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072bc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80072be:	2301      	movs	r3, #1
 80072c0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
	...

080072d4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff87 	bl	80071f0 <sync_window>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d158      	bne.n	800739e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b03      	cmp	r3, #3
 80072f2:	d148      	bne.n	8007386 <sync_fs+0xb2>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	791b      	ldrb	r3, [r3, #4]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d144      	bne.n	8007386 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3330      	adds	r3, #48	; 0x30
 8007300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f7ff fda9 	bl	8006e5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	3330      	adds	r3, #48	; 0x30
 8007310:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007314:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007318:	4618      	mov	r0, r3
 800731a:	f7ff fd38 	bl	8006d8e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3330      	adds	r3, #48	; 0x30
 8007322:	4921      	ldr	r1, [pc, #132]	; (80073a8 <sync_fs+0xd4>)
 8007324:	4618      	mov	r0, r3
 8007326:	f7ff fd4d 	bl	8006dc4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	3330      	adds	r3, #48	; 0x30
 800732e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007332:	491e      	ldr	r1, [pc, #120]	; (80073ac <sync_fs+0xd8>)
 8007334:	4618      	mov	r0, r3
 8007336:	f7ff fd45 	bl	8006dc4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	3330      	adds	r3, #48	; 0x30
 800733e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	4619      	mov	r1, r3
 8007348:	4610      	mov	r0, r2
 800734a:	f7ff fd3b 	bl	8006dc4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3330      	adds	r3, #48	; 0x30
 8007352:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f7ff fd31 	bl	8006dc4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	1c5a      	adds	r2, r3, #1
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	7858      	ldrb	r0, [r3, #1]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737a:	2301      	movs	r3, #1
 800737c:	f7ff fc8e 	bl	8006c9c <disk_write>
			fs->fsi_flag = 0;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	785b      	ldrb	r3, [r3, #1]
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fca4 	bl	8006cdc <disk_ioctl>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <sync_fs+0xca>
 800739a:	2301      	movs	r3, #1
 800739c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	41615252 	.word	0x41615252
 80073ac:	61417272 	.word	0x61417272

080073b0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80073b0:	b480      	push	{r7}
 80073b2:	b083      	sub	sp, #12
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	3b02      	subs	r3, #2
 80073be:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	695b      	ldr	r3, [r3, #20]
 80073c4:	3b02      	subs	r3, #2
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d301      	bcc.n	80073d0 <clust2sect+0x20>
 80073cc:	2300      	movs	r3, #0
 80073ce:	e008      	b.n	80073e2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	895b      	ldrh	r3, [r3, #10]
 80073d4:	461a      	mov	r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	fb03 f202 	mul.w	r2, r3, r2
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e0:	4413      	add	r3, r2
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b086      	sub	sp, #24
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d904      	bls.n	800740e <get_fat+0x20>
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	695b      	ldr	r3, [r3, #20]
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d302      	bcc.n	8007414 <get_fat+0x26>
		val = 1;	/* Internal error */
 800740e:	2301      	movs	r3, #1
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	e08f      	b.n	8007534 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007418:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b03      	cmp	r3, #3
 8007420:	d062      	beq.n	80074e8 <get_fat+0xfa>
 8007422:	2b03      	cmp	r3, #3
 8007424:	dc7c      	bgt.n	8007520 <get_fat+0x132>
 8007426:	2b01      	cmp	r3, #1
 8007428:	d002      	beq.n	8007430 <get_fat+0x42>
 800742a:	2b02      	cmp	r3, #2
 800742c:	d042      	beq.n	80074b4 <get_fat+0xc6>
 800742e:	e077      	b.n	8007520 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	60fb      	str	r3, [r7, #12]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	085b      	lsrs	r3, r3, #1
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	6a1a      	ldr	r2, [r3, #32]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	0a5b      	lsrs	r3, r3, #9
 8007446:	4413      	add	r3, r2
 8007448:	4619      	mov	r1, r3
 800744a:	6938      	ldr	r0, [r7, #16]
 800744c:	f7ff ff14 	bl	8007278 <move_window>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d167      	bne.n	8007526 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	1c5a      	adds	r2, r3, #1
 800745a:	60fa      	str	r2, [r7, #12]
 800745c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4413      	add	r3, r2
 8007464:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007468:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6a1a      	ldr	r2, [r3, #32]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	0a5b      	lsrs	r3, r3, #9
 8007472:	4413      	add	r3, r2
 8007474:	4619      	mov	r1, r3
 8007476:	6938      	ldr	r0, [r7, #16]
 8007478:	f7ff fefe 	bl	8007278 <move_window>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d153      	bne.n	800752a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4413      	add	r3, r2
 800748c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	461a      	mov	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	4313      	orrs	r3, r2
 8007498:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	f003 0301 	and.w	r3, r3, #1
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d002      	beq.n	80074aa <get_fat+0xbc>
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	091b      	lsrs	r3, r3, #4
 80074a8:	e002      	b.n	80074b0 <get_fat+0xc2>
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074b0:	617b      	str	r3, [r7, #20]
			break;
 80074b2:	e03f      	b.n	8007534 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	6a1a      	ldr	r2, [r3, #32]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	0a1b      	lsrs	r3, r3, #8
 80074bc:	4413      	add	r3, r2
 80074be:	4619      	mov	r1, r3
 80074c0:	6938      	ldr	r0, [r7, #16]
 80074c2:	f7ff fed9 	bl	8007278 <move_window>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d130      	bne.n	800752e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	005b      	lsls	r3, r3, #1
 80074d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80074da:	4413      	add	r3, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fc1b 	bl	8006d18 <ld_word>
 80074e2:	4603      	mov	r3, r0
 80074e4:	617b      	str	r3, [r7, #20]
			break;
 80074e6:	e025      	b.n	8007534 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	6a1a      	ldr	r2, [r3, #32]
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	09db      	lsrs	r3, r3, #7
 80074f0:	4413      	add	r3, r2
 80074f2:	4619      	mov	r1, r3
 80074f4:	6938      	ldr	r0, [r7, #16]
 80074f6:	f7ff febf 	bl	8007278 <move_window>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d118      	bne.n	8007532 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800750e:	4413      	add	r3, r2
 8007510:	4618      	mov	r0, r3
 8007512:	f7ff fc19 	bl	8006d48 <ld_dword>
 8007516:	4603      	mov	r3, r0
 8007518:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800751c:	617b      	str	r3, [r7, #20]
			break;
 800751e:	e009      	b.n	8007534 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007520:	2301      	movs	r3, #1
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e006      	b.n	8007534 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007526:	bf00      	nop
 8007528:	e004      	b.n	8007534 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800752a:	bf00      	nop
 800752c:	e002      	b.n	8007534 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800752e:	bf00      	nop
 8007530:	e000      	b.n	8007534 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007532:	bf00      	nop
		}
	}

	return val;
 8007534:	697b      	ldr	r3, [r7, #20]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800753e:	b590      	push	{r4, r7, lr}
 8007540:	b089      	sub	sp, #36	; 0x24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800754a:	2302      	movs	r3, #2
 800754c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2b01      	cmp	r3, #1
 8007552:	f240 80d2 	bls.w	80076fa <put_fat+0x1bc>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	695b      	ldr	r3, [r3, #20]
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	429a      	cmp	r2, r3
 800755e:	f080 80cc 	bcs.w	80076fa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b03      	cmp	r3, #3
 8007568:	f000 8096 	beq.w	8007698 <put_fat+0x15a>
 800756c:	2b03      	cmp	r3, #3
 800756e:	f300 80cd 	bgt.w	800770c <put_fat+0x1ce>
 8007572:	2b01      	cmp	r3, #1
 8007574:	d002      	beq.n	800757c <put_fat+0x3e>
 8007576:	2b02      	cmp	r3, #2
 8007578:	d06e      	beq.n	8007658 <put_fat+0x11a>
 800757a:	e0c7      	b.n	800770c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	69bb      	ldr	r3, [r7, #24]
 8007582:	085b      	lsrs	r3, r3, #1
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	4413      	add	r3, r2
 8007588:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6a1a      	ldr	r2, [r3, #32]
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	0a5b      	lsrs	r3, r3, #9
 8007592:	4413      	add	r3, r2
 8007594:	4619      	mov	r1, r3
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f7ff fe6e 	bl	8007278 <move_window>
 800759c:	4603      	mov	r3, r0
 800759e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80075a0:	7ffb      	ldrb	r3, [r7, #31]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 80ab 	bne.w	80076fe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	1c59      	adds	r1, r3, #1
 80075b2:	61b9      	str	r1, [r7, #24]
 80075b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075b8:	4413      	add	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	f003 0301 	and.w	r3, r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00d      	beq.n	80075e2 <put_fat+0xa4>
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	b25b      	sxtb	r3, r3
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	b25a      	sxtb	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	4313      	orrs	r3, r2
 80075dc:	b25b      	sxtb	r3, r3
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	e001      	b.n	80075e6 <put_fat+0xa8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a1a      	ldr	r2, [r3, #32]
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	0a5b      	lsrs	r3, r3, #9
 80075f8:	4413      	add	r3, r2
 80075fa:	4619      	mov	r1, r3
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fe3b 	bl	8007278 <move_window>
 8007602:	4603      	mov	r3, r0
 8007604:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007606:	7ffb      	ldrb	r3, [r7, #31]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d17a      	bne.n	8007702 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007618:	4413      	add	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <put_fat+0xf0>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	091b      	lsrs	r3, r3, #4
 800762a:	b2db      	uxtb	r3, r3
 800762c:	e00e      	b.n	800764c <put_fat+0x10e>
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	b25b      	sxtb	r3, r3
 8007634:	f023 030f 	bic.w	r3, r3, #15
 8007638:	b25a      	sxtb	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	0a1b      	lsrs	r3, r3, #8
 800763e:	b25b      	sxtb	r3, r3
 8007640:	f003 030f 	and.w	r3, r3, #15
 8007644:	b25b      	sxtb	r3, r3
 8007646:	4313      	orrs	r3, r2
 8007648:	b25b      	sxtb	r3, r3
 800764a:	b2db      	uxtb	r3, r3
 800764c:	697a      	ldr	r2, [r7, #20]
 800764e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	70da      	strb	r2, [r3, #3]
			break;
 8007656:	e059      	b.n	800770c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6a1a      	ldr	r2, [r3, #32]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	0a1b      	lsrs	r3, r3, #8
 8007660:	4413      	add	r3, r2
 8007662:	4619      	mov	r1, r3
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f7ff fe07 	bl	8007278 <move_window>
 800766a:	4603      	mov	r3, r0
 800766c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800766e:	7ffb      	ldrb	r3, [r7, #31]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d148      	bne.n	8007706 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007682:	4413      	add	r3, r2
 8007684:	687a      	ldr	r2, [r7, #4]
 8007686:	b292      	uxth	r2, r2
 8007688:	4611      	mov	r1, r2
 800768a:	4618      	mov	r0, r3
 800768c:	f7ff fb7f 	bl	8006d8e <st_word>
			fs->wflag = 1;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	70da      	strb	r2, [r3, #3]
			break;
 8007696:	e039      	b.n	800770c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6a1a      	ldr	r2, [r3, #32]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	09db      	lsrs	r3, r3, #7
 80076a0:	4413      	add	r3, r2
 80076a2:	4619      	mov	r1, r3
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f7ff fde7 	bl	8007278 <move_window>
 80076aa:	4603      	mov	r3, r0
 80076ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80076ae:	7ffb      	ldrb	r3, [r7, #31]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d12a      	bne.n	800770a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076c8:	4413      	add	r3, r2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff fb3c 	bl	8006d48 <ld_dword>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80076d6:	4323      	orrs	r3, r4
 80076d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80076e8:	4413      	add	r3, r2
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff fb69 	bl	8006dc4 <st_dword>
			fs->wflag = 1;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2201      	movs	r2, #1
 80076f6:	70da      	strb	r2, [r3, #3]
			break;
 80076f8:	e008      	b.n	800770c <put_fat+0x1ce>
		}
	}
 80076fa:	bf00      	nop
 80076fc:	e006      	b.n	800770c <put_fat+0x1ce>
			if (res != FR_OK) break;
 80076fe:	bf00      	nop
 8007700:	e004      	b.n	800770c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007702:	bf00      	nop
 8007704:	e002      	b.n	800770c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007706:	bf00      	nop
 8007708:	e000      	b.n	800770c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800770a:	bf00      	nop
	return res;
 800770c:	7ffb      	ldrb	r3, [r7, #31]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3724      	adds	r7, #36	; 0x24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd90      	pop	{r4, r7, pc}

08007716 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b088      	sub	sp, #32
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007722:	2300      	movs	r3, #0
 8007724:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d904      	bls.n	800773c <remove_chain+0x26>
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	429a      	cmp	r2, r3
 800773a:	d301      	bcc.n	8007740 <remove_chain+0x2a>
 800773c:	2302      	movs	r3, #2
 800773e:	e04b      	b.n	80077d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d00c      	beq.n	8007760 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	69b8      	ldr	r0, [r7, #24]
 800774e:	f7ff fef6 	bl	800753e <put_fat>
 8007752:	4603      	mov	r3, r0
 8007754:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007756:	7ffb      	ldrb	r3, [r7, #31]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <remove_chain+0x4a>
 800775c:	7ffb      	ldrb	r3, [r7, #31]
 800775e:	e03b      	b.n	80077d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007760:	68b9      	ldr	r1, [r7, #8]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7ff fe43 	bl	80073ee <get_fat>
 8007768:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d031      	beq.n	80077d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d101      	bne.n	800777a <remove_chain+0x64>
 8007776:	2302      	movs	r3, #2
 8007778:	e02e      	b.n	80077d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007780:	d101      	bne.n	8007786 <remove_chain+0x70>
 8007782:	2301      	movs	r3, #1
 8007784:	e028      	b.n	80077d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007786:	2200      	movs	r2, #0
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	69b8      	ldr	r0, [r7, #24]
 800778c:	f7ff fed7 	bl	800753e <put_fat>
 8007790:	4603      	mov	r3, r0
 8007792:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007794:	7ffb      	ldrb	r3, [r7, #31]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <remove_chain+0x88>
 800779a:	7ffb      	ldrb	r3, [r7, #31]
 800779c:	e01c      	b.n	80077d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	69bb      	ldr	r3, [r7, #24]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	3b02      	subs	r3, #2
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d20b      	bcs.n	80077c4 <remove_chain+0xae>
			fs->free_clst++;
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	1c5a      	adds	r2, r3, #1
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	791b      	ldrb	r3, [r3, #4]
 80077ba:	f043 0301 	orr.w	r3, r3, #1
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3c6      	bcc.n	8007760 <remove_chain+0x4a>
 80077d2:	e000      	b.n	80077d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80077d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3720      	adds	r7, #32
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b088      	sub	sp, #32
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d10d      	bne.n	8007812 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d004      	beq.n	800780c <create_chain+0x2c>
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	429a      	cmp	r2, r3
 800780a:	d31b      	bcc.n	8007844 <create_chain+0x64>
 800780c:	2301      	movs	r3, #1
 800780e:	61bb      	str	r3, [r7, #24]
 8007810:	e018      	b.n	8007844 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7ff fdea 	bl	80073ee <get_fat>
 800781a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2b01      	cmp	r3, #1
 8007820:	d801      	bhi.n	8007826 <create_chain+0x46>
 8007822:	2301      	movs	r3, #1
 8007824:	e070      	b.n	8007908 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800782c:	d101      	bne.n	8007832 <create_chain+0x52>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	e06a      	b.n	8007908 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	429a      	cmp	r2, r3
 800783a:	d201      	bcs.n	8007840 <create_chain+0x60>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	e063      	b.n	8007908 <create_chain+0x128>
		scl = clst;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	3301      	adds	r3, #1
 800784c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	429a      	cmp	r2, r3
 8007856:	d307      	bcc.n	8007868 <create_chain+0x88>
				ncl = 2;
 8007858:	2302      	movs	r3, #2
 800785a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800785c:	69fa      	ldr	r2, [r7, #28]
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	429a      	cmp	r2, r3
 8007862:	d901      	bls.n	8007868 <create_chain+0x88>
 8007864:	2300      	movs	r3, #0
 8007866:	e04f      	b.n	8007908 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007868:	69f9      	ldr	r1, [r7, #28]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff fdbf 	bl	80073ee <get_fat>
 8007870:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d003      	beq.n	8007886 <create_chain+0xa6>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007884:	d101      	bne.n	800788a <create_chain+0xaa>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	e03e      	b.n	8007908 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	429a      	cmp	r2, r3
 8007890:	d1da      	bne.n	8007848 <create_chain+0x68>
 8007892:	2300      	movs	r3, #0
 8007894:	e038      	b.n	8007908 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007896:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800789c:	69f9      	ldr	r1, [r7, #28]
 800789e:	6938      	ldr	r0, [r7, #16]
 80078a0:	f7ff fe4d 	bl	800753e <put_fat>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80078a8:	7dfb      	ldrb	r3, [r7, #23]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <create_chain+0xe2>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d006      	beq.n	80078c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	6839      	ldr	r1, [r7, #0]
 80078b8:	6938      	ldr	r0, [r7, #16]
 80078ba:	f7ff fe40 	bl	800753e <put_fat>
 80078be:	4603      	mov	r3, r0
 80078c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80078c2:	7dfb      	ldrb	r3, [r7, #23]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d116      	bne.n	80078f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80078ce:	693b      	ldr	r3, [r7, #16]
 80078d0:	691a      	ldr	r2, [r3, #16]
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	695b      	ldr	r3, [r3, #20]
 80078d6:	3b02      	subs	r3, #2
 80078d8:	429a      	cmp	r2, r3
 80078da:	d804      	bhi.n	80078e6 <create_chain+0x106>
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	1e5a      	subs	r2, r3, #1
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	791b      	ldrb	r3, [r3, #4]
 80078ea:	f043 0301 	orr.w	r3, r3, #1
 80078ee:	b2da      	uxtb	r2, r3
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	711a      	strb	r2, [r3, #4]
 80078f4:	e007      	b.n	8007906 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d102      	bne.n	8007902 <create_chain+0x122>
 80078fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007900:	e000      	b.n	8007904 <create_chain+0x124>
 8007902:	2301      	movs	r3, #1
 8007904:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007906:	69fb      	ldr	r3, [r7, #28]
}
 8007908:	4618      	mov	r0, r3
 800790a:	3720      	adds	r7, #32
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}

08007910 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007910:	b480      	push	{r7}
 8007912:	b087      	sub	sp, #28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007924:	3304      	adds	r3, #4
 8007926:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	0a5b      	lsrs	r3, r3, #9
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	8952      	ldrh	r2, [r2, #10]
 8007930:	fbb3 f3f2 	udiv	r3, r3, r2
 8007934:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	1d1a      	adds	r2, r3, #4
 800793a:	613a      	str	r2, [r7, #16]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d101      	bne.n	800794a <clmt_clust+0x3a>
 8007946:	2300      	movs	r3, #0
 8007948:	e010      	b.n	800796c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	429a      	cmp	r2, r3
 8007950:	d307      	bcc.n	8007962 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3304      	adds	r3, #4
 800795e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007960:	e7e9      	b.n	8007936 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007962:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	4413      	add	r3, r2
}
 800796c:	4618      	mov	r0, r3
 800796e:	371c      	adds	r7, #28
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800798e:	d204      	bcs.n	800799a <dir_sdi+0x22>
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f003 031f 	and.w	r3, r3, #31
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <dir_sdi+0x26>
		return FR_INT_ERR;
 800799a:	2302      	movs	r3, #2
 800799c:	e063      	b.n	8007a66 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d106      	bne.n	80079be <dir_sdi+0x46>
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d902      	bls.n	80079be <dir_sdi+0x46>
		clst = fs->dirbase;
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10c      	bne.n	80079de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	095b      	lsrs	r3, r3, #5
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	8912      	ldrh	r2, [r2, #8]
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d301      	bcc.n	80079d4 <dir_sdi+0x5c>
 80079d0:	2302      	movs	r3, #2
 80079d2:	e048      	b.n	8007a66 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	61da      	str	r2, [r3, #28]
 80079dc:	e029      	b.n	8007a32 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	895b      	ldrh	r3, [r3, #10]
 80079e2:	025b      	lsls	r3, r3, #9
 80079e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80079e6:	e019      	b.n	8007a1c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6979      	ldr	r1, [r7, #20]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff fcfe 	bl	80073ee <get_fat>
 80079f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80079fa:	d101      	bne.n	8007a00 <dir_sdi+0x88>
 80079fc:	2301      	movs	r3, #1
 80079fe:	e032      	b.n	8007a66 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d904      	bls.n	8007a10 <dir_sdi+0x98>
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d301      	bcc.n	8007a14 <dir_sdi+0x9c>
 8007a10:	2302      	movs	r3, #2
 8007a12:	e028      	b.n	8007a66 <dir_sdi+0xee>
			ofs -= csz;
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007a1c:	683a      	ldr	r2, [r7, #0]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d2e1      	bcs.n	80079e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007a24:	6979      	ldr	r1, [r7, #20]
 8007a26:	6938      	ldr	r0, [r7, #16]
 8007a28:	f7ff fcc2 	bl	80073b0 <clust2sect>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d101      	bne.n	8007a44 <dir_sdi+0xcc>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e010      	b.n	8007a66 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69da      	ldr	r2, [r3, #28]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	0a5b      	lsrs	r3, r3, #9
 8007a4c:	441a      	add	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5e:	441a      	add	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b086      	sub	sp, #24
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	695b      	ldr	r3, [r3, #20]
 8007a82:	3320      	adds	r3, #32
 8007a84:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <dir_next+0x28>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a94:	d301      	bcc.n	8007a9a <dir_next+0x2c>
 8007a96:	2304      	movs	r3, #4
 8007a98:	e0aa      	b.n	8007bf0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f040 8098 	bne.w	8007bd6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	69db      	ldr	r3, [r3, #28]
 8007aaa:	1c5a      	adds	r2, r3, #1
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10b      	bne.n	8007ad0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	095b      	lsrs	r3, r3, #5
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	8912      	ldrh	r2, [r2, #8]
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	f0c0 8088 	bcc.w	8007bd6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	61da      	str	r2, [r3, #28]
 8007acc:	2304      	movs	r3, #4
 8007ace:	e08f      	b.n	8007bf0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	0a5b      	lsrs	r3, r3, #9
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	8952      	ldrh	r2, [r2, #10]
 8007ad8:	3a01      	subs	r2, #1
 8007ada:	4013      	ands	r3, r2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d17a      	bne.n	8007bd6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	4610      	mov	r0, r2
 8007aea:	f7ff fc80 	bl	80073ee <get_fat>
 8007aee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d801      	bhi.n	8007afa <dir_next+0x8c>
 8007af6:	2302      	movs	r3, #2
 8007af8:	e07a      	b.n	8007bf0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b00:	d101      	bne.n	8007b06 <dir_next+0x98>
 8007b02:	2301      	movs	r3, #1
 8007b04:	e074      	b.n	8007bf0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	695b      	ldr	r3, [r3, #20]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d358      	bcc.n	8007bc2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d104      	bne.n	8007b20 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	61da      	str	r2, [r3, #28]
 8007b1c:	2304      	movs	r3, #4
 8007b1e:	e067      	b.n	8007bf0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	4619      	mov	r1, r3
 8007b28:	4610      	mov	r0, r2
 8007b2a:	f7ff fe59 	bl	80077e0 <create_chain>
 8007b2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d101      	bne.n	8007b3a <dir_next+0xcc>
 8007b36:	2307      	movs	r3, #7
 8007b38:	e05a      	b.n	8007bf0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d101      	bne.n	8007b44 <dir_next+0xd6>
 8007b40:	2302      	movs	r3, #2
 8007b42:	e055      	b.n	8007bf0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b4a:	d101      	bne.n	8007b50 <dir_next+0xe2>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e04f      	b.n	8007bf0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff fb4d 	bl	80071f0 <sync_window>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <dir_next+0xf2>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e047      	b.n	8007bf0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	3330      	adds	r3, #48	; 0x30
 8007b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007b68:	2100      	movs	r1, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7ff f977 	bl	8006e5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b70:	2300      	movs	r3, #0
 8007b72:	613b      	str	r3, [r7, #16]
 8007b74:	6979      	ldr	r1, [r7, #20]
 8007b76:	68f8      	ldr	r0, [r7, #12]
 8007b78:	f7ff fc1a 	bl	80073b0 <clust2sect>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	62da      	str	r2, [r3, #44]	; 0x2c
 8007b82:	e012      	b.n	8007baa <dir_next+0x13c>
						fs->wflag = 1;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2201      	movs	r2, #1
 8007b88:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007b8a:	68f8      	ldr	r0, [r7, #12]
 8007b8c:	f7ff fb30 	bl	80071f0 <sync_window>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d001      	beq.n	8007b9a <dir_next+0x12c>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e02a      	b.n	8007bf0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	613b      	str	r3, [r7, #16]
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	62da      	str	r2, [r3, #44]	; 0x2c
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	895b      	ldrh	r3, [r3, #10]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d3e6      	bcc.n	8007b84 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	1ad2      	subs	r2, r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	697a      	ldr	r2, [r7, #20]
 8007bc6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007bc8:	6979      	ldr	r1, [r7, #20]
 8007bca:	68f8      	ldr	r0, [r7, #12]
 8007bcc:	f7ff fbf0 	bl	80073b0 <clust2sect>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be8:	441a      	add	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3718      	adds	r7, #24
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007c08:	2100      	movs	r1, #0
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff feb4 	bl	8007978 <dir_sdi>
 8007c10:	4603      	mov	r3, r0
 8007c12:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d12b      	bne.n	8007c72 <dir_alloc+0x7a>
		n = 0;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	4619      	mov	r1, r3
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f7ff fb27 	bl	8007278 <move_window>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d11d      	bne.n	8007c70 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a1b      	ldr	r3, [r3, #32]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	2be5      	cmp	r3, #229	; 0xe5
 8007c3c:	d004      	beq.n	8007c48 <dir_alloc+0x50>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d107      	bne.n	8007c58 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	613b      	str	r3, [r7, #16]
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d102      	bne.n	8007c5c <dir_alloc+0x64>
 8007c56:	e00c      	b.n	8007c72 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007c58:	2300      	movs	r3, #0
 8007c5a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007c5c:	2101      	movs	r1, #1
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7ff ff05 	bl	8007a6e <dir_next>
 8007c64:	4603      	mov	r3, r0
 8007c66:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d0d7      	beq.n	8007c1e <dir_alloc+0x26>
 8007c6e:	e000      	b.n	8007c72 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007c70:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007c72:	7dfb      	ldrb	r3, [r7, #23]
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d101      	bne.n	8007c7c <dir_alloc+0x84>
 8007c78:	2307      	movs	r3, #7
 8007c7a:	75fb      	strb	r3, [r7, #23]
	return res;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3718      	adds	r7, #24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	331a      	adds	r3, #26
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff f83f 	bl	8006d18 <ld_word>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d109      	bne.n	8007cba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	3314      	adds	r3, #20
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff f834 	bl	8006d18 <ld_word>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	041b      	lsls	r3, r3, #16
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007cba:	68fb      	ldr	r3, [r7, #12]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	331a      	adds	r3, #26
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	b292      	uxth	r2, r2
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7ff f857 	bl	8006d8e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d109      	bne.n	8007cfc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f103 0214 	add.w	r2, r3, #20
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	0c1b      	lsrs	r3, r3, #16
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	4610      	mov	r0, r2
 8007cf8:	f7ff f849 	bl	8006d8e <st_word>
	}
}
 8007cfc:	bf00      	nop
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007d12:	2100      	movs	r1, #0
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff fe2f 	bl	8007978 <dir_sdi>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007d1e:	7dfb      	ldrb	r3, [r7, #23]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <dir_find+0x24>
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	e03e      	b.n	8007da6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6938      	ldr	r0, [r7, #16]
 8007d30:	f7ff faa2 	bl	8007278 <move_window>
 8007d34:	4603      	mov	r3, r0
 8007d36:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007d38:	7dfb      	ldrb	r3, [r7, #23]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d12f      	bne.n	8007d9e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a1b      	ldr	r3, [r3, #32]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <dir_find+0x4e>
 8007d4c:	2304      	movs	r3, #4
 8007d4e:	75fb      	strb	r3, [r7, #23]
 8007d50:	e028      	b.n	8007da4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	330b      	adds	r3, #11
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d5e:	b2da      	uxtb	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	330b      	adds	r3, #11
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	f003 0308 	and.w	r3, r3, #8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d10a      	bne.n	8007d8a <dir_find+0x86>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a18      	ldr	r0, [r3, #32]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3324      	adds	r3, #36	; 0x24
 8007d7c:	220b      	movs	r2, #11
 8007d7e:	4619      	mov	r1, r3
 8007d80:	f7ff f888 	bl	8006e94 <mem_cmp>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00b      	beq.n	8007da2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fe6e 	bl	8007a6e <dir_next>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d96:	7dfb      	ldrb	r3, [r7, #23]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d0c5      	beq.n	8007d28 <dir_find+0x24>
 8007d9c:	e002      	b.n	8007da4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007d9e:	bf00      	nop
 8007da0:	e000      	b.n	8007da4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007da2:	bf00      	nop

	return res;
 8007da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}

08007dae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b084      	sub	sp, #16
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff ff1a 	bl	8007bf8 <dir_alloc>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d11c      	bne.n	8007e08 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68b8      	ldr	r0, [r7, #8]
 8007dd6:	f7ff fa4f 	bl	8007278 <move_window>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d111      	bne.n	8007e08 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	2220      	movs	r2, #32
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff f836 	bl	8006e5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a18      	ldr	r0, [r3, #32]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3324      	adds	r3, #36	; 0x24
 8007dfa:	220b      	movs	r2, #11
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f7ff f80d 	bl	8006e1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2201      	movs	r2, #1
 8007e06:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b086      	sub	sp, #24
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d04e      	beq.n	8007ec8 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	613b      	str	r3, [r7, #16]
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8007e32:	e021      	b.n	8007e78 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a1a      	ldr	r2, [r3, #32]
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	1c59      	adds	r1, r3, #1
 8007e3c:	6179      	str	r1, [r7, #20]
 8007e3e:	4413      	add	r3, r2
 8007e40:	781b      	ldrb	r3, [r3, #0]
 8007e42:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	2b20      	cmp	r3, #32
 8007e48:	d100      	bne.n	8007e4c <get_fileinfo+0x3a>
 8007e4a:	e015      	b.n	8007e78 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	2b05      	cmp	r3, #5
 8007e50:	d101      	bne.n	8007e56 <get_fileinfo+0x44>
 8007e52:	23e5      	movs	r3, #229	; 0xe5
 8007e54:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b09      	cmp	r3, #9
 8007e5a:	d106      	bne.n	8007e6a <get_fileinfo+0x58>
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	1c5a      	adds	r2, r3, #1
 8007e60:	613a      	str	r2, [r7, #16]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	4413      	add	r3, r2
 8007e66:	222e      	movs	r2, #46	; 0x2e
 8007e68:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	613a      	str	r2, [r7, #16]
 8007e70:	683a      	ldr	r2, [r7, #0]
 8007e72:	4413      	add	r3, r2
 8007e74:	7bfa      	ldrb	r2, [r7, #15]
 8007e76:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2b0a      	cmp	r3, #10
 8007e7c:	d9da      	bls.n	8007e34 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	4413      	add	r3, r2
 8007e84:	3309      	adds	r3, #9
 8007e86:	2200      	movs	r2, #0
 8007e88:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	7ada      	ldrb	r2, [r3, #11]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	331c      	adds	r3, #28
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fe ff54 	bl	8006d48 <ld_dword>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	3316      	adds	r3, #22
 8007eac:	4618      	mov	r0, r3
 8007eae:	f7fe ff4b 	bl	8006d48 <ld_dword>
 8007eb2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	b29a      	uxth	r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	80da      	strh	r2, [r3, #6]
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	0c1b      	lsrs	r3, r3, #16
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	809a      	strh	r2, [r3, #4]
 8007ec6:	e000      	b.n	8007eca <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007ec8:	bf00      	nop
}
 8007eca:	3718      	adds	r7, #24
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b088      	sub	sp, #32
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3324      	adds	r3, #36	; 0x24
 8007ee4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8007ee6:	220b      	movs	r2, #11
 8007ee8:	2120      	movs	r1, #32
 8007eea:	68b8      	ldr	r0, [r7, #8]
 8007eec:	f7fe ffb7 	bl	8006e5e <mem_set>
	si = i = 0; ni = 8;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	613b      	str	r3, [r7, #16]
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	2308      	movs	r3, #8
 8007efa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	61fa      	str	r2, [r7, #28]
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4413      	add	r3, r2
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007f0a:	7efb      	ldrb	r3, [r7, #27]
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d94e      	bls.n	8007fae <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8007f10:	7efb      	ldrb	r3, [r7, #27]
 8007f12:	2b2f      	cmp	r3, #47	; 0x2f
 8007f14:	d006      	beq.n	8007f24 <create_name+0x54>
 8007f16:	7efb      	ldrb	r3, [r7, #27]
 8007f18:	2b5c      	cmp	r3, #92	; 0x5c
 8007f1a:	d110      	bne.n	8007f3e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007f1c:	e002      	b.n	8007f24 <create_name+0x54>
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	3301      	adds	r3, #1
 8007f22:	61fb      	str	r3, [r7, #28]
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	4413      	add	r3, r2
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	2b2f      	cmp	r3, #47	; 0x2f
 8007f2e:	d0f6      	beq.n	8007f1e <create_name+0x4e>
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b5c      	cmp	r3, #92	; 0x5c
 8007f3a:	d0f0      	beq.n	8007f1e <create_name+0x4e>
			break;
 8007f3c:	e038      	b.n	8007fb0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007f3e:	7efb      	ldrb	r3, [r7, #27]
 8007f40:	2b2e      	cmp	r3, #46	; 0x2e
 8007f42:	d003      	beq.n	8007f4c <create_name+0x7c>
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d30c      	bcc.n	8007f66 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	2b0b      	cmp	r3, #11
 8007f50:	d002      	beq.n	8007f58 <create_name+0x88>
 8007f52:	7efb      	ldrb	r3, [r7, #27]
 8007f54:	2b2e      	cmp	r3, #46	; 0x2e
 8007f56:	d001      	beq.n	8007f5c <create_name+0x8c>
 8007f58:	2306      	movs	r3, #6
 8007f5a:	e044      	b.n	8007fe6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	613b      	str	r3, [r7, #16]
 8007f60:	230b      	movs	r3, #11
 8007f62:	617b      	str	r3, [r7, #20]
			continue;
 8007f64:	e022      	b.n	8007fac <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8007f66:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	da04      	bge.n	8007f78 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007f6e:	7efb      	ldrb	r3, [r7, #27]
 8007f70:	3b80      	subs	r3, #128	; 0x80
 8007f72:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <create_name+0x120>)
 8007f74:	5cd3      	ldrb	r3, [r2, r3]
 8007f76:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8007f78:	7efb      	ldrb	r3, [r7, #27]
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	481d      	ldr	r0, [pc, #116]	; (8007ff4 <create_name+0x124>)
 8007f7e:	f7fe ffb0 	bl	8006ee2 <chk_chr>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <create_name+0xbc>
 8007f88:	2306      	movs	r3, #6
 8007f8a:	e02c      	b.n	8007fe6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007f8c:	7efb      	ldrb	r3, [r7, #27]
 8007f8e:	2b60      	cmp	r3, #96	; 0x60
 8007f90:	d905      	bls.n	8007f9e <create_name+0xce>
 8007f92:	7efb      	ldrb	r3, [r7, #27]
 8007f94:	2b7a      	cmp	r3, #122	; 0x7a
 8007f96:	d802      	bhi.n	8007f9e <create_name+0xce>
 8007f98:	7efb      	ldrb	r3, [r7, #27]
 8007f9a:	3b20      	subs	r3, #32
 8007f9c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	613a      	str	r2, [r7, #16]
 8007fa4:	68ba      	ldr	r2, [r7, #8]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	7efa      	ldrb	r2, [r7, #27]
 8007faa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007fac:	e7a6      	b.n	8007efc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007fae:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	69fb      	ldr	r3, [r7, #28]
 8007fb4:	441a      	add	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <create_name+0xf4>
 8007fc0:	2306      	movs	r3, #6
 8007fc2:	e010      	b.n	8007fe6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	2be5      	cmp	r3, #229	; 0xe5
 8007fca:	d102      	bne.n	8007fd2 <create_name+0x102>
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2205      	movs	r2, #5
 8007fd0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007fd2:	7efb      	ldrb	r3, [r7, #27]
 8007fd4:	2b20      	cmp	r3, #32
 8007fd6:	d801      	bhi.n	8007fdc <create_name+0x10c>
 8007fd8:	2204      	movs	r2, #4
 8007fda:	e000      	b.n	8007fde <create_name+0x10e>
 8007fdc:	2200      	movs	r2, #0
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	330b      	adds	r3, #11
 8007fe2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8007fe4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3720      	adds	r7, #32
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	08009c5c 	.word	0x08009c5c
 8007ff4:	08009bd0 	.word	0x08009bd0

08007ff8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800800c:	e002      	b.n	8008014 <follow_path+0x1c>
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b2f      	cmp	r3, #47	; 0x2f
 800801a:	d0f8      	beq.n	800800e <follow_path+0x16>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b5c      	cmp	r3, #92	; 0x5c
 8008022:	d0f4      	beq.n	800800e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	2200      	movs	r2, #0
 8008028:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	2b1f      	cmp	r3, #31
 8008030:	d80a      	bhi.n	8008048 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2280      	movs	r2, #128	; 0x80
 8008036:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800803a:	2100      	movs	r1, #0
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff fc9b 	bl	8007978 <dir_sdi>
 8008042:	4603      	mov	r3, r0
 8008044:	75fb      	strb	r3, [r7, #23]
 8008046:	e043      	b.n	80080d0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008048:	463b      	mov	r3, r7
 800804a:	4619      	mov	r1, r3
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7ff ff3f 	bl	8007ed0 <create_name>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d134      	bne.n	80080c6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff fe51 	bl	8007d04 <dir_find>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800806c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00a      	beq.n	800808a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b04      	cmp	r3, #4
 8008078:	d127      	bne.n	80080ca <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800807a:	7afb      	ldrb	r3, [r7, #11]
 800807c:	f003 0304 	and.w	r3, r3, #4
 8008080:	2b00      	cmp	r3, #0
 8008082:	d122      	bne.n	80080ca <follow_path+0xd2>
 8008084:	2305      	movs	r3, #5
 8008086:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008088:	e01f      	b.n	80080ca <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800808a:	7afb      	ldrb	r3, [r7, #11]
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b00      	cmp	r3, #0
 8008092:	d11c      	bne.n	80080ce <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	799b      	ldrb	r3, [r3, #6]
 8008098:	f003 0310 	and.w	r3, r3, #16
 800809c:	2b00      	cmp	r3, #0
 800809e:	d102      	bne.n	80080a6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80080a0:	2305      	movs	r3, #5
 80080a2:	75fb      	strb	r3, [r7, #23]
 80080a4:	e014      	b.n	80080d0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080b4:	4413      	add	r3, r2
 80080b6:	4619      	mov	r1, r3
 80080b8:	68f8      	ldr	r0, [r7, #12]
 80080ba:	f7ff fde4 	bl	8007c86 <ld_clust>
 80080be:	4602      	mov	r2, r0
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80080c4:	e7c0      	b.n	8008048 <follow_path+0x50>
			if (res != FR_OK) break;
 80080c6:	bf00      	nop
 80080c8:	e002      	b.n	80080d0 <follow_path+0xd8>
				break;
 80080ca:	bf00      	nop
 80080cc:	e000      	b.n	80080d0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80080ce:	bf00      	nop
			}
		}
	}

	return res;
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80080da:	b480      	push	{r7}
 80080dc:	b087      	sub	sp, #28
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80080e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080e6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d031      	beq.n	8008154 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	617b      	str	r3, [r7, #20]
 80080f6:	e002      	b.n	80080fe <get_ldnumber+0x24>
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	3301      	adds	r3, #1
 80080fc:	617b      	str	r3, [r7, #20]
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	2b20      	cmp	r3, #32
 8008104:	d903      	bls.n	800810e <get_ldnumber+0x34>
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b3a      	cmp	r3, #58	; 0x3a
 800810c:	d1f4      	bne.n	80080f8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b3a      	cmp	r3, #58	; 0x3a
 8008114:	d11c      	bne.n	8008150 <get_ldnumber+0x76>
			tp = *path;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	60fa      	str	r2, [r7, #12]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	3b30      	subs	r3, #48	; 0x30
 8008126:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b09      	cmp	r3, #9
 800812c:	d80e      	bhi.n	800814c <get_ldnumber+0x72>
 800812e:	68fa      	ldr	r2, [r7, #12]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	429a      	cmp	r2, r3
 8008134:	d10a      	bne.n	800814c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d107      	bne.n	800814c <get_ldnumber+0x72>
					vol = (int)i;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	3301      	adds	r3, #1
 8008144:	617b      	str	r3, [r7, #20]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	e002      	b.n	8008156 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008150:	2300      	movs	r3, #0
 8008152:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008154:	693b      	ldr	r3, [r7, #16]
}
 8008156:	4618      	mov	r0, r3
 8008158:	371c      	adds	r7, #28
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
	...

08008164 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	70da      	strb	r2, [r3, #3]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800817a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7ff f87a 	bl	8007278 <move_window>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <check_fs+0x2a>
 800818a:	2304      	movs	r3, #4
 800818c:	e038      	b.n	8008200 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3330      	adds	r3, #48	; 0x30
 8008192:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008196:	4618      	mov	r0, r3
 8008198:	f7fe fdbe 	bl	8006d18 <ld_word>
 800819c:	4603      	mov	r3, r0
 800819e:	461a      	mov	r2, r3
 80081a0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d001      	beq.n	80081ac <check_fs+0x48>
 80081a8:	2303      	movs	r3, #3
 80081aa:	e029      	b.n	8008200 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081b2:	2be9      	cmp	r3, #233	; 0xe9
 80081b4:	d009      	beq.n	80081ca <check_fs+0x66>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081bc:	2beb      	cmp	r3, #235	; 0xeb
 80081be:	d11e      	bne.n	80081fe <check_fs+0x9a>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80081c6:	2b90      	cmp	r3, #144	; 0x90
 80081c8:	d119      	bne.n	80081fe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3330      	adds	r3, #48	; 0x30
 80081ce:	3336      	adds	r3, #54	; 0x36
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fe fdb9 	bl	8006d48 <ld_dword>
 80081d6:	4603      	mov	r3, r0
 80081d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081dc:	4a0a      	ldr	r2, [pc, #40]	; (8008208 <check_fs+0xa4>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d101      	bne.n	80081e6 <check_fs+0x82>
 80081e2:	2300      	movs	r3, #0
 80081e4:	e00c      	b.n	8008200 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3330      	adds	r3, #48	; 0x30
 80081ea:	3352      	adds	r3, #82	; 0x52
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fdab 	bl	8006d48 <ld_dword>
 80081f2:	4603      	mov	r3, r0
 80081f4:	4a05      	ldr	r2, [pc, #20]	; (800820c <check_fs+0xa8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d101      	bne.n	80081fe <check_fs+0x9a>
 80081fa:	2300      	movs	r3, #0
 80081fc:	e000      	b.n	8008200 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80081fe:	2302      	movs	r3, #2
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	00544146 	.word	0x00544146
 800820c:	33544146 	.word	0x33544146

08008210 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b096      	sub	sp, #88	; 0x58
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	4613      	mov	r3, r2
 800821c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2200      	movs	r2, #0
 8008222:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff ff58 	bl	80080da <get_ldnumber>
 800822a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800822c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	da01      	bge.n	8008236 <find_volume+0x26>
 8008232:	230b      	movs	r3, #11
 8008234:	e22e      	b.n	8008694 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008236:	4aa8      	ldr	r2, [pc, #672]	; (80084d8 <find_volume+0x2c8>)
 8008238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800823e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <find_volume+0x3a>
 8008246:	230c      	movs	r3, #12
 8008248:	e224      	b.n	8008694 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800824e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	f023 0301 	bic.w	r3, r3, #1
 8008256:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d01a      	beq.n	8008296 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	785b      	ldrb	r3, [r3, #1]
 8008264:	4618      	mov	r0, r3
 8008266:	f7fe fcb9 	bl	8006bdc <disk_status>
 800826a:	4603      	mov	r3, r0
 800826c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008270:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10c      	bne.n	8008296 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <find_volume+0x82>
 8008282:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008286:	f003 0304 	and.w	r3, r3, #4
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800828e:	230a      	movs	r3, #10
 8008290:	e200      	b.n	8008694 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008292:	2300      	movs	r3, #0
 8008294:	e1fe      	b.n	8008694 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800829c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80082a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a6:	785b      	ldrb	r3, [r3, #1]
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7fe fcb1 	bl	8006c10 <disk_initialize>
 80082ae:	4603      	mov	r3, r0
 80082b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80082b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d001      	beq.n	80082c4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80082c0:	2303      	movs	r3, #3
 80082c2:	e1e7      	b.n	8008694 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d007      	beq.n	80082da <find_volume+0xca>
 80082ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d001      	beq.n	80082da <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80082d6:	230a      	movs	r3, #10
 80082d8:	e1dc      	b.n	8008694 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80082de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80082e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082e2:	f7ff ff3f 	bl	8008164 <check_fs>
 80082e6:	4603      	mov	r3, r0
 80082e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80082ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d14b      	bne.n	800838c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80082f4:	2300      	movs	r3, #0
 80082f6:	643b      	str	r3, [r7, #64]	; 0x40
 80082f8:	e01f      	b.n	800833a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80082fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008300:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008302:	011b      	lsls	r3, r3, #4
 8008304:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008308:	4413      	add	r3, r2
 800830a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800830c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830e:	3304      	adds	r3, #4
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d006      	beq.n	8008324 <find_volume+0x114>
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	3308      	adds	r3, #8
 800831a:	4618      	mov	r0, r3
 800831c:	f7fe fd14 	bl	8006d48 <ld_dword>
 8008320:	4602      	mov	r2, r0
 8008322:	e000      	b.n	8008326 <find_volume+0x116>
 8008324:	2200      	movs	r2, #0
 8008326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800832e:	440b      	add	r3, r1
 8008330:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008336:	3301      	adds	r3, #1
 8008338:	643b      	str	r3, [r7, #64]	; 0x40
 800833a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800833c:	2b03      	cmp	r3, #3
 800833e:	d9dc      	bls.n	80082fa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008340:	2300      	movs	r3, #0
 8008342:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008344:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	d002      	beq.n	8008350 <find_volume+0x140>
 800834a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834c:	3b01      	subs	r3, #1
 800834e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008358:	4413      	add	r3, r2
 800835a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800835e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <find_volume+0x162>
 8008366:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800836a:	f7ff fefb 	bl	8008164 <check_fs>
 800836e:	4603      	mov	r3, r0
 8008370:	e000      	b.n	8008374 <find_volume+0x164>
 8008372:	2303      	movs	r3, #3
 8008374:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008378:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800837c:	2b01      	cmp	r3, #1
 800837e:	d905      	bls.n	800838c <find_volume+0x17c>
 8008380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008382:	3301      	adds	r3, #1
 8008384:	643b      	str	r3, [r7, #64]	; 0x40
 8008386:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008388:	2b03      	cmp	r3, #3
 800838a:	d9e1      	bls.n	8008350 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800838c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008390:	2b04      	cmp	r3, #4
 8008392:	d101      	bne.n	8008398 <find_volume+0x188>
 8008394:	2301      	movs	r3, #1
 8008396:	e17d      	b.n	8008694 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008398:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800839c:	2b01      	cmp	r3, #1
 800839e:	d901      	bls.n	80083a4 <find_volume+0x194>
 80083a0:	230d      	movs	r3, #13
 80083a2:	e177      	b.n	8008694 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80083a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a6:	3330      	adds	r3, #48	; 0x30
 80083a8:	330b      	adds	r3, #11
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fcb4 	bl	8006d18 <ld_word>
 80083b0:	4603      	mov	r3, r0
 80083b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083b6:	d001      	beq.n	80083bc <find_volume+0x1ac>
 80083b8:	230d      	movs	r3, #13
 80083ba:	e16b      	b.n	8008694 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	3330      	adds	r3, #48	; 0x30
 80083c0:	3316      	adds	r3, #22
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fe fca8 	bl	8006d18 <ld_word>
 80083c8:	4603      	mov	r3, r0
 80083ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80083cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d106      	bne.n	80083e0 <find_volume+0x1d0>
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	3330      	adds	r3, #48	; 0x30
 80083d6:	3324      	adds	r3, #36	; 0x24
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fe fcb5 	bl	8006d48 <ld_dword>
 80083de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083e4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80083ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	789b      	ldrb	r3, [r3, #2]
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	d005      	beq.n	8008404 <find_volume+0x1f4>
 80083f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083fa:	789b      	ldrb	r3, [r3, #2]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d001      	beq.n	8008404 <find_volume+0x1f4>
 8008400:	230d      	movs	r3, #13
 8008402:	e147      	b.n	8008694 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008406:	789b      	ldrb	r3, [r3, #2]
 8008408:	461a      	mov	r2, r3
 800840a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800840c:	fb02 f303 	mul.w	r3, r2, r3
 8008410:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008418:	b29a      	uxth	r2, r3
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800841e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008420:	895b      	ldrh	r3, [r3, #10]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d008      	beq.n	8008438 <find_volume+0x228>
 8008426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008428:	895b      	ldrh	r3, [r3, #10]
 800842a:	461a      	mov	r2, r3
 800842c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842e:	895b      	ldrh	r3, [r3, #10]
 8008430:	3b01      	subs	r3, #1
 8008432:	4013      	ands	r3, r2
 8008434:	2b00      	cmp	r3, #0
 8008436:	d001      	beq.n	800843c <find_volume+0x22c>
 8008438:	230d      	movs	r3, #13
 800843a:	e12b      	b.n	8008694 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800843c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843e:	3330      	adds	r3, #48	; 0x30
 8008440:	3311      	adds	r3, #17
 8008442:	4618      	mov	r0, r3
 8008444:	f7fe fc68 	bl	8006d18 <ld_word>
 8008448:	4603      	mov	r3, r0
 800844a:	461a      	mov	r2, r3
 800844c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008452:	891b      	ldrh	r3, [r3, #8]
 8008454:	f003 030f 	and.w	r3, r3, #15
 8008458:	b29b      	uxth	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <find_volume+0x252>
 800845e:	230d      	movs	r3, #13
 8008460:	e118      	b.n	8008694 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008464:	3330      	adds	r3, #48	; 0x30
 8008466:	3313      	adds	r3, #19
 8008468:	4618      	mov	r0, r3
 800846a:	f7fe fc55 	bl	8006d18 <ld_word>
 800846e:	4603      	mov	r3, r0
 8008470:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008474:	2b00      	cmp	r3, #0
 8008476:	d106      	bne.n	8008486 <find_volume+0x276>
 8008478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847a:	3330      	adds	r3, #48	; 0x30
 800847c:	3320      	adds	r3, #32
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fc62 	bl	8006d48 <ld_dword>
 8008484:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008488:	3330      	adds	r3, #48	; 0x30
 800848a:	330e      	adds	r3, #14
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fc43 	bl	8006d18 <ld_word>
 8008492:	4603      	mov	r3, r0
 8008494:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008496:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008498:	2b00      	cmp	r3, #0
 800849a:	d101      	bne.n	80084a0 <find_volume+0x290>
 800849c:	230d      	movs	r3, #13
 800849e:	e0f9      	b.n	8008694 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80084a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80084a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084a4:	4413      	add	r3, r2
 80084a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084a8:	8912      	ldrh	r2, [r2, #8]
 80084aa:	0912      	lsrs	r2, r2, #4
 80084ac:	b292      	uxth	r2, r2
 80084ae:	4413      	add	r3, r2
 80084b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80084b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d201      	bcs.n	80084be <find_volume+0x2ae>
 80084ba:	230d      	movs	r3, #13
 80084bc:	e0ea      	b.n	8008694 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80084be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c2:	1ad3      	subs	r3, r2, r3
 80084c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084c6:	8952      	ldrh	r2, [r2, #10]
 80084c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d103      	bne.n	80084dc <find_volume+0x2cc>
 80084d4:	230d      	movs	r3, #13
 80084d6:	e0dd      	b.n	8008694 <find_volume+0x484>
 80084d8:	200000c8 	.word	0x200000c8
		fmt = FS_FAT32;
 80084dc:	2303      	movs	r3, #3
 80084de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80084e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d802      	bhi.n	80084f2 <find_volume+0x2e2>
 80084ec:	2302      	movs	r3, #2
 80084ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d802      	bhi.n	8008502 <find_volume+0x2f2>
 80084fc:	2301      	movs	r3, #1
 80084fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	1c9a      	adds	r2, r3, #2
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800850e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008510:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008514:	441a      	add	r2, r3
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800851a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	441a      	add	r2, r3
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008524:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008528:	2b03      	cmp	r3, #3
 800852a:	d11e      	bne.n	800856a <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	3330      	adds	r3, #48	; 0x30
 8008530:	332a      	adds	r3, #42	; 0x2a
 8008532:	4618      	mov	r0, r3
 8008534:	f7fe fbf0 	bl	8006d18 <ld_word>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d001      	beq.n	8008542 <find_volume+0x332>
 800853e:	230d      	movs	r3, #13
 8008540:	e0a8      	b.n	8008694 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008544:	891b      	ldrh	r3, [r3, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <find_volume+0x33e>
 800854a:	230d      	movs	r3, #13
 800854c:	e0a2      	b.n	8008694 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800854e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008550:	3330      	adds	r3, #48	; 0x30
 8008552:	332c      	adds	r3, #44	; 0x2c
 8008554:	4618      	mov	r0, r3
 8008556:	f7fe fbf7 	bl	8006d48 <ld_dword>
 800855a:	4602      	mov	r2, r0
 800855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800855e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008562:	695b      	ldr	r3, [r3, #20]
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	647b      	str	r3, [r7, #68]	; 0x44
 8008568:	e01f      	b.n	80085aa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	891b      	ldrh	r3, [r3, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <find_volume+0x366>
 8008572:	230d      	movs	r3, #13
 8008574:	e08e      	b.n	8008694 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857c:	441a      	add	r2, r3
 800857e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008580:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008582:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008586:	2b02      	cmp	r3, #2
 8008588:	d103      	bne.n	8008592 <find_volume+0x382>
 800858a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	e00a      	b.n	80085a8 <find_volume+0x398>
 8008592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008594:	695a      	ldr	r2, [r3, #20]
 8008596:	4613      	mov	r3, r2
 8008598:	005b      	lsls	r3, r3, #1
 800859a:	4413      	add	r3, r2
 800859c:	085a      	lsrs	r2, r3, #1
 800859e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80085a8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80085aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085ac:	699a      	ldr	r2, [r3, #24]
 80085ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80085b4:	0a5b      	lsrs	r3, r3, #9
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d201      	bcs.n	80085be <find_volume+0x3ae>
 80085ba:	230d      	movs	r3, #13
 80085bc:	e06a      	b.n	8008694 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80085be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085c4:	611a      	str	r2, [r3, #16]
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085cc:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	2280      	movs	r2, #128	; 0x80
 80085d2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80085d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d149      	bne.n	8008670 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	3330      	adds	r3, #48	; 0x30
 80085e0:	3330      	adds	r3, #48	; 0x30
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe fb98 	bl	8006d18 <ld_word>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b01      	cmp	r3, #1
 80085ec:	d140      	bne.n	8008670 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80085ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f0:	3301      	adds	r3, #1
 80085f2:	4619      	mov	r1, r3
 80085f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085f6:	f7fe fe3f 	bl	8007278 <move_window>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d137      	bne.n	8008670 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008602:	2200      	movs	r2, #0
 8008604:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008608:	3330      	adds	r3, #48	; 0x30
 800860a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800860e:	4618      	mov	r0, r3
 8008610:	f7fe fb82 	bl	8006d18 <ld_word>
 8008614:	4603      	mov	r3, r0
 8008616:	461a      	mov	r2, r3
 8008618:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800861c:	429a      	cmp	r2, r3
 800861e:	d127      	bne.n	8008670 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008622:	3330      	adds	r3, #48	; 0x30
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fb8f 	bl	8006d48 <ld_dword>
 800862a:	4603      	mov	r3, r0
 800862c:	4a1b      	ldr	r2, [pc, #108]	; (800869c <find_volume+0x48c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d11e      	bne.n	8008670 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008634:	3330      	adds	r3, #48	; 0x30
 8008636:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800863a:	4618      	mov	r0, r3
 800863c:	f7fe fb84 	bl	8006d48 <ld_dword>
 8008640:	4603      	mov	r3, r0
 8008642:	4a17      	ldr	r2, [pc, #92]	; (80086a0 <find_volume+0x490>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d113      	bne.n	8008670 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864a:	3330      	adds	r3, #48	; 0x30
 800864c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008650:	4618      	mov	r0, r3
 8008652:	f7fe fb79 	bl	8006d48 <ld_dword>
 8008656:	4602      	mov	r2, r0
 8008658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865a:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800865c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800865e:	3330      	adds	r3, #48	; 0x30
 8008660:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008664:	4618      	mov	r0, r3
 8008666:	f7fe fb6f 	bl	8006d48 <ld_dword>
 800866a:	4602      	mov	r2, r0
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008676:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008678:	4b0a      	ldr	r3, [pc, #40]	; (80086a4 <find_volume+0x494>)
 800867a:	881b      	ldrh	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	b29a      	uxth	r2, r3
 8008680:	4b08      	ldr	r3, [pc, #32]	; (80086a4 <find_volume+0x494>)
 8008682:	801a      	strh	r2, [r3, #0]
 8008684:	4b07      	ldr	r3, [pc, #28]	; (80086a4 <find_volume+0x494>)
 8008686:	881a      	ldrh	r2, [r3, #0]
 8008688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800868a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800868c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800868e:	f7fe fd8b 	bl	80071a8 <clear_lock>
#endif
	return FR_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3758      	adds	r7, #88	; 0x58
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	41615252 	.word	0x41615252
 80086a0:	61417272 	.word	0x61417272
 80086a4:	200000cc 	.word	0x200000cc

080086a8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80086b2:	2309      	movs	r3, #9
 80086b4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01c      	beq.n	80086f6 <validate+0x4e>
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d018      	beq.n	80086f6 <validate+0x4e>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d013      	beq.n	80086f6 <validate+0x4e>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	889a      	ldrh	r2, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	88db      	ldrh	r3, [r3, #6]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d10c      	bne.n	80086f6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	785b      	ldrb	r3, [r3, #1]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fa7a 	bl	8006bdc <disk_status>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f003 0301 	and.w	r3, r3, #1
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d101      	bne.n	80086f6 <validate+0x4e>
			res = FR_OK;
 80086f2:	2300      	movs	r3, #0
 80086f4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80086f6:	7bfb      	ldrb	r3, [r7, #15]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <validate+0x5a>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	e000      	b.n	8008704 <validate+0x5c>
 8008702:	2300      	movs	r3, #0
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	6013      	str	r3, [r2, #0]
	return res;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3710      	adds	r7, #16
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
	...

08008714 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	60f8      	str	r0, [r7, #12]
 800871c:	60b9      	str	r1, [r7, #8]
 800871e:	4613      	mov	r3, r2
 8008720:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008726:	f107 0310 	add.w	r3, r7, #16
 800872a:	4618      	mov	r0, r3
 800872c:	f7ff fcd5 	bl	80080da <get_ldnumber>
 8008730:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	2b00      	cmp	r3, #0
 8008736:	da01      	bge.n	800873c <f_mount+0x28>
 8008738:	230b      	movs	r3, #11
 800873a:	e02b      	b.n	8008794 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800873c:	4a17      	ldr	r2, [pc, #92]	; (800879c <f_mount+0x88>)
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008744:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800874c:	69b8      	ldr	r0, [r7, #24]
 800874e:	f7fe fd2b 	bl	80071a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	2200      	movs	r2, #0
 8008756:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008764:	68fa      	ldr	r2, [r7, #12]
 8008766:	490d      	ldr	r1, [pc, #52]	; (800879c <f_mount+0x88>)
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <f_mount+0x66>
 8008774:	79fb      	ldrb	r3, [r7, #7]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d001      	beq.n	800877e <f_mount+0x6a>
 800877a:	2300      	movs	r3, #0
 800877c:	e00a      	b.n	8008794 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800877e:	f107 010c 	add.w	r1, r7, #12
 8008782:	f107 0308 	add.w	r3, r7, #8
 8008786:	2200      	movs	r2, #0
 8008788:	4618      	mov	r0, r3
 800878a:	f7ff fd41 	bl	8008210 <find_volume>
 800878e:	4603      	mov	r3, r0
 8008790:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008792:	7dfb      	ldrb	r3, [r7, #23]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3720      	adds	r7, #32
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	200000c8 	.word	0x200000c8

080087a0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b098      	sub	sp, #96	; 0x60
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	4613      	mov	r3, r2
 80087ac:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d101      	bne.n	80087b8 <f_open+0x18>
 80087b4:	2309      	movs	r3, #9
 80087b6:	e1ad      	b.n	8008b14 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087be:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80087c0:	79fa      	ldrb	r2, [r7, #7]
 80087c2:	f107 0110 	add.w	r1, r7, #16
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fd20 	bl	8008210 <find_volume>
 80087d0:	4603      	mov	r3, r0
 80087d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80087d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f040 8191 	bne.w	8008b02 <f_open+0x362>
		dj.obj.fs = fs;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80087e4:	68ba      	ldr	r2, [r7, #8]
 80087e6:	f107 0314 	add.w	r3, r7, #20
 80087ea:	4611      	mov	r1, r2
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7ff fc03 	bl	8007ff8 <follow_path>
 80087f2:	4603      	mov	r3, r0
 80087f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80087f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d11a      	bne.n	8008836 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008800:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008804:	b25b      	sxtb	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	da03      	bge.n	8008812 <f_open+0x72>
				res = FR_INVALID_NAME;
 800880a:	2306      	movs	r3, #6
 800880c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008810:	e011      	b.n	8008836 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	f023 0301 	bic.w	r3, r3, #1
 8008818:	2b00      	cmp	r3, #0
 800881a:	bf14      	ite	ne
 800881c:	2301      	movne	r3, #1
 800881e:	2300      	moveq	r3, #0
 8008820:	b2db      	uxtb	r3, r3
 8008822:	461a      	mov	r2, r3
 8008824:	f107 0314 	add.w	r3, r7, #20
 8008828:	4611      	mov	r1, r2
 800882a:	4618      	mov	r0, r3
 800882c:	f7fe fb74 	bl	8006f18 <chk_lock>
 8008830:	4603      	mov	r3, r0
 8008832:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	f003 031c 	and.w	r3, r3, #28
 800883c:	2b00      	cmp	r3, #0
 800883e:	d07f      	beq.n	8008940 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008840:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008844:	2b00      	cmp	r3, #0
 8008846:	d017      	beq.n	8008878 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008848:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800884c:	2b04      	cmp	r3, #4
 800884e:	d10e      	bne.n	800886e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008850:	f7fe fbbe 	bl	8006fd0 <enq_lock>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d006      	beq.n	8008868 <f_open+0xc8>
 800885a:	f107 0314 	add.w	r3, r7, #20
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff faa5 	bl	8007dae <dir_register>
 8008864:	4603      	mov	r3, r0
 8008866:	e000      	b.n	800886a <f_open+0xca>
 8008868:	2312      	movs	r3, #18
 800886a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	f043 0308 	orr.w	r3, r3, #8
 8008874:	71fb      	strb	r3, [r7, #7]
 8008876:	e010      	b.n	800889a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008878:	7ebb      	ldrb	r3, [r7, #26]
 800887a:	f003 0311 	and.w	r3, r3, #17
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <f_open+0xea>
					res = FR_DENIED;
 8008882:	2307      	movs	r3, #7
 8008884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008888:	e007      	b.n	800889a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800888a:	79fb      	ldrb	r3, [r7, #7]
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <f_open+0xfa>
 8008894:	2308      	movs	r3, #8
 8008896:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800889a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d168      	bne.n	8008974 <f_open+0x1d4>
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	f003 0308 	and.w	r3, r3, #8
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d063      	beq.n	8008974 <f_open+0x1d4>
				dw = GET_FATTIME();
 80088ac:	f7fd fc70 	bl	8006190 <get_fattime>
 80088b0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80088b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b4:	330e      	adds	r3, #14
 80088b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7fe fa83 	bl	8006dc4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80088be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088c0:	3316      	adds	r3, #22
 80088c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe fa7d 	bl	8006dc4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80088ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088cc:	330b      	adds	r3, #11
 80088ce:	2220      	movs	r2, #32
 80088d0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088d6:	4611      	mov	r1, r2
 80088d8:	4618      	mov	r0, r3
 80088da:	f7ff f9d4 	bl	8007c86 <ld_clust>
 80088de:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80088e4:	2200      	movs	r2, #0
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7ff f9ec 	bl	8007cc4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80088ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ee:	331c      	adds	r3, #28
 80088f0:	2100      	movs	r1, #0
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fe fa66 	bl	8006dc4 <st_dword>
					fs->wflag = 1;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2201      	movs	r2, #1
 80088fc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80088fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d037      	beq.n	8008974 <f_open+0x1d4>
						dw = fs->winsect;
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008908:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800890a:	f107 0314 	add.w	r3, r7, #20
 800890e:	2200      	movs	r2, #0
 8008910:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008912:	4618      	mov	r0, r3
 8008914:	f7fe feff 	bl	8007716 <remove_chain>
 8008918:	4603      	mov	r3, r0
 800891a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800891e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008922:	2b00      	cmp	r3, #0
 8008924:	d126      	bne.n	8008974 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fca4 	bl	8007278 <move_window>
 8008930:	4603      	mov	r3, r0
 8008932:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800893a:	3a01      	subs	r2, #1
 800893c:	60da      	str	r2, [r3, #12]
 800893e:	e019      	b.n	8008974 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008944:	2b00      	cmp	r3, #0
 8008946:	d115      	bne.n	8008974 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008948:	7ebb      	ldrb	r3, [r7, #26]
 800894a:	f003 0310 	and.w	r3, r3, #16
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <f_open+0x1ba>
					res = FR_NO_FILE;
 8008952:	2304      	movs	r3, #4
 8008954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008958:	e00c      	b.n	8008974 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	f003 0302 	and.w	r3, r3, #2
 8008960:	2b00      	cmp	r3, #0
 8008962:	d007      	beq.n	8008974 <f_open+0x1d4>
 8008964:	7ebb      	ldrb	r3, [r7, #26]
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d002      	beq.n	8008974 <f_open+0x1d4>
						res = FR_DENIED;
 800896e:	2307      	movs	r3, #7
 8008970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008974:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008978:	2b00      	cmp	r3, #0
 800897a:	d128      	bne.n	80089ce <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	f003 0308 	and.w	r3, r3, #8
 8008982:	2b00      	cmp	r3, #0
 8008984:	d003      	beq.n	800898e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008986:	79fb      	ldrb	r3, [r7, #7]
 8008988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800898c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	f023 0301 	bic.w	r3, r3, #1
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	bf14      	ite	ne
 80089a6:	2301      	movne	r3, #1
 80089a8:	2300      	moveq	r3, #0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	f107 0314 	add.w	r3, r7, #20
 80089b2:	4611      	mov	r1, r2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7fe fb2d 	bl	8007014 <inc_lock>
 80089ba:	4602      	mov	r2, r0
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	691b      	ldr	r3, [r3, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d102      	bne.n	80089ce <f_open+0x22e>
 80089c8:	2302      	movs	r3, #2
 80089ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80089ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f040 8095 	bne.w	8008b02 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff f951 	bl	8007c86 <ld_clust>
 80089e4:	4602      	mov	r2, r0
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	331c      	adds	r3, #28
 80089ee:	4618      	mov	r0, r3
 80089f0:	f7fe f9aa 	bl	8006d48 <ld_dword>
 80089f4:	4602      	mov	r2, r0
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2200      	movs	r2, #0
 80089fe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	88da      	ldrh	r2, [r3, #6]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	79fa      	ldrb	r2, [r7, #7]
 8008a12:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2200      	movs	r2, #0
 8008a18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2200      	movs	r2, #0
 8008a24:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3330      	adds	r3, #48	; 0x30
 8008a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a2e:	2100      	movs	r1, #0
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fa14 	bl	8006e5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d060      	beq.n	8008b02 <f_open+0x362>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d05c      	beq.n	8008b02 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	68da      	ldr	r2, [r3, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	895b      	ldrh	r3, [r3, #10]
 8008a54:	025b      	lsls	r3, r3, #9
 8008a56:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	68db      	ldr	r3, [r3, #12]
 8008a62:	657b      	str	r3, [r7, #84]	; 0x54
 8008a64:	e016      	b.n	8008a94 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7fe fcbf 	bl	80073ee <get_fat>
 8008a70:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008a72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d802      	bhi.n	8008a7e <f_open+0x2de>
 8008a78:	2302      	movs	r3, #2
 8008a7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a84:	d102      	bne.n	8008a8c <f_open+0x2ec>
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a90:	1ad3      	subs	r3, r2, r3
 8008a92:	657b      	str	r3, [r7, #84]	; 0x54
 8008a94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d103      	bne.n	8008aa4 <f_open+0x304>
 8008a9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d8e0      	bhi.n	8008a66 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aa8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008aaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d127      	bne.n	8008b02 <f_open+0x362>
 8008ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d022      	beq.n	8008b02 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fc75 	bl	80073b0 <clust2sect>
 8008ac6:	6478      	str	r0, [r7, #68]	; 0x44
 8008ac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d103      	bne.n	8008ad6 <f_open+0x336>
						res = FR_INT_ERR;
 8008ace:	2302      	movs	r3, #2
 8008ad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ad4:	e015      	b.n	8008b02 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ad8:	0a5a      	lsrs	r2, r3, #9
 8008ada:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008adc:	441a      	add	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	7858      	ldrb	r0, [r3, #1]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6a1a      	ldr	r2, [r3, #32]
 8008af0:	2301      	movs	r3, #1
 8008af2:	f7fe f8b3 	bl	8006c5c <disk_read>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d002      	beq.n	8008b02 <f_open+0x362>
 8008afc:	2301      	movs	r3, #1
 8008afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008b02:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <f_open+0x370>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008b10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3760      	adds	r7, #96	; 0x60
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b08c      	sub	sp, #48	; 0x30
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
 8008b28:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2200      	movs	r2, #0
 8008b32:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f107 0210 	add.w	r2, r7, #16
 8008b3a:	4611      	mov	r1, r2
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fdb3 	bl	80086a8 <validate>
 8008b42:	4603      	mov	r3, r0
 8008b44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d107      	bne.n	8008b60 <f_write+0x44>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	7d5b      	ldrb	r3, [r3, #21]
 8008b54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008b58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <f_write+0x4a>
 8008b60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008b64:	e14b      	b.n	8008dfe <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	7d1b      	ldrb	r3, [r3, #20]
 8008b6a:	f003 0302 	and.w	r3, r3, #2
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <f_write+0x5a>
 8008b72:	2307      	movs	r3, #7
 8008b74:	e143      	b.n	8008dfe <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	699a      	ldr	r2, [r3, #24]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	441a      	add	r2, r3
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	699b      	ldr	r3, [r3, #24]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	f080 812d 	bcs.w	8008de2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	43db      	mvns	r3, r3
 8008b8e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008b90:	e127      	b.n	8008de2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f040 80e3 	bne.w	8008d66 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	699b      	ldr	r3, [r3, #24]
 8008ba4:	0a5b      	lsrs	r3, r3, #9
 8008ba6:	693a      	ldr	r2, [r7, #16]
 8008ba8:	8952      	ldrh	r2, [r2, #10]
 8008baa:	3a01      	subs	r2, #1
 8008bac:	4013      	ands	r3, r2
 8008bae:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d143      	bne.n	8008c3e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10c      	bne.n	8008bd8 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d11a      	bne.n	8008c00 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2100      	movs	r1, #0
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fe fe06 	bl	80077e0 <create_chain>
 8008bd4:	62b8      	str	r0, [r7, #40]	; 0x28
 8008bd6:	e013      	b.n	8008c00 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d007      	beq.n	8008bf0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	699b      	ldr	r3, [r3, #24]
 8008be4:	4619      	mov	r1, r3
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f7fe fe92 	bl	8007910 <clmt_clust>
 8008bec:	62b8      	str	r0, [r7, #40]	; 0x28
 8008bee:	e007      	b.n	8008c00 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	69db      	ldr	r3, [r3, #28]
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	f7fe fdf1 	bl	80077e0 <create_chain>
 8008bfe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f000 80f2 	beq.w	8008dec <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d104      	bne.n	8008c18 <f_write+0xfc>
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	2202      	movs	r2, #2
 8008c12:	755a      	strb	r2, [r3, #21]
 8008c14:	2302      	movs	r3, #2
 8008c16:	e0f2      	b.n	8008dfe <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c1e:	d104      	bne.n	8008c2a <f_write+0x10e>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	755a      	strb	r2, [r3, #21]
 8008c26:	2301      	movs	r3, #1
 8008c28:	e0e9      	b.n	8008dfe <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c2e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <f_write+0x122>
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c3c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	7d1b      	ldrb	r3, [r3, #20]
 8008c42:	b25b      	sxtb	r3, r3
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	da18      	bge.n	8008c7a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	7858      	ldrb	r0, [r3, #1]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	6a1a      	ldr	r2, [r3, #32]
 8008c56:	2301      	movs	r3, #1
 8008c58:	f7fe f820 	bl	8006c9c <disk_write>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d004      	beq.n	8008c6c <f_write+0x150>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	755a      	strb	r2, [r3, #21]
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e0c8      	b.n	8008dfe <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	7d1b      	ldrb	r3, [r3, #20]
 8008c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	4619      	mov	r1, r3
 8008c82:	4610      	mov	r0, r2
 8008c84:	f7fe fb94 	bl	80073b0 <clust2sect>
 8008c88:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d104      	bne.n	8008c9a <f_write+0x17e>
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2202      	movs	r2, #2
 8008c94:	755a      	strb	r2, [r3, #21]
 8008c96:	2302      	movs	r3, #2
 8008c98:	e0b1      	b.n	8008dfe <f_write+0x2e2>
			sect += csect;
 8008c9a:	697a      	ldr	r2, [r7, #20]
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	4413      	add	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	0a5b      	lsrs	r3, r3, #9
 8008ca6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008ca8:	6a3b      	ldr	r3, [r7, #32]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d03c      	beq.n	8008d28 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	693a      	ldr	r2, [r7, #16]
 8008cb6:	8952      	ldrh	r2, [r2, #10]
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d905      	bls.n	8008cc8 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	895b      	ldrh	r3, [r3, #10]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	7858      	ldrb	r0, [r3, #1]
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	69f9      	ldr	r1, [r7, #28]
 8008cd2:	f7fd ffe3 	bl	8006c9c <disk_write>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d004      	beq.n	8008ce6 <f_write+0x1ca>
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	755a      	strb	r2, [r3, #21]
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e08b      	b.n	8008dfe <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6a1a      	ldr	r2, [r3, #32]
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	6a3a      	ldr	r2, [r7, #32]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d915      	bls.n	8008d20 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a1a      	ldr	r2, [r3, #32]
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	025b      	lsls	r3, r3, #9
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	f7fe f885 	bl	8006e1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	7d1b      	ldrb	r3, [r3, #20]
 8008d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	025b      	lsls	r3, r3, #9
 8008d24:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008d26:	e03f      	b.n	8008da8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d016      	beq.n	8008d60 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	699a      	ldr	r2, [r3, #24]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d210      	bcs.n	8008d60 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	7858      	ldrb	r0, [r3, #1]
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d48:	2301      	movs	r3, #1
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	f7fd ff86 	bl	8006c5c <disk_read>
 8008d50:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d004      	beq.n	8008d60 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	755a      	strb	r2, [r3, #21]
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e04e      	b.n	8008dfe <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008d72:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d901      	bls.n	8008d80 <f_write+0x264>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8e:	4413      	add	r3, r2
 8008d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d92:	69f9      	ldr	r1, [r7, #28]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe f841 	bl	8006e1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	7d1b      	ldrb	r3, [r3, #20]
 8008d9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008da8:	69fa      	ldr	r2, [r7, #28]
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	4413      	add	r3, r2
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	699a      	ldr	r2, [r3, #24]
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	441a      	add	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	619a      	str	r2, [r3, #24]
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	68da      	ldr	r2, [r3, #12]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	bf38      	it	cc
 8008dc8:	461a      	movcc	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	441a      	add	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	601a      	str	r2, [r3, #0]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	1ad3      	subs	r3, r2, r3
 8008de0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f47f aed4 	bne.w	8008b92 <f_write+0x76>
 8008dea:	e000      	b.n	8008dee <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008dec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	7d1b      	ldrb	r3, [r3, #20]
 8008df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3730      	adds	r7, #48	; 0x30
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b086      	sub	sp, #24
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f107 0208 	add.w	r2, r7, #8
 8008e14:	4611      	mov	r1, r2
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7ff fc46 	bl	80086a8 <validate>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d168      	bne.n	8008ef8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	7d1b      	ldrb	r3, [r3, #20]
 8008e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d062      	beq.n	8008ef8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	7d1b      	ldrb	r3, [r3, #20]
 8008e36:	b25b      	sxtb	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	da15      	bge.n	8008e68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	7858      	ldrb	r0, [r3, #1]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a1a      	ldr	r2, [r3, #32]
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	f7fd ff26 	bl	8006c9c <disk_write>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <f_sync+0x54>
 8008e56:	2301      	movs	r3, #1
 8008e58:	e04f      	b.n	8008efa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	7d1b      	ldrb	r3, [r3, #20]
 8008e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008e68:	f7fd f992 	bl	8006190 <get_fattime>
 8008e6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	4619      	mov	r1, r3
 8008e76:	4610      	mov	r0, r2
 8008e78:	f7fe f9fe 	bl	8007278 <move_window>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d138      	bne.n	8008ef8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	330b      	adds	r3, #11
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	330b      	adds	r3, #11
 8008e96:	f042 0220 	orr.w	r2, r2, #32
 8008e9a:	b2d2      	uxtb	r2, r2
 8008e9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6818      	ldr	r0, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	689b      	ldr	r3, [r3, #8]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68f9      	ldr	r1, [r7, #12]
 8008eaa:	f7fe ff0b 	bl	8007cc4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f103 021c 	add.w	r2, r3, #28
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	4610      	mov	r0, r2
 8008ebc:	f7fd ff82 	bl	8006dc4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	3316      	adds	r3, #22
 8008ec4:	6939      	ldr	r1, [r7, #16]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f7fd ff7c 	bl	8006dc4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	3312      	adds	r3, #18
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7fd ff5b 	bl	8006d8e <st_word>
					fs->wflag = 1;
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	2201      	movs	r2, #1
 8008edc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f7fe f9f7 	bl	80072d4 <sync_fs>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	7d1b      	ldrb	r3, [r3, #20]
 8008eee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b084      	sub	sp, #16
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff ff7b 	bl	8008e06 <f_sync>
 8008f10:	4603      	mov	r3, r0
 8008f12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d118      	bne.n	8008f4c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f107 0208 	add.w	r2, r7, #8
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7ff fbc0 	bl	80086a8 <validate>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f2c:	7bfb      	ldrb	r3, [r7, #15]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10c      	bne.n	8008f4c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fe f8fa 	bl	8007130 <dec_lock>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d102      	bne.n	8008f4c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b090      	sub	sp, #64	; 0x40
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008f60:	f107 010c 	add.w	r1, r7, #12
 8008f64:	1d3b      	adds	r3, r7, #4
 8008f66:	2200      	movs	r2, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7ff f951 	bl	8008210 <find_volume>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008f74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d11f      	bne.n	8008fbc <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	f107 030c 	add.w	r3, r7, #12
 8008f82:	4611      	mov	r1, r2
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7ff f837 	bl	8007ff8 <follow_path>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008f90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d111      	bne.n	8008fbc <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008f98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	da03      	bge.n	8008faa <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008fa2:	2306      	movs	r3, #6
 8008fa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8008fa8:	e008      	b.n	8008fbc <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d005      	beq.n	8008fbc <f_stat+0x66>
 8008fb0:	f107 030c 	add.w	r3, r7, #12
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7fe ff2b 	bl	8007e12 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008fbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3740      	adds	r7, #64	; 0x40
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}

08008fc8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b096      	sub	sp, #88	; 0x58
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008fd0:	f107 0108 	add.w	r1, r7, #8
 8008fd4:	1d3b      	adds	r3, r7, #4
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff f919 	bl	8008210 <find_volume>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8008fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	f040 80ec 	bne.w	80091ca <f_mkdir+0x202>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	f107 030c 	add.w	r3, r7, #12
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f7fe fffc 	bl	8007ff8 <follow_path>
 8009000:	4603      	mov	r3, r0
 8009002:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8009006:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800900a:	2b00      	cmp	r3, #0
 800900c:	d102      	bne.n	8009014 <f_mkdir+0x4c>
 800900e:	2308      	movs	r3, #8
 8009010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8009014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009018:	2b04      	cmp	r3, #4
 800901a:	f040 80d6 	bne.w	80091ca <f_mkdir+0x202>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800901e:	f107 030c 	add.w	r3, r7, #12
 8009022:	2100      	movs	r1, #0
 8009024:	4618      	mov	r0, r3
 8009026:	f7fe fbdb 	bl	80077e0 <create_chain>
 800902a:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	895b      	ldrh	r3, [r3, #10]
 8009030:	025b      	lsls	r3, r3, #9
 8009032:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8009034:	2300      	movs	r3, #0
 8009036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800903a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800903c:	2b00      	cmp	r3, #0
 800903e:	d102      	bne.n	8009046 <f_mkdir+0x7e>
 8009040:	2307      	movs	r3, #7
 8009042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8009046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009048:	2b01      	cmp	r3, #1
 800904a:	d102      	bne.n	8009052 <f_mkdir+0x8a>
 800904c:	2302      	movs	r3, #2
 800904e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009058:	d102      	bne.n	8009060 <f_mkdir+0x98>
 800905a:	2301      	movs	r3, #1
 800905c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8009060:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009064:	2b00      	cmp	r3, #0
 8009066:	d106      	bne.n	8009076 <f_mkdir+0xae>
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe f8c0 	bl	80071f0 <sync_window>
 8009070:	4603      	mov	r3, r0
 8009072:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8009076:	f7fd f88b 	bl	8006190 <get_fattime>
 800907a:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 800907c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009080:	2b00      	cmp	r3, #0
 8009082:	d16a      	bne.n	800915a <f_mkdir+0x192>
				dsc = clust2sect(fs, dcl);
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009088:	4618      	mov	r0, r3
 800908a:	f7fe f991 	bl	80073b0 <clust2sect>
 800908e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	3330      	adds	r3, #48	; 0x30
 8009094:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8009096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800909a:	2100      	movs	r1, #0
 800909c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800909e:	f7fd fede 	bl	8006e5e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80090a2:	220b      	movs	r2, #11
 80090a4:	2120      	movs	r1, #32
 80090a6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090a8:	f7fd fed9 	bl	8006e5e <mem_set>
					dir[DIR_Name] = '.';
 80090ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ae:	222e      	movs	r2, #46	; 0x2e
 80090b0:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80090b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b4:	330b      	adds	r3, #11
 80090b6:	2210      	movs	r2, #16
 80090b8:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80090ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090bc:	3316      	adds	r3, #22
 80090be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fd fe7f 	bl	8006dc4 <st_dword>
					st_clust(fs, dir, dcl);
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80090ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fe fdf9 	bl	8007cc4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80090d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d4:	3320      	adds	r3, #32
 80090d6:	2220      	movs	r2, #32
 80090d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090da:	4618      	mov	r0, r3
 80090dc:	f7fd fe9e 	bl	8006e1c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80090e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e2:	3321      	adds	r3, #33	; 0x21
 80090e4:	222e      	movs	r2, #46	; 0x2e
 80090e6:	701a      	strb	r2, [r3, #0]
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b03      	cmp	r3, #3
 80090f2:	d106      	bne.n	8009102 <f_mkdir+0x13a>
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d101      	bne.n	8009102 <f_mkdir+0x13a>
 80090fe:	2300      	movs	r3, #0
 8009100:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8009102:	68b8      	ldr	r0, [r7, #8]
 8009104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009106:	3320      	adds	r3, #32
 8009108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800910a:	4619      	mov	r1, r3
 800910c:	f7fe fdda 	bl	8007cc4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	895b      	ldrh	r3, [r3, #10]
 8009114:	653b      	str	r3, [r7, #80]	; 0x50
 8009116:	e01b      	b.n	8009150 <f_mkdir+0x188>
					fs->winsect = dsc++;
 8009118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	62d3      	str	r3, [r2, #44]	; 0x2c
					fs->wflag = 1;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2201      	movs	r2, #1
 8009126:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe f860 	bl	80071f0 <sync_window>
 8009130:	4603      	mov	r3, r0
 8009132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8009136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800913a:	2b00      	cmp	r3, #0
 800913c:	d10c      	bne.n	8009158 <f_mkdir+0x190>
					mem_set(dir, 0, SS(fs));
 800913e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009142:	2100      	movs	r1, #0
 8009144:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009146:	f7fd fe8a 	bl	8006e5e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800914a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800914c:	3b01      	subs	r3, #1
 800914e:	653b      	str	r3, [r7, #80]	; 0x50
 8009150:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e0      	bne.n	8009118 <f_mkdir+0x150>
 8009156:	e000      	b.n	800915a <f_mkdir+0x192>
					if (res != FR_OK) break;
 8009158:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800915a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800915e:	2b00      	cmp	r3, #0
 8009160:	d107      	bne.n	8009172 <f_mkdir+0x1aa>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8009162:	f107 030c 	add.w	r3, r7, #12
 8009166:	4618      	mov	r0, r3
 8009168:	f7fe fe21 	bl	8007dae <dir_register>
 800916c:	4603      	mov	r3, r0
 800916e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8009172:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009176:	2b00      	cmp	r3, #0
 8009178:	d120      	bne.n	80091bc <f_mkdir+0x1f4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 800917a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800917c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800917e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009180:	3316      	adds	r3, #22
 8009182:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009184:	4618      	mov	r0, r3
 8009186:	f7fd fe1d 	bl	8006dc4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800918e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009190:	4618      	mov	r0, r3
 8009192:	f7fe fd97 	bl	8007cc4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8009196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009198:	330b      	adds	r3, #11
 800919a:	2210      	movs	r2, #16
 800919c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	2201      	movs	r2, #1
 80091a2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80091a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10e      	bne.n	80091ca <f_mkdir+0x202>
					res = sync_fs(fs);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe f890 	bl	80072d4 <sync_fs>
 80091b4:	4603      	mov	r3, r0
 80091b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80091ba:	e006      	b.n	80091ca <f_mkdir+0x202>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80091bc:	f107 030c 	add.w	r3, r7, #12
 80091c0:	2200      	movs	r2, #0
 80091c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7fe faa6 	bl	8007716 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80091ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3758      	adds	r7, #88	; 0x58
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80091e6:	2301      	movs	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80091ee:	4b1f      	ldr	r3, [pc, #124]	; (800926c <FATFS_LinkDriverEx+0x94>)
 80091f0:	7a5b      	ldrb	r3, [r3, #9]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d131      	bne.n	800925c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80091f8:	4b1c      	ldr	r3, [pc, #112]	; (800926c <FATFS_LinkDriverEx+0x94>)
 80091fa:	7a5b      	ldrb	r3, [r3, #9]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	4b1a      	ldr	r3, [pc, #104]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009202:	2100      	movs	r1, #0
 8009204:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009206:	4b19      	ldr	r3, [pc, #100]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009208:	7a5b      	ldrb	r3, [r3, #9]
 800920a:	b2db      	uxtb	r3, r3
 800920c:	4a17      	ldr	r2, [pc, #92]	; (800926c <FATFS_LinkDriverEx+0x94>)
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009216:	4b15      	ldr	r3, [pc, #84]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009218:	7a5b      	ldrb	r3, [r3, #9]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	4b13      	ldr	r3, [pc, #76]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009220:	4413      	add	r3, r2
 8009222:	79fa      	ldrb	r2, [r7, #7]
 8009224:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009226:	4b11      	ldr	r3, [pc, #68]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009228:	7a5b      	ldrb	r3, [r3, #9]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	b2d1      	uxtb	r1, r2
 8009230:	4a0e      	ldr	r2, [pc, #56]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009232:	7251      	strb	r1, [r2, #9]
 8009234:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009236:	7dbb      	ldrb	r3, [r7, #22]
 8009238:	3330      	adds	r3, #48	; 0x30
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	3301      	adds	r3, #1
 8009244:	223a      	movs	r2, #58	; 0x3a
 8009246:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	3302      	adds	r3, #2
 800924c:	222f      	movs	r2, #47	; 0x2f
 800924e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	3303      	adds	r3, #3
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	200000f0 	.word	0x200000f0

08009270 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800927a:	2200      	movs	r2, #0
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff ffaa 	bl	80091d8 <FATFS_LinkDriverEx>
 8009284:	4603      	mov	r3, r0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <__errno>:
 8009290:	4b01      	ldr	r3, [pc, #4]	; (8009298 <__errno+0x8>)
 8009292:	6818      	ldr	r0, [r3, #0]
 8009294:	4770      	bx	lr
 8009296:	bf00      	nop
 8009298:	20000024 	.word	0x20000024

0800929c <__libc_init_array>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4d0d      	ldr	r5, [pc, #52]	; (80092d4 <__libc_init_array+0x38>)
 80092a0:	4c0d      	ldr	r4, [pc, #52]	; (80092d8 <__libc_init_array+0x3c>)
 80092a2:	1b64      	subs	r4, r4, r5
 80092a4:	10a4      	asrs	r4, r4, #2
 80092a6:	2600      	movs	r6, #0
 80092a8:	42a6      	cmp	r6, r4
 80092aa:	d109      	bne.n	80092c0 <__libc_init_array+0x24>
 80092ac:	4d0b      	ldr	r5, [pc, #44]	; (80092dc <__libc_init_array+0x40>)
 80092ae:	4c0c      	ldr	r4, [pc, #48]	; (80092e0 <__libc_init_array+0x44>)
 80092b0:	f000 fc62 	bl	8009b78 <_init>
 80092b4:	1b64      	subs	r4, r4, r5
 80092b6:	10a4      	asrs	r4, r4, #2
 80092b8:	2600      	movs	r6, #0
 80092ba:	42a6      	cmp	r6, r4
 80092bc:	d105      	bne.n	80092ca <__libc_init_array+0x2e>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c4:	4798      	blx	r3
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7ee      	b.n	80092a8 <__libc_init_array+0xc>
 80092ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ce:	4798      	blx	r3
 80092d0:	3601      	adds	r6, #1
 80092d2:	e7f2      	b.n	80092ba <__libc_init_array+0x1e>
 80092d4:	08009d18 	.word	0x08009d18
 80092d8:	08009d18 	.word	0x08009d18
 80092dc:	08009d18 	.word	0x08009d18
 80092e0:	08009d1c 	.word	0x08009d1c

080092e4 <memset>:
 80092e4:	4402      	add	r2, r0
 80092e6:	4603      	mov	r3, r0
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d100      	bne.n	80092ee <memset+0xa>
 80092ec:	4770      	bx	lr
 80092ee:	f803 1b01 	strb.w	r1, [r3], #1
 80092f2:	e7f9      	b.n	80092e8 <memset+0x4>

080092f4 <sniprintf>:
 80092f4:	b40c      	push	{r2, r3}
 80092f6:	b530      	push	{r4, r5, lr}
 80092f8:	4b17      	ldr	r3, [pc, #92]	; (8009358 <sniprintf+0x64>)
 80092fa:	1e0c      	subs	r4, r1, #0
 80092fc:	681d      	ldr	r5, [r3, #0]
 80092fe:	b09d      	sub	sp, #116	; 0x74
 8009300:	da08      	bge.n	8009314 <sniprintf+0x20>
 8009302:	238b      	movs	r3, #139	; 0x8b
 8009304:	602b      	str	r3, [r5, #0]
 8009306:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800930a:	b01d      	add	sp, #116	; 0x74
 800930c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009310:	b002      	add	sp, #8
 8009312:	4770      	bx	lr
 8009314:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009318:	f8ad 3014 	strh.w	r3, [sp, #20]
 800931c:	bf14      	ite	ne
 800931e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009322:	4623      	moveq	r3, r4
 8009324:	9304      	str	r3, [sp, #16]
 8009326:	9307      	str	r3, [sp, #28]
 8009328:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800932c:	9002      	str	r0, [sp, #8]
 800932e:	9006      	str	r0, [sp, #24]
 8009330:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009334:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009336:	ab21      	add	r3, sp, #132	; 0x84
 8009338:	a902      	add	r1, sp, #8
 800933a:	4628      	mov	r0, r5
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	f000 f869 	bl	8009414 <_svfiprintf_r>
 8009342:	1c43      	adds	r3, r0, #1
 8009344:	bfbc      	itt	lt
 8009346:	238b      	movlt	r3, #139	; 0x8b
 8009348:	602b      	strlt	r3, [r5, #0]
 800934a:	2c00      	cmp	r4, #0
 800934c:	d0dd      	beq.n	800930a <sniprintf+0x16>
 800934e:	9b02      	ldr	r3, [sp, #8]
 8009350:	2200      	movs	r2, #0
 8009352:	701a      	strb	r2, [r3, #0]
 8009354:	e7d9      	b.n	800930a <sniprintf+0x16>
 8009356:	bf00      	nop
 8009358:	20000024 	.word	0x20000024

0800935c <__ssputs_r>:
 800935c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009360:	688e      	ldr	r6, [r1, #8]
 8009362:	429e      	cmp	r6, r3
 8009364:	4682      	mov	sl, r0
 8009366:	460c      	mov	r4, r1
 8009368:	4690      	mov	r8, r2
 800936a:	461f      	mov	r7, r3
 800936c:	d838      	bhi.n	80093e0 <__ssputs_r+0x84>
 800936e:	898a      	ldrh	r2, [r1, #12]
 8009370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009374:	d032      	beq.n	80093dc <__ssputs_r+0x80>
 8009376:	6825      	ldr	r5, [r4, #0]
 8009378:	6909      	ldr	r1, [r1, #16]
 800937a:	eba5 0901 	sub.w	r9, r5, r1
 800937e:	6965      	ldr	r5, [r4, #20]
 8009380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009388:	3301      	adds	r3, #1
 800938a:	444b      	add	r3, r9
 800938c:	106d      	asrs	r5, r5, #1
 800938e:	429d      	cmp	r5, r3
 8009390:	bf38      	it	cc
 8009392:	461d      	movcc	r5, r3
 8009394:	0553      	lsls	r3, r2, #21
 8009396:	d531      	bpl.n	80093fc <__ssputs_r+0xa0>
 8009398:	4629      	mov	r1, r5
 800939a:	f000 fb47 	bl	8009a2c <_malloc_r>
 800939e:	4606      	mov	r6, r0
 80093a0:	b950      	cbnz	r0, 80093b8 <__ssputs_r+0x5c>
 80093a2:	230c      	movs	r3, #12
 80093a4:	f8ca 3000 	str.w	r3, [sl]
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b8:	6921      	ldr	r1, [r4, #16]
 80093ba:	464a      	mov	r2, r9
 80093bc:	f000 fabe 	bl	800993c <memcpy>
 80093c0:	89a3      	ldrh	r3, [r4, #12]
 80093c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093ca:	81a3      	strh	r3, [r4, #12]
 80093cc:	6126      	str	r6, [r4, #16]
 80093ce:	6165      	str	r5, [r4, #20]
 80093d0:	444e      	add	r6, r9
 80093d2:	eba5 0509 	sub.w	r5, r5, r9
 80093d6:	6026      	str	r6, [r4, #0]
 80093d8:	60a5      	str	r5, [r4, #8]
 80093da:	463e      	mov	r6, r7
 80093dc:	42be      	cmp	r6, r7
 80093de:	d900      	bls.n	80093e2 <__ssputs_r+0x86>
 80093e0:	463e      	mov	r6, r7
 80093e2:	4632      	mov	r2, r6
 80093e4:	6820      	ldr	r0, [r4, #0]
 80093e6:	4641      	mov	r1, r8
 80093e8:	f000 fab6 	bl	8009958 <memmove>
 80093ec:	68a3      	ldr	r3, [r4, #8]
 80093ee:	6822      	ldr	r2, [r4, #0]
 80093f0:	1b9b      	subs	r3, r3, r6
 80093f2:	4432      	add	r2, r6
 80093f4:	60a3      	str	r3, [r4, #8]
 80093f6:	6022      	str	r2, [r4, #0]
 80093f8:	2000      	movs	r0, #0
 80093fa:	e7db      	b.n	80093b4 <__ssputs_r+0x58>
 80093fc:	462a      	mov	r2, r5
 80093fe:	f000 fb6f 	bl	8009ae0 <_realloc_r>
 8009402:	4606      	mov	r6, r0
 8009404:	2800      	cmp	r0, #0
 8009406:	d1e1      	bne.n	80093cc <__ssputs_r+0x70>
 8009408:	6921      	ldr	r1, [r4, #16]
 800940a:	4650      	mov	r0, sl
 800940c:	f000 fabe 	bl	800998c <_free_r>
 8009410:	e7c7      	b.n	80093a2 <__ssputs_r+0x46>
	...

08009414 <_svfiprintf_r>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	4698      	mov	r8, r3
 800941a:	898b      	ldrh	r3, [r1, #12]
 800941c:	061b      	lsls	r3, r3, #24
 800941e:	b09d      	sub	sp, #116	; 0x74
 8009420:	4607      	mov	r7, r0
 8009422:	460d      	mov	r5, r1
 8009424:	4614      	mov	r4, r2
 8009426:	d50e      	bpl.n	8009446 <_svfiprintf_r+0x32>
 8009428:	690b      	ldr	r3, [r1, #16]
 800942a:	b963      	cbnz	r3, 8009446 <_svfiprintf_r+0x32>
 800942c:	2140      	movs	r1, #64	; 0x40
 800942e:	f000 fafd 	bl	8009a2c <_malloc_r>
 8009432:	6028      	str	r0, [r5, #0]
 8009434:	6128      	str	r0, [r5, #16]
 8009436:	b920      	cbnz	r0, 8009442 <_svfiprintf_r+0x2e>
 8009438:	230c      	movs	r3, #12
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009440:	e0d1      	b.n	80095e6 <_svfiprintf_r+0x1d2>
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	616b      	str	r3, [r5, #20]
 8009446:	2300      	movs	r3, #0
 8009448:	9309      	str	r3, [sp, #36]	; 0x24
 800944a:	2320      	movs	r3, #32
 800944c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009450:	f8cd 800c 	str.w	r8, [sp, #12]
 8009454:	2330      	movs	r3, #48	; 0x30
 8009456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009600 <_svfiprintf_r+0x1ec>
 800945a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800945e:	f04f 0901 	mov.w	r9, #1
 8009462:	4623      	mov	r3, r4
 8009464:	469a      	mov	sl, r3
 8009466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800946a:	b10a      	cbz	r2, 8009470 <_svfiprintf_r+0x5c>
 800946c:	2a25      	cmp	r2, #37	; 0x25
 800946e:	d1f9      	bne.n	8009464 <_svfiprintf_r+0x50>
 8009470:	ebba 0b04 	subs.w	fp, sl, r4
 8009474:	d00b      	beq.n	800948e <_svfiprintf_r+0x7a>
 8009476:	465b      	mov	r3, fp
 8009478:	4622      	mov	r2, r4
 800947a:	4629      	mov	r1, r5
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff ff6d 	bl	800935c <__ssputs_r>
 8009482:	3001      	adds	r0, #1
 8009484:	f000 80aa 	beq.w	80095dc <_svfiprintf_r+0x1c8>
 8009488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800948a:	445a      	add	r2, fp
 800948c:	9209      	str	r2, [sp, #36]	; 0x24
 800948e:	f89a 3000 	ldrb.w	r3, [sl]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80a2 	beq.w	80095dc <_svfiprintf_r+0x1c8>
 8009498:	2300      	movs	r3, #0
 800949a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800949e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094a2:	f10a 0a01 	add.w	sl, sl, #1
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	9307      	str	r3, [sp, #28]
 80094aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094ae:	931a      	str	r3, [sp, #104]	; 0x68
 80094b0:	4654      	mov	r4, sl
 80094b2:	2205      	movs	r2, #5
 80094b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b8:	4851      	ldr	r0, [pc, #324]	; (8009600 <_svfiprintf_r+0x1ec>)
 80094ba:	f7f6 fe89 	bl	80001d0 <memchr>
 80094be:	9a04      	ldr	r2, [sp, #16]
 80094c0:	b9d8      	cbnz	r0, 80094fa <_svfiprintf_r+0xe6>
 80094c2:	06d0      	lsls	r0, r2, #27
 80094c4:	bf44      	itt	mi
 80094c6:	2320      	movmi	r3, #32
 80094c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094cc:	0711      	lsls	r1, r2, #28
 80094ce:	bf44      	itt	mi
 80094d0:	232b      	movmi	r3, #43	; 0x2b
 80094d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094d6:	f89a 3000 	ldrb.w	r3, [sl]
 80094da:	2b2a      	cmp	r3, #42	; 0x2a
 80094dc:	d015      	beq.n	800950a <_svfiprintf_r+0xf6>
 80094de:	9a07      	ldr	r2, [sp, #28]
 80094e0:	4654      	mov	r4, sl
 80094e2:	2000      	movs	r0, #0
 80094e4:	f04f 0c0a 	mov.w	ip, #10
 80094e8:	4621      	mov	r1, r4
 80094ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094ee:	3b30      	subs	r3, #48	; 0x30
 80094f0:	2b09      	cmp	r3, #9
 80094f2:	d94e      	bls.n	8009592 <_svfiprintf_r+0x17e>
 80094f4:	b1b0      	cbz	r0, 8009524 <_svfiprintf_r+0x110>
 80094f6:	9207      	str	r2, [sp, #28]
 80094f8:	e014      	b.n	8009524 <_svfiprintf_r+0x110>
 80094fa:	eba0 0308 	sub.w	r3, r0, r8
 80094fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009502:	4313      	orrs	r3, r2
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	46a2      	mov	sl, r4
 8009508:	e7d2      	b.n	80094b0 <_svfiprintf_r+0x9c>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	1d19      	adds	r1, r3, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	9103      	str	r1, [sp, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	bfbb      	ittet	lt
 8009516:	425b      	neglt	r3, r3
 8009518:	f042 0202 	orrlt.w	r2, r2, #2
 800951c:	9307      	strge	r3, [sp, #28]
 800951e:	9307      	strlt	r3, [sp, #28]
 8009520:	bfb8      	it	lt
 8009522:	9204      	strlt	r2, [sp, #16]
 8009524:	7823      	ldrb	r3, [r4, #0]
 8009526:	2b2e      	cmp	r3, #46	; 0x2e
 8009528:	d10c      	bne.n	8009544 <_svfiprintf_r+0x130>
 800952a:	7863      	ldrb	r3, [r4, #1]
 800952c:	2b2a      	cmp	r3, #42	; 0x2a
 800952e:	d135      	bne.n	800959c <_svfiprintf_r+0x188>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	1d1a      	adds	r2, r3, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	9203      	str	r2, [sp, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	bfb8      	it	lt
 800953c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009540:	3402      	adds	r4, #2
 8009542:	9305      	str	r3, [sp, #20]
 8009544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009610 <_svfiprintf_r+0x1fc>
 8009548:	7821      	ldrb	r1, [r4, #0]
 800954a:	2203      	movs	r2, #3
 800954c:	4650      	mov	r0, sl
 800954e:	f7f6 fe3f 	bl	80001d0 <memchr>
 8009552:	b140      	cbz	r0, 8009566 <_svfiprintf_r+0x152>
 8009554:	2340      	movs	r3, #64	; 0x40
 8009556:	eba0 000a 	sub.w	r0, r0, sl
 800955a:	fa03 f000 	lsl.w	r0, r3, r0
 800955e:	9b04      	ldr	r3, [sp, #16]
 8009560:	4303      	orrs	r3, r0
 8009562:	3401      	adds	r4, #1
 8009564:	9304      	str	r3, [sp, #16]
 8009566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956a:	4826      	ldr	r0, [pc, #152]	; (8009604 <_svfiprintf_r+0x1f0>)
 800956c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009570:	2206      	movs	r2, #6
 8009572:	f7f6 fe2d 	bl	80001d0 <memchr>
 8009576:	2800      	cmp	r0, #0
 8009578:	d038      	beq.n	80095ec <_svfiprintf_r+0x1d8>
 800957a:	4b23      	ldr	r3, [pc, #140]	; (8009608 <_svfiprintf_r+0x1f4>)
 800957c:	bb1b      	cbnz	r3, 80095c6 <_svfiprintf_r+0x1b2>
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	3307      	adds	r3, #7
 8009582:	f023 0307 	bic.w	r3, r3, #7
 8009586:	3308      	adds	r3, #8
 8009588:	9303      	str	r3, [sp, #12]
 800958a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958c:	4433      	add	r3, r6
 800958e:	9309      	str	r3, [sp, #36]	; 0x24
 8009590:	e767      	b.n	8009462 <_svfiprintf_r+0x4e>
 8009592:	fb0c 3202 	mla	r2, ip, r2, r3
 8009596:	460c      	mov	r4, r1
 8009598:	2001      	movs	r0, #1
 800959a:	e7a5      	b.n	80094e8 <_svfiprintf_r+0xd4>
 800959c:	2300      	movs	r3, #0
 800959e:	3401      	adds	r4, #1
 80095a0:	9305      	str	r3, [sp, #20]
 80095a2:	4619      	mov	r1, r3
 80095a4:	f04f 0c0a 	mov.w	ip, #10
 80095a8:	4620      	mov	r0, r4
 80095aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ae:	3a30      	subs	r2, #48	; 0x30
 80095b0:	2a09      	cmp	r2, #9
 80095b2:	d903      	bls.n	80095bc <_svfiprintf_r+0x1a8>
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0c5      	beq.n	8009544 <_svfiprintf_r+0x130>
 80095b8:	9105      	str	r1, [sp, #20]
 80095ba:	e7c3      	b.n	8009544 <_svfiprintf_r+0x130>
 80095bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80095c0:	4604      	mov	r4, r0
 80095c2:	2301      	movs	r3, #1
 80095c4:	e7f0      	b.n	80095a8 <_svfiprintf_r+0x194>
 80095c6:	ab03      	add	r3, sp, #12
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	462a      	mov	r2, r5
 80095cc:	4b0f      	ldr	r3, [pc, #60]	; (800960c <_svfiprintf_r+0x1f8>)
 80095ce:	a904      	add	r1, sp, #16
 80095d0:	4638      	mov	r0, r7
 80095d2:	f3af 8000 	nop.w
 80095d6:	1c42      	adds	r2, r0, #1
 80095d8:	4606      	mov	r6, r0
 80095da:	d1d6      	bne.n	800958a <_svfiprintf_r+0x176>
 80095dc:	89ab      	ldrh	r3, [r5, #12]
 80095de:	065b      	lsls	r3, r3, #25
 80095e0:	f53f af2c 	bmi.w	800943c <_svfiprintf_r+0x28>
 80095e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095e6:	b01d      	add	sp, #116	; 0x74
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	ab03      	add	r3, sp, #12
 80095ee:	9300      	str	r3, [sp, #0]
 80095f0:	462a      	mov	r2, r5
 80095f2:	4b06      	ldr	r3, [pc, #24]	; (800960c <_svfiprintf_r+0x1f8>)
 80095f4:	a904      	add	r1, sp, #16
 80095f6:	4638      	mov	r0, r7
 80095f8:	f000 f87a 	bl	80096f0 <_printf_i>
 80095fc:	e7eb      	b.n	80095d6 <_svfiprintf_r+0x1c2>
 80095fe:	bf00      	nop
 8009600:	08009cdc 	.word	0x08009cdc
 8009604:	08009ce6 	.word	0x08009ce6
 8009608:	00000000 	.word	0x00000000
 800960c:	0800935d 	.word	0x0800935d
 8009610:	08009ce2 	.word	0x08009ce2

08009614 <_printf_common>:
 8009614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009618:	4616      	mov	r6, r2
 800961a:	4699      	mov	r9, r3
 800961c:	688a      	ldr	r2, [r1, #8]
 800961e:	690b      	ldr	r3, [r1, #16]
 8009620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009624:	4293      	cmp	r3, r2
 8009626:	bfb8      	it	lt
 8009628:	4613      	movlt	r3, r2
 800962a:	6033      	str	r3, [r6, #0]
 800962c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009630:	4607      	mov	r7, r0
 8009632:	460c      	mov	r4, r1
 8009634:	b10a      	cbz	r2, 800963a <_printf_common+0x26>
 8009636:	3301      	adds	r3, #1
 8009638:	6033      	str	r3, [r6, #0]
 800963a:	6823      	ldr	r3, [r4, #0]
 800963c:	0699      	lsls	r1, r3, #26
 800963e:	bf42      	ittt	mi
 8009640:	6833      	ldrmi	r3, [r6, #0]
 8009642:	3302      	addmi	r3, #2
 8009644:	6033      	strmi	r3, [r6, #0]
 8009646:	6825      	ldr	r5, [r4, #0]
 8009648:	f015 0506 	ands.w	r5, r5, #6
 800964c:	d106      	bne.n	800965c <_printf_common+0x48>
 800964e:	f104 0a19 	add.w	sl, r4, #25
 8009652:	68e3      	ldr	r3, [r4, #12]
 8009654:	6832      	ldr	r2, [r6, #0]
 8009656:	1a9b      	subs	r3, r3, r2
 8009658:	42ab      	cmp	r3, r5
 800965a:	dc26      	bgt.n	80096aa <_printf_common+0x96>
 800965c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009660:	1e13      	subs	r3, r2, #0
 8009662:	6822      	ldr	r2, [r4, #0]
 8009664:	bf18      	it	ne
 8009666:	2301      	movne	r3, #1
 8009668:	0692      	lsls	r2, r2, #26
 800966a:	d42b      	bmi.n	80096c4 <_printf_common+0xb0>
 800966c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009670:	4649      	mov	r1, r9
 8009672:	4638      	mov	r0, r7
 8009674:	47c0      	blx	r8
 8009676:	3001      	adds	r0, #1
 8009678:	d01e      	beq.n	80096b8 <_printf_common+0xa4>
 800967a:	6823      	ldr	r3, [r4, #0]
 800967c:	68e5      	ldr	r5, [r4, #12]
 800967e:	6832      	ldr	r2, [r6, #0]
 8009680:	f003 0306 	and.w	r3, r3, #6
 8009684:	2b04      	cmp	r3, #4
 8009686:	bf08      	it	eq
 8009688:	1aad      	subeq	r5, r5, r2
 800968a:	68a3      	ldr	r3, [r4, #8]
 800968c:	6922      	ldr	r2, [r4, #16]
 800968e:	bf0c      	ite	eq
 8009690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009694:	2500      	movne	r5, #0
 8009696:	4293      	cmp	r3, r2
 8009698:	bfc4      	itt	gt
 800969a:	1a9b      	subgt	r3, r3, r2
 800969c:	18ed      	addgt	r5, r5, r3
 800969e:	2600      	movs	r6, #0
 80096a0:	341a      	adds	r4, #26
 80096a2:	42b5      	cmp	r5, r6
 80096a4:	d11a      	bne.n	80096dc <_printf_common+0xc8>
 80096a6:	2000      	movs	r0, #0
 80096a8:	e008      	b.n	80096bc <_printf_common+0xa8>
 80096aa:	2301      	movs	r3, #1
 80096ac:	4652      	mov	r2, sl
 80096ae:	4649      	mov	r1, r9
 80096b0:	4638      	mov	r0, r7
 80096b2:	47c0      	blx	r8
 80096b4:	3001      	adds	r0, #1
 80096b6:	d103      	bne.n	80096c0 <_printf_common+0xac>
 80096b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c0:	3501      	adds	r5, #1
 80096c2:	e7c6      	b.n	8009652 <_printf_common+0x3e>
 80096c4:	18e1      	adds	r1, r4, r3
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	2030      	movs	r0, #48	; 0x30
 80096ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ce:	4422      	add	r2, r4
 80096d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096d8:	3302      	adds	r3, #2
 80096da:	e7c7      	b.n	800966c <_printf_common+0x58>
 80096dc:	2301      	movs	r3, #1
 80096de:	4622      	mov	r2, r4
 80096e0:	4649      	mov	r1, r9
 80096e2:	4638      	mov	r0, r7
 80096e4:	47c0      	blx	r8
 80096e6:	3001      	adds	r0, #1
 80096e8:	d0e6      	beq.n	80096b8 <_printf_common+0xa4>
 80096ea:	3601      	adds	r6, #1
 80096ec:	e7d9      	b.n	80096a2 <_printf_common+0x8e>
	...

080096f0 <_printf_i>:
 80096f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096f4:	460c      	mov	r4, r1
 80096f6:	4691      	mov	r9, r2
 80096f8:	7e27      	ldrb	r7, [r4, #24]
 80096fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80096fc:	2f78      	cmp	r7, #120	; 0x78
 80096fe:	4680      	mov	r8, r0
 8009700:	469a      	mov	sl, r3
 8009702:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009706:	d807      	bhi.n	8009718 <_printf_i+0x28>
 8009708:	2f62      	cmp	r7, #98	; 0x62
 800970a:	d80a      	bhi.n	8009722 <_printf_i+0x32>
 800970c:	2f00      	cmp	r7, #0
 800970e:	f000 80d8 	beq.w	80098c2 <_printf_i+0x1d2>
 8009712:	2f58      	cmp	r7, #88	; 0x58
 8009714:	f000 80a3 	beq.w	800985e <_printf_i+0x16e>
 8009718:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800971c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009720:	e03a      	b.n	8009798 <_printf_i+0xa8>
 8009722:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009726:	2b15      	cmp	r3, #21
 8009728:	d8f6      	bhi.n	8009718 <_printf_i+0x28>
 800972a:	a001      	add	r0, pc, #4	; (adr r0, 8009730 <_printf_i+0x40>)
 800972c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009730:	08009789 	.word	0x08009789
 8009734:	0800979d 	.word	0x0800979d
 8009738:	08009719 	.word	0x08009719
 800973c:	08009719 	.word	0x08009719
 8009740:	08009719 	.word	0x08009719
 8009744:	08009719 	.word	0x08009719
 8009748:	0800979d 	.word	0x0800979d
 800974c:	08009719 	.word	0x08009719
 8009750:	08009719 	.word	0x08009719
 8009754:	08009719 	.word	0x08009719
 8009758:	08009719 	.word	0x08009719
 800975c:	080098a9 	.word	0x080098a9
 8009760:	080097cd 	.word	0x080097cd
 8009764:	0800988b 	.word	0x0800988b
 8009768:	08009719 	.word	0x08009719
 800976c:	08009719 	.word	0x08009719
 8009770:	080098cb 	.word	0x080098cb
 8009774:	08009719 	.word	0x08009719
 8009778:	080097cd 	.word	0x080097cd
 800977c:	08009719 	.word	0x08009719
 8009780:	08009719 	.word	0x08009719
 8009784:	08009893 	.word	0x08009893
 8009788:	680b      	ldr	r3, [r1, #0]
 800978a:	1d1a      	adds	r2, r3, #4
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	600a      	str	r2, [r1, #0]
 8009790:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009794:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009798:	2301      	movs	r3, #1
 800979a:	e0a3      	b.n	80098e4 <_printf_i+0x1f4>
 800979c:	6825      	ldr	r5, [r4, #0]
 800979e:	6808      	ldr	r0, [r1, #0]
 80097a0:	062e      	lsls	r6, r5, #24
 80097a2:	f100 0304 	add.w	r3, r0, #4
 80097a6:	d50a      	bpl.n	80097be <_printf_i+0xce>
 80097a8:	6805      	ldr	r5, [r0, #0]
 80097aa:	600b      	str	r3, [r1, #0]
 80097ac:	2d00      	cmp	r5, #0
 80097ae:	da03      	bge.n	80097b8 <_printf_i+0xc8>
 80097b0:	232d      	movs	r3, #45	; 0x2d
 80097b2:	426d      	negs	r5, r5
 80097b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b8:	485e      	ldr	r0, [pc, #376]	; (8009934 <_printf_i+0x244>)
 80097ba:	230a      	movs	r3, #10
 80097bc:	e019      	b.n	80097f2 <_printf_i+0x102>
 80097be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80097c2:	6805      	ldr	r5, [r0, #0]
 80097c4:	600b      	str	r3, [r1, #0]
 80097c6:	bf18      	it	ne
 80097c8:	b22d      	sxthne	r5, r5
 80097ca:	e7ef      	b.n	80097ac <_printf_i+0xbc>
 80097cc:	680b      	ldr	r3, [r1, #0]
 80097ce:	6825      	ldr	r5, [r4, #0]
 80097d0:	1d18      	adds	r0, r3, #4
 80097d2:	6008      	str	r0, [r1, #0]
 80097d4:	0628      	lsls	r0, r5, #24
 80097d6:	d501      	bpl.n	80097dc <_printf_i+0xec>
 80097d8:	681d      	ldr	r5, [r3, #0]
 80097da:	e002      	b.n	80097e2 <_printf_i+0xf2>
 80097dc:	0669      	lsls	r1, r5, #25
 80097de:	d5fb      	bpl.n	80097d8 <_printf_i+0xe8>
 80097e0:	881d      	ldrh	r5, [r3, #0]
 80097e2:	4854      	ldr	r0, [pc, #336]	; (8009934 <_printf_i+0x244>)
 80097e4:	2f6f      	cmp	r7, #111	; 0x6f
 80097e6:	bf0c      	ite	eq
 80097e8:	2308      	moveq	r3, #8
 80097ea:	230a      	movne	r3, #10
 80097ec:	2100      	movs	r1, #0
 80097ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097f2:	6866      	ldr	r6, [r4, #4]
 80097f4:	60a6      	str	r6, [r4, #8]
 80097f6:	2e00      	cmp	r6, #0
 80097f8:	bfa2      	ittt	ge
 80097fa:	6821      	ldrge	r1, [r4, #0]
 80097fc:	f021 0104 	bicge.w	r1, r1, #4
 8009800:	6021      	strge	r1, [r4, #0]
 8009802:	b90d      	cbnz	r5, 8009808 <_printf_i+0x118>
 8009804:	2e00      	cmp	r6, #0
 8009806:	d04d      	beq.n	80098a4 <_printf_i+0x1b4>
 8009808:	4616      	mov	r6, r2
 800980a:	fbb5 f1f3 	udiv	r1, r5, r3
 800980e:	fb03 5711 	mls	r7, r3, r1, r5
 8009812:	5dc7      	ldrb	r7, [r0, r7]
 8009814:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009818:	462f      	mov	r7, r5
 800981a:	42bb      	cmp	r3, r7
 800981c:	460d      	mov	r5, r1
 800981e:	d9f4      	bls.n	800980a <_printf_i+0x11a>
 8009820:	2b08      	cmp	r3, #8
 8009822:	d10b      	bne.n	800983c <_printf_i+0x14c>
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	07df      	lsls	r7, r3, #31
 8009828:	d508      	bpl.n	800983c <_printf_i+0x14c>
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	6861      	ldr	r1, [r4, #4]
 800982e:	4299      	cmp	r1, r3
 8009830:	bfde      	ittt	le
 8009832:	2330      	movle	r3, #48	; 0x30
 8009834:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009838:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800983c:	1b92      	subs	r2, r2, r6
 800983e:	6122      	str	r2, [r4, #16]
 8009840:	f8cd a000 	str.w	sl, [sp]
 8009844:	464b      	mov	r3, r9
 8009846:	aa03      	add	r2, sp, #12
 8009848:	4621      	mov	r1, r4
 800984a:	4640      	mov	r0, r8
 800984c:	f7ff fee2 	bl	8009614 <_printf_common>
 8009850:	3001      	adds	r0, #1
 8009852:	d14c      	bne.n	80098ee <_printf_i+0x1fe>
 8009854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009858:	b004      	add	sp, #16
 800985a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800985e:	4835      	ldr	r0, [pc, #212]	; (8009934 <_printf_i+0x244>)
 8009860:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009864:	6823      	ldr	r3, [r4, #0]
 8009866:	680e      	ldr	r6, [r1, #0]
 8009868:	061f      	lsls	r7, r3, #24
 800986a:	f856 5b04 	ldr.w	r5, [r6], #4
 800986e:	600e      	str	r6, [r1, #0]
 8009870:	d514      	bpl.n	800989c <_printf_i+0x1ac>
 8009872:	07d9      	lsls	r1, r3, #31
 8009874:	bf44      	itt	mi
 8009876:	f043 0320 	orrmi.w	r3, r3, #32
 800987a:	6023      	strmi	r3, [r4, #0]
 800987c:	b91d      	cbnz	r5, 8009886 <_printf_i+0x196>
 800987e:	6823      	ldr	r3, [r4, #0]
 8009880:	f023 0320 	bic.w	r3, r3, #32
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	2310      	movs	r3, #16
 8009888:	e7b0      	b.n	80097ec <_printf_i+0xfc>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	f043 0320 	orr.w	r3, r3, #32
 8009890:	6023      	str	r3, [r4, #0]
 8009892:	2378      	movs	r3, #120	; 0x78
 8009894:	4828      	ldr	r0, [pc, #160]	; (8009938 <_printf_i+0x248>)
 8009896:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800989a:	e7e3      	b.n	8009864 <_printf_i+0x174>
 800989c:	065e      	lsls	r6, r3, #25
 800989e:	bf48      	it	mi
 80098a0:	b2ad      	uxthmi	r5, r5
 80098a2:	e7e6      	b.n	8009872 <_printf_i+0x182>
 80098a4:	4616      	mov	r6, r2
 80098a6:	e7bb      	b.n	8009820 <_printf_i+0x130>
 80098a8:	680b      	ldr	r3, [r1, #0]
 80098aa:	6826      	ldr	r6, [r4, #0]
 80098ac:	6960      	ldr	r0, [r4, #20]
 80098ae:	1d1d      	adds	r5, r3, #4
 80098b0:	600d      	str	r5, [r1, #0]
 80098b2:	0635      	lsls	r5, r6, #24
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	d501      	bpl.n	80098bc <_printf_i+0x1cc>
 80098b8:	6018      	str	r0, [r3, #0]
 80098ba:	e002      	b.n	80098c2 <_printf_i+0x1d2>
 80098bc:	0671      	lsls	r1, r6, #25
 80098be:	d5fb      	bpl.n	80098b8 <_printf_i+0x1c8>
 80098c0:	8018      	strh	r0, [r3, #0]
 80098c2:	2300      	movs	r3, #0
 80098c4:	6123      	str	r3, [r4, #16]
 80098c6:	4616      	mov	r6, r2
 80098c8:	e7ba      	b.n	8009840 <_printf_i+0x150>
 80098ca:	680b      	ldr	r3, [r1, #0]
 80098cc:	1d1a      	adds	r2, r3, #4
 80098ce:	600a      	str	r2, [r1, #0]
 80098d0:	681e      	ldr	r6, [r3, #0]
 80098d2:	6862      	ldr	r2, [r4, #4]
 80098d4:	2100      	movs	r1, #0
 80098d6:	4630      	mov	r0, r6
 80098d8:	f7f6 fc7a 	bl	80001d0 <memchr>
 80098dc:	b108      	cbz	r0, 80098e2 <_printf_i+0x1f2>
 80098de:	1b80      	subs	r0, r0, r6
 80098e0:	6060      	str	r0, [r4, #4]
 80098e2:	6863      	ldr	r3, [r4, #4]
 80098e4:	6123      	str	r3, [r4, #16]
 80098e6:	2300      	movs	r3, #0
 80098e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098ec:	e7a8      	b.n	8009840 <_printf_i+0x150>
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	4632      	mov	r2, r6
 80098f2:	4649      	mov	r1, r9
 80098f4:	4640      	mov	r0, r8
 80098f6:	47d0      	blx	sl
 80098f8:	3001      	adds	r0, #1
 80098fa:	d0ab      	beq.n	8009854 <_printf_i+0x164>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	079b      	lsls	r3, r3, #30
 8009900:	d413      	bmi.n	800992a <_printf_i+0x23a>
 8009902:	68e0      	ldr	r0, [r4, #12]
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	4298      	cmp	r0, r3
 8009908:	bfb8      	it	lt
 800990a:	4618      	movlt	r0, r3
 800990c:	e7a4      	b.n	8009858 <_printf_i+0x168>
 800990e:	2301      	movs	r3, #1
 8009910:	4632      	mov	r2, r6
 8009912:	4649      	mov	r1, r9
 8009914:	4640      	mov	r0, r8
 8009916:	47d0      	blx	sl
 8009918:	3001      	adds	r0, #1
 800991a:	d09b      	beq.n	8009854 <_printf_i+0x164>
 800991c:	3501      	adds	r5, #1
 800991e:	68e3      	ldr	r3, [r4, #12]
 8009920:	9903      	ldr	r1, [sp, #12]
 8009922:	1a5b      	subs	r3, r3, r1
 8009924:	42ab      	cmp	r3, r5
 8009926:	dcf2      	bgt.n	800990e <_printf_i+0x21e>
 8009928:	e7eb      	b.n	8009902 <_printf_i+0x212>
 800992a:	2500      	movs	r5, #0
 800992c:	f104 0619 	add.w	r6, r4, #25
 8009930:	e7f5      	b.n	800991e <_printf_i+0x22e>
 8009932:	bf00      	nop
 8009934:	08009ced 	.word	0x08009ced
 8009938:	08009cfe 	.word	0x08009cfe

0800993c <memcpy>:
 800993c:	440a      	add	r2, r1
 800993e:	4291      	cmp	r1, r2
 8009940:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009944:	d100      	bne.n	8009948 <memcpy+0xc>
 8009946:	4770      	bx	lr
 8009948:	b510      	push	{r4, lr}
 800994a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009952:	4291      	cmp	r1, r2
 8009954:	d1f9      	bne.n	800994a <memcpy+0xe>
 8009956:	bd10      	pop	{r4, pc}

08009958 <memmove>:
 8009958:	4288      	cmp	r0, r1
 800995a:	b510      	push	{r4, lr}
 800995c:	eb01 0402 	add.w	r4, r1, r2
 8009960:	d902      	bls.n	8009968 <memmove+0x10>
 8009962:	4284      	cmp	r4, r0
 8009964:	4623      	mov	r3, r4
 8009966:	d807      	bhi.n	8009978 <memmove+0x20>
 8009968:	1e43      	subs	r3, r0, #1
 800996a:	42a1      	cmp	r1, r4
 800996c:	d008      	beq.n	8009980 <memmove+0x28>
 800996e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009976:	e7f8      	b.n	800996a <memmove+0x12>
 8009978:	4402      	add	r2, r0
 800997a:	4601      	mov	r1, r0
 800997c:	428a      	cmp	r2, r1
 800997e:	d100      	bne.n	8009982 <memmove+0x2a>
 8009980:	bd10      	pop	{r4, pc}
 8009982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800998a:	e7f7      	b.n	800997c <memmove+0x24>

0800998c <_free_r>:
 800998c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800998e:	2900      	cmp	r1, #0
 8009990:	d048      	beq.n	8009a24 <_free_r+0x98>
 8009992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009996:	9001      	str	r0, [sp, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f1a1 0404 	sub.w	r4, r1, #4
 800999e:	bfb8      	it	lt
 80099a0:	18e4      	addlt	r4, r4, r3
 80099a2:	f000 f8d3 	bl	8009b4c <__malloc_lock>
 80099a6:	4a20      	ldr	r2, [pc, #128]	; (8009a28 <_free_r+0x9c>)
 80099a8:	9801      	ldr	r0, [sp, #4]
 80099aa:	6813      	ldr	r3, [r2, #0]
 80099ac:	4615      	mov	r5, r2
 80099ae:	b933      	cbnz	r3, 80099be <_free_r+0x32>
 80099b0:	6063      	str	r3, [r4, #4]
 80099b2:	6014      	str	r4, [r2, #0]
 80099b4:	b003      	add	sp, #12
 80099b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099ba:	f000 b8cd 	b.w	8009b58 <__malloc_unlock>
 80099be:	42a3      	cmp	r3, r4
 80099c0:	d90b      	bls.n	80099da <_free_r+0x4e>
 80099c2:	6821      	ldr	r1, [r4, #0]
 80099c4:	1862      	adds	r2, r4, r1
 80099c6:	4293      	cmp	r3, r2
 80099c8:	bf04      	itt	eq
 80099ca:	681a      	ldreq	r2, [r3, #0]
 80099cc:	685b      	ldreq	r3, [r3, #4]
 80099ce:	6063      	str	r3, [r4, #4]
 80099d0:	bf04      	itt	eq
 80099d2:	1852      	addeq	r2, r2, r1
 80099d4:	6022      	streq	r2, [r4, #0]
 80099d6:	602c      	str	r4, [r5, #0]
 80099d8:	e7ec      	b.n	80099b4 <_free_r+0x28>
 80099da:	461a      	mov	r2, r3
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	b10b      	cbz	r3, 80099e4 <_free_r+0x58>
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	d9fa      	bls.n	80099da <_free_r+0x4e>
 80099e4:	6811      	ldr	r1, [r2, #0]
 80099e6:	1855      	adds	r5, r2, r1
 80099e8:	42a5      	cmp	r5, r4
 80099ea:	d10b      	bne.n	8009a04 <_free_r+0x78>
 80099ec:	6824      	ldr	r4, [r4, #0]
 80099ee:	4421      	add	r1, r4
 80099f0:	1854      	adds	r4, r2, r1
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	6011      	str	r1, [r2, #0]
 80099f6:	d1dd      	bne.n	80099b4 <_free_r+0x28>
 80099f8:	681c      	ldr	r4, [r3, #0]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	6053      	str	r3, [r2, #4]
 80099fe:	4421      	add	r1, r4
 8009a00:	6011      	str	r1, [r2, #0]
 8009a02:	e7d7      	b.n	80099b4 <_free_r+0x28>
 8009a04:	d902      	bls.n	8009a0c <_free_r+0x80>
 8009a06:	230c      	movs	r3, #12
 8009a08:	6003      	str	r3, [r0, #0]
 8009a0a:	e7d3      	b.n	80099b4 <_free_r+0x28>
 8009a0c:	6825      	ldr	r5, [r4, #0]
 8009a0e:	1961      	adds	r1, r4, r5
 8009a10:	428b      	cmp	r3, r1
 8009a12:	bf04      	itt	eq
 8009a14:	6819      	ldreq	r1, [r3, #0]
 8009a16:	685b      	ldreq	r3, [r3, #4]
 8009a18:	6063      	str	r3, [r4, #4]
 8009a1a:	bf04      	itt	eq
 8009a1c:	1949      	addeq	r1, r1, r5
 8009a1e:	6021      	streq	r1, [r4, #0]
 8009a20:	6054      	str	r4, [r2, #4]
 8009a22:	e7c7      	b.n	80099b4 <_free_r+0x28>
 8009a24:	b003      	add	sp, #12
 8009a26:	bd30      	pop	{r4, r5, pc}
 8009a28:	200000fc 	.word	0x200000fc

08009a2c <_malloc_r>:
 8009a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a2e:	1ccd      	adds	r5, r1, #3
 8009a30:	f025 0503 	bic.w	r5, r5, #3
 8009a34:	3508      	adds	r5, #8
 8009a36:	2d0c      	cmp	r5, #12
 8009a38:	bf38      	it	cc
 8009a3a:	250c      	movcc	r5, #12
 8009a3c:	2d00      	cmp	r5, #0
 8009a3e:	4606      	mov	r6, r0
 8009a40:	db01      	blt.n	8009a46 <_malloc_r+0x1a>
 8009a42:	42a9      	cmp	r1, r5
 8009a44:	d903      	bls.n	8009a4e <_malloc_r+0x22>
 8009a46:	230c      	movs	r3, #12
 8009a48:	6033      	str	r3, [r6, #0]
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a4e:	f000 f87d 	bl	8009b4c <__malloc_lock>
 8009a52:	4921      	ldr	r1, [pc, #132]	; (8009ad8 <_malloc_r+0xac>)
 8009a54:	680a      	ldr	r2, [r1, #0]
 8009a56:	4614      	mov	r4, r2
 8009a58:	b99c      	cbnz	r4, 8009a82 <_malloc_r+0x56>
 8009a5a:	4f20      	ldr	r7, [pc, #128]	; (8009adc <_malloc_r+0xb0>)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	b923      	cbnz	r3, 8009a6a <_malloc_r+0x3e>
 8009a60:	4621      	mov	r1, r4
 8009a62:	4630      	mov	r0, r6
 8009a64:	f000 f862 	bl	8009b2c <_sbrk_r>
 8009a68:	6038      	str	r0, [r7, #0]
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	f000 f85d 	bl	8009b2c <_sbrk_r>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d123      	bne.n	8009abe <_malloc_r+0x92>
 8009a76:	230c      	movs	r3, #12
 8009a78:	6033      	str	r3, [r6, #0]
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f000 f86c 	bl	8009b58 <__malloc_unlock>
 8009a80:	e7e3      	b.n	8009a4a <_malloc_r+0x1e>
 8009a82:	6823      	ldr	r3, [r4, #0]
 8009a84:	1b5b      	subs	r3, r3, r5
 8009a86:	d417      	bmi.n	8009ab8 <_malloc_r+0x8c>
 8009a88:	2b0b      	cmp	r3, #11
 8009a8a:	d903      	bls.n	8009a94 <_malloc_r+0x68>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	441c      	add	r4, r3
 8009a90:	6025      	str	r5, [r4, #0]
 8009a92:	e004      	b.n	8009a9e <_malloc_r+0x72>
 8009a94:	6863      	ldr	r3, [r4, #4]
 8009a96:	42a2      	cmp	r2, r4
 8009a98:	bf0c      	ite	eq
 8009a9a:	600b      	streq	r3, [r1, #0]
 8009a9c:	6053      	strne	r3, [r2, #4]
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	f000 f85a 	bl	8009b58 <__malloc_unlock>
 8009aa4:	f104 000b 	add.w	r0, r4, #11
 8009aa8:	1d23      	adds	r3, r4, #4
 8009aaa:	f020 0007 	bic.w	r0, r0, #7
 8009aae:	1ac2      	subs	r2, r0, r3
 8009ab0:	d0cc      	beq.n	8009a4c <_malloc_r+0x20>
 8009ab2:	1a1b      	subs	r3, r3, r0
 8009ab4:	50a3      	str	r3, [r4, r2]
 8009ab6:	e7c9      	b.n	8009a4c <_malloc_r+0x20>
 8009ab8:	4622      	mov	r2, r4
 8009aba:	6864      	ldr	r4, [r4, #4]
 8009abc:	e7cc      	b.n	8009a58 <_malloc_r+0x2c>
 8009abe:	1cc4      	adds	r4, r0, #3
 8009ac0:	f024 0403 	bic.w	r4, r4, #3
 8009ac4:	42a0      	cmp	r0, r4
 8009ac6:	d0e3      	beq.n	8009a90 <_malloc_r+0x64>
 8009ac8:	1a21      	subs	r1, r4, r0
 8009aca:	4630      	mov	r0, r6
 8009acc:	f000 f82e 	bl	8009b2c <_sbrk_r>
 8009ad0:	3001      	adds	r0, #1
 8009ad2:	d1dd      	bne.n	8009a90 <_malloc_r+0x64>
 8009ad4:	e7cf      	b.n	8009a76 <_malloc_r+0x4a>
 8009ad6:	bf00      	nop
 8009ad8:	200000fc 	.word	0x200000fc
 8009adc:	20000100 	.word	0x20000100

08009ae0 <_realloc_r>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	4607      	mov	r7, r0
 8009ae4:	4614      	mov	r4, r2
 8009ae6:	460e      	mov	r6, r1
 8009ae8:	b921      	cbnz	r1, 8009af4 <_realloc_r+0x14>
 8009aea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009aee:	4611      	mov	r1, r2
 8009af0:	f7ff bf9c 	b.w	8009a2c <_malloc_r>
 8009af4:	b922      	cbnz	r2, 8009b00 <_realloc_r+0x20>
 8009af6:	f7ff ff49 	bl	800998c <_free_r>
 8009afa:	4625      	mov	r5, r4
 8009afc:	4628      	mov	r0, r5
 8009afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b00:	f000 f830 	bl	8009b64 <_malloc_usable_size_r>
 8009b04:	42a0      	cmp	r0, r4
 8009b06:	d20f      	bcs.n	8009b28 <_realloc_r+0x48>
 8009b08:	4621      	mov	r1, r4
 8009b0a:	4638      	mov	r0, r7
 8009b0c:	f7ff ff8e 	bl	8009a2c <_malloc_r>
 8009b10:	4605      	mov	r5, r0
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d0f2      	beq.n	8009afc <_realloc_r+0x1c>
 8009b16:	4631      	mov	r1, r6
 8009b18:	4622      	mov	r2, r4
 8009b1a:	f7ff ff0f 	bl	800993c <memcpy>
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4638      	mov	r0, r7
 8009b22:	f7ff ff33 	bl	800998c <_free_r>
 8009b26:	e7e9      	b.n	8009afc <_realloc_r+0x1c>
 8009b28:	4635      	mov	r5, r6
 8009b2a:	e7e7      	b.n	8009afc <_realloc_r+0x1c>

08009b2c <_sbrk_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d06      	ldr	r5, [pc, #24]	; (8009b48 <_sbrk_r+0x1c>)
 8009b30:	2300      	movs	r3, #0
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	602b      	str	r3, [r5, #0]
 8009b38:	f7f8 f986 	bl	8001e48 <_sbrk>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_sbrk_r+0x1a>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_sbrk_r+0x1a>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	20000d28 	.word	0x20000d28

08009b4c <__malloc_lock>:
 8009b4c:	4801      	ldr	r0, [pc, #4]	; (8009b54 <__malloc_lock+0x8>)
 8009b4e:	f000 b811 	b.w	8009b74 <__retarget_lock_acquire_recursive>
 8009b52:	bf00      	nop
 8009b54:	20000d30 	.word	0x20000d30

08009b58 <__malloc_unlock>:
 8009b58:	4801      	ldr	r0, [pc, #4]	; (8009b60 <__malloc_unlock+0x8>)
 8009b5a:	f000 b80c 	b.w	8009b76 <__retarget_lock_release_recursive>
 8009b5e:	bf00      	nop
 8009b60:	20000d30 	.word	0x20000d30

08009b64 <_malloc_usable_size_r>:
 8009b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b68:	1f18      	subs	r0, r3, #4
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	bfbc      	itt	lt
 8009b6e:	580b      	ldrlt	r3, [r1, r0]
 8009b70:	18c0      	addlt	r0, r0, r3
 8009b72:	4770      	bx	lr

08009b74 <__retarget_lock_acquire_recursive>:
 8009b74:	4770      	bx	lr

08009b76 <__retarget_lock_release_recursive>:
 8009b76:	4770      	bx	lr

08009b78 <_init>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	bf00      	nop
 8009b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b7e:	bc08      	pop	{r3}
 8009b80:	469e      	mov	lr, r3
 8009b82:	4770      	bx	lr

08009b84 <_fini>:
 8009b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b86:	bf00      	nop
 8009b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b8a:	bc08      	pop	{r3}
 8009b8c:	469e      	mov	lr, r3
 8009b8e:	4770      	bx	lr
